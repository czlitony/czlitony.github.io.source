{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/wechatpublic.jpg","path":"uploads/wechatpublic.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/Wechatpay.jpg","path":"images/Wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/timg.jpg","path":"images/timg.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/Alipay.jpg","path":"images/Alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1468493738987},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1468493738987},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1468493738987},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1468493738987},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1468493738991},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1468493738991},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1468493738991},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1468493738991},{"_id":"themes/next/_config.yml","hash":"6b3a6783792a3744c05c6391ef12a201712d4af9","modified":1469406266640},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1468493738991},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1468493738991},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1468493738999},{"_id":"source/_posts/2016-06-30-Visual-Stdio-Code.md","hash":"4a73d7a72e218bb3165614e33cdd851c13b59f06","modified":1468647720536},{"_id":"source/_posts/2016-06-30-cmd-markdown.md","hash":"f58c57c34e18f3c25f981309c01992ed7336a5d8","modified":1468587313860},{"_id":"source/_posts/2016-07-04-digital-signature-and-digital certificate.md","hash":"ef9301924a357e47d90f10332ceea18c1c1ef025","modified":1468647720536},{"_id":"source/_posts/2016-07-06-ssl-vpn-detailed-explanation.md","hash":"dc3dbbb615740ecaaaf7cfff727f3e09da1590f7","modified":1468587341020},{"_id":"source/_posts/2016-07-12-git-p4merge.md","hash":"90f6e1437fd4dc77b4d0945336810d40a323e65d","modified":1468587346652},{"_id":"source/_posts/2016-07-12-samba.md","hash":"ef0f6ccb3204501430f4198536a848bc400e2bcb","modified":1468587351316},{"_id":"source/_posts/2016-07-12-vmvare-vsphere-share-plate.md","hash":"88bbcb4b819fb72c56041f039b7f968cff01c71b","modified":1468587358524},{"_id":"source/_posts/2016-07-16-Notes.md","hash":"550bbfa531976806171b4cb8ce46991b80c68625","modified":1469523516285},{"_id":"source/_posts/2016-07-20-ASF-xalan.md","hash":"8127ed452233f1d6d3094cc3bcb39bef0d6d5d2f","modified":1469011888831},{"_id":"source/_posts/2016-07-21-xslt-java-function.md","hash":"b692b82276315b7787a7d7fb3c770b2f2407a181","modified":1469148937760},{"_id":"source/_posts/2016-07-22-jdbc-remote-connect-mysql.md","hash":"61c93f3983f9fa890e164d80773f6e7261dc316f","modified":1469502035717},{"_id":"source/_posts/2016-07-26-java-DOM-create-xml.md","hash":"969526be5ab1c72a78188e1f194afa0c155470c3","modified":1469502046414},{"_id":"source/_posts/hello-world.md","hash":"565b0ee7a5ef8219c00603ae62ed2a2862d96c60","modified":1468587369628},{"_id":"source/categories/index.md","hash":"8e584bd78458fcc8c76e327a382d262cf3e908ac","modified":1468585406717},{"_id":"source/tags/index.md","hash":"a677b60543ea04f9ff959972c2bab882947ba974","modified":1468585404769},{"_id":"source/uploads/wechatpublic.jpg","hash":"3e373f3175f1555ef315debfc6dc7bd9ba25353f","modified":1468541517806},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"7b80669540a0ba5ec6098f50bb7923921278e85a","modified":1468801171619},{"_id":"themes/next/.git/FETCH_HEAD","hash":"a84d7f80dc57b226a10e0df09e97a4a9004abe62","modified":1469406266592},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1468493738967},{"_id":"themes/next/.git/ORIG_HEAD","hash":"3e521bb674dbae3919a1337ecc19f5b1a9416bd9","modified":1469011223351},{"_id":"themes/next/.git/config","hash":"864b6731a9cce7f333035bc6e06bfc866b392568","modified":1468493738971},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1468493649991},{"_id":"themes/next/.git/index","hash":"967bea40f291109089d76668680a391f761a7cc2","modified":1469406270600},{"_id":"themes/next/.git/packed-refs","hash":"39a9824cd1af97fb660290622cb5edc6dd80feb9","modified":1468493738967},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1468493738987},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1468493738987},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1468493738991},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1468493738991},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1468493738991},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1468493738991},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1468493738991},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1468493738991},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1468493738991},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1468493738991},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1468493738991},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1468493738991},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1468493738991},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1468493738991},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1468493738991},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1468493738995},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1468493738995},{"_id":"themes/next/layout/index.swig","hash":"032db48f5a3cfd6f9692fd5952b8a7aea7dad3f7","modified":1468583268372},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1468493738995},{"_id":"themes/next/layout/post.swig","hash":"21a0ff481a3b034ae73d7c0c3712375c4b7254fa","modified":1468583237444},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1468493738999},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1468493738999},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1468493739015},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1468493739015},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1468493739015},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468493738999},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1468493649991},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1468493649991},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1468493649991},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1468493649991},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1468493649991},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1468493649991},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1468493649991},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1468493649991},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1468493649991},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1468493649991},{"_id":"themes/next/.git/logs/HEAD","hash":"31a65d2b2fce5c1b348742b760c63a2dcdf5b187","modified":1469406266644},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1468493738991},{"_id":"themes/next/layout/_macro/post.swig","hash":"2dfa5a0b502d30556bf481db52abb9514f99c281","modified":1468583147551},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1468493738991},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1468493738991},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1468493738991},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1468493738991},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1468493738991},{"_id":"themes/next/layout/_partials/footer.swig","hash":"96048c09d55da170c030cfc971d3bb14e891a7c1","modified":1468583468260},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1468493738995},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1468493738995},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1468493738995},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1468493738995},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1468493738995},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1468493738995},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1468493738995},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1468493738995},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1468493738999},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1468493738999},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1468493738999},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1468493738999},{"_id":"themes/next/source/images/Wechatpay.jpg","hash":"58a2e7515b6299f1fc8944816b9e5569c1c44e80","modified":1468541554810},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1468493738999},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1468493738999},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1468493738999},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1468493739003},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1468493739003},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1468493739003},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1468493739003},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1468493739003},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1468493739003},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1468493739003},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1468493739003},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1468493739003},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1468493739003},{"_id":"themes/next/source/images/timg.jpg","hash":"6f960558d7160ed64b33c8e7940ab5710e2a5933","modified":1468541554810},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468493738995},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468493738995},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468493738999},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468493738999},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468493738999},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468493738999},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468493738999},{"_id":"themes/next/source/images/Alipay.jpg","hash":"909c7791bd36f8c27bf2d96f007a75a5ddb88a6b","modified":1468541554810},{"_id":"themes/next/.git/objects/00/18820fa3e1a64a18e16d7c69e9c664948dd983","hash":"b6d670be11d2084123d705c2c4299322de4dfc23","modified":1468647704932},{"_id":"themes/next/.git/objects/02/90e3dfccfdf7010ad29a3cb2766470e5cbe8fd","hash":"7a80b825d599adea198908b51873822361dccbf9","modified":1468647704932},{"_id":"themes/next/.git/objects/03/f0b0dab1f16ce99d2ba871261c5997179c9b88","hash":"958d662014f51aebdd71f02d2a32ff8136a68ea0","modified":1468647704956},{"_id":"themes/next/.git/objects/05/765c6956b187ac6582d74f4759141452d34d98","hash":"51a5aa5ff324581c89e3755f1ce4cb2ad4290800","modified":1468541554010},{"_id":"themes/next/.git/objects/07/05f069d37e61766a64fad070946fcb94342482","hash":"392ea67821e5ef1407d9ec17853fdacc77338e1d","modified":1468800834843},{"_id":"themes/next/.git/objects/0e/648aa786aa81727c5bea490dd4af520fdd1919","hash":"2596de5041c6bfe5a012970e13983a5061ed2221","modified":1468647704932},{"_id":"themes/next/.git/objects/10/34da2bd24a4e4433b65b7f141573ff26b2babe","hash":"5099ccbfb7c5594e2de69083c09f10d3aff5f06b","modified":1468801171623},{"_id":"themes/next/.git/objects/10/5b1b1d82c8968cc295b97cdba2b1459faa93e4","hash":"cda724da142a97e0c0d90df84b67ca124b77abbd","modified":1468800834963},{"_id":"themes/next/.git/objects/16/d2c72efff3a53fb1da6141be9178d544deafec","hash":"5cbe01332f67e67b39a45159c80e151a02d2ba4e","modified":1468652381193},{"_id":"themes/next/.git/objects/18/0bb52e653488a31d5c3cea60802d1a43d86d99","hash":"bfa7a2e1b19541bad8f0a360647cf3b3a6515cbe","modified":1468666073136},{"_id":"themes/next/.git/objects/22/f43eac14a4e4d0c006028e17ace8e99112a0da","hash":"7bcb70085672fe3cb8bc5693e32ad224235f3c34","modified":1468588747746},{"_id":"themes/next/.git/objects/24/fa257310d416b72cee7080929b4c2a855de354","hash":"dc98bf77f08f49d63d3009a555e6f2b02c2436d9","modified":1468666073140},{"_id":"themes/next/.git/objects/26/2bc83e7ef203c6b5e94ed9844e45fe9bafd1cf","hash":"b8a540440a4928527b18ec79121ac0731d6485d5","modified":1468588747746},{"_id":"themes/next/.git/objects/2b/a3ae765fbe2f05fbc34148d16fffe817c3244a","hash":"ef7e5b44f27a227d1d8d2cbe635c1eee09091a3a","modified":1468652366893},{"_id":"themes/next/.git/objects/2f/d327b95c1e6e211fae8e4de5e8e8a634a01181","hash":"a91a3118b21d04fbe908df5a7f5f27bd80715eef","modified":1468647704932},{"_id":"themes/next/.git/objects/33/ae4e10d793aba173a50b995bb758756f826d3c","hash":"44c414b8fb0cc2eadd5c2bab57ede326aca8ec52","modified":1468800834843},{"_id":"themes/next/.git/objects/36/120c86dddbfb8e74d0a5be2856439934315730","hash":"217c6c3fca8c726eca9bbd66232f7a24a1b4610b","modified":1468501424957},{"_id":"themes/next/.git/objects/39/f4050dd08141bbd72722e19fa6cd74677fe3ee","hash":"31dc417490d3560a4cd3a84a544b35f7f51f8feb","modified":1468541554730},{"_id":"themes/next/.git/objects/3c/1713a36f89d6a7668ee2fce353d15fbfc547e4","hash":"a3d842ce14bf6a2e8af7b252dc9a6ca6be5ccf44","modified":1468666073136},{"_id":"themes/next/.git/objects/3e/8816c22b729f7f690e5666a07f0351218ffef4","hash":"e7e781a0ef5dcd57dbce8f045a82c3ceee60d19f","modified":1468666073136},{"_id":"themes/next/.git/objects/3f/371446910a39e886d3e30c496f6e1863f2b06d","hash":"73e9fbfd394792f23591107bbe3b4f6337f447ce","modified":1468800834815},{"_id":"themes/next/.git/objects/41/7c0ad0eaa2d19c8b2707e352e4028b70628c83","hash":"fdbddb76c42a40792694152045f0a1115e984d6c","modified":1468667142933},{"_id":"themes/next/.git/objects/43/11191d04a4f13f414321e624af8498a77c5089","hash":"3fc7ec181ab04830c8c509a1756abaabaeaf9fb0","modified":1468652381193},{"_id":"themes/next/.git/objects/44/791104e4bd45502080898b82929fd66fda23b2","hash":"e2573368f554d659c9a06dfc6af56e0b52c5a91a","modified":1468647704936},{"_id":"themes/next/.git/objects/45/3c4ee7a0aad453dad9519704dbe805f06c4d1b","hash":"7a92687c9243d5c5eb8eebdb3a50e0adeed899e8","modified":1468801171623},{"_id":"themes/next/.git/objects/46/473927d848f135b0138830881c7d5936a37538","hash":"9305b56783b30d431fed2d253fb26a3a1c8047df","modified":1468652366893},{"_id":"themes/next/.git/objects/4a/f7289e5877c35ca4c2ae75bd0bacc636dec176","hash":"897aa97f200cc3bef87c03bab0c7646e11a8c651","modified":1468562338319},{"_id":"themes/next/.git/objects/4b/8e0eead6fdaad78386a4d4bba0cb44bcfe7e42","hash":"ab7e8b512f65fbd9ea90f8936d4ba0f53817572b","modified":1468652366893},{"_id":"themes/next/.git/objects/4b/afcff3d4e6bfd3913e5a53864f811c8667c9ad","hash":"64d207590fa4b8c715e0171b8aca5107d6099a9e","modified":1468666073140},{"_id":"themes/next/.git/objects/4c/4ac8c1882f7f7e1d3505acf61e87e0d8aa04cc","hash":"8713dbe75a161fa4c66e769947780ea6341cad82","modified":1468800834963},{"_id":"themes/next/.git/objects/4d/1c0f35061b732996fbb54d0f3ab8177473c2d9","hash":"3f994f6158c42f0d22ef2688e75fe8e95a4891ec","modified":1468647704956},{"_id":"themes/next/.git/objects/4d/40325096c33d67c80b0cdb12b3e1b58cfa37f6","hash":"b50be6f5b6883e4d69461f2a0e6409d3d213f5c6","modified":1469406266572},{"_id":"themes/next/.git/objects/4e/119925ecce77b51e0c13a23fd23e422bdc7ea2","hash":"85c9f9822f99d4dbf8055969d886be43ad59fcfe","modified":1468666073140},{"_id":"themes/next/.git/objects/50/4b0f44a80ab3c3257e9b560de875964628192d","hash":"3a8334ff3e6da014e4b357562a8e7556778b1593","modified":1468498049862},{"_id":"themes/next/.git/objects/53/5c48bd69a4ff1ce7fbcec5f0642d2b9cf0a614","hash":"2f3db996227964e3a58d0324be71e4b2e7f702e5","modified":1468562282103},{"_id":"themes/next/.git/objects/53/e6158048c9a331b2c469113f9f2e7209489080","hash":"387d72debf74b355f25f098e612767814413a95e","modified":1468541554042},{"_id":"themes/next/.git/objects/54/e0fd9d640501c4b4a2c4631264c8795f8ad118","hash":"57ec4e1ea80697568e9dcc1fc78232aab56c5242","modified":1468647704936},{"_id":"themes/next/.git/objects/55/274f5301d9d62e20a628949374fd0f0a554575","hash":"4fb8736baaf0ce71da189c8c7480a22aea766041","modified":1468647704896},{"_id":"themes/next/.git/objects/55/ff302920ff3862f0b517299118193ed0b771d4","hash":"37cab4e936610472dbac885a4d8958926e9b0123","modified":1468647704956},{"_id":"themes/next/.git/objects/57/a8e85426fae6bb003c3d0d84408d4c837e6235","hash":"8a2b2601996cc818342d16e8911f6eba6a5eb37a","modified":1468801171623},{"_id":"themes/next/.git/objects/59/b38dba625ef53240d90562d50ecc026f75a651","hash":"aae80ac2795ea855b8ccb227ad1fc7c905e50729","modified":1468800835207},{"_id":"themes/next/.git/objects/5b/b7f58d67eaf3a912bb59328f542f362dec496b","hash":"4156c3df7c30cac140b72ba8ef550ee271d39e4c","modified":1468647704896},{"_id":"themes/next/.git/objects/61/1517058a73ad5e1697ad060aa32122cad799af","hash":"0a1a364aa334c383d0fb4c702028e9b7d3157b59","modified":1468647704936},{"_id":"themes/next/.git/objects/63/1b5df172dd7a8e86f9d15fdde98199130047e5","hash":"5a6012e880fe49ad597486bbefe2e0b655ee30d6","modified":1468541554018},{"_id":"themes/next/.git/objects/64/5552d570d73a54805842886d595a4db78ebf05","hash":"e607da4e0cdceda6b083ea34fd9ffae10641e96f","modified":1468647704896},{"_id":"themes/next/.git/objects/64/f07b96f1459333f00622ae3c93902c8ee49c1e","hash":"51fe60d45050b8889f61b4da512d4171f50d2117","modified":1468652381193},{"_id":"themes/next/.git/objects/67/64bd2f183a03a6e53a215a8a91d818fde32ef1","hash":"7f6af61b59a520bb4f3742e8f38d778a12f69ff0","modified":1468498036022},{"_id":"themes/next/.git/objects/67/88e1bdb7a06cc237253ec640d30a04c8022e36","hash":"4c85de957a6ae6975a95a0ce0088a18ebb4e9572","modified":1468541554754},{"_id":"themes/next/.git/objects/67/f8af3447c8f1a169e01c045ae479942bdd5205","hash":"73d4e916e4fc8cf9026d6503af7863ad73100068","modified":1468667135653},{"_id":"themes/next/.git/objects/68/48bdf0961ef40f67e70bf1ed9c43b7d88f623f","hash":"8a6aa74ab895111e10849a665ffbe6da3fbd8993","modified":1468652366889},{"_id":"themes/next/.git/objects/68/4a18137bc9c3695768f98723176a745bc5a2a4","hash":"29457ea57037501aa64867956c9e681f2ec45e54","modified":1468647704896},{"_id":"themes/next/.git/objects/69/9009875983ed356e4cfa142d525e02a1d17cb0","hash":"26e881470e8e405b8ec22e99d5a08c17e6d6867a","modified":1468588784566},{"_id":"themes/next/.git/objects/69/da032886766b95f7c90df8e9e5f8aa589212bf","hash":"71aec1d8dec2e78ee0629d9367dd933fc49e7c32","modified":1468647704932},{"_id":"themes/next/.git/objects/6a/d1e9478bd306d075411020db87dd165239a896","hash":"740d9dcdfa8153d6ddecea0f07a26b5ff0a2084a","modified":1468588747746},{"_id":"themes/next/.git/objects/6b/15eba1ce1b18141f4d08bf80e50e7d2a305d27","hash":"d8d58b538f44082b945e192e2465259d58e5bdd0","modified":1468541554730},{"_id":"themes/next/.git/objects/70/cff6d083a46baa5c2cce1b90c6d055849bb36e","hash":"770025ee8fada2b22748a094c091ab7fd9a90beb","modified":1468647704968},{"_id":"themes/next/.git/objects/73/06940522eb625cf66880d03452ed187207a388","hash":"344d573f3bec0e6366a6428839ea547368a5942b","modified":1468800835207},{"_id":"themes/next/.git/objects/77/6564618f823d1db92dffe9970fd60cf64342ce","hash":"b1f495967aa9d496c9924769d6725b1764f07d77","modified":1468800834891},{"_id":"themes/next/.git/objects/7a/55ee914015816f37f7c81964a1cbc8bf6ca25a","hash":"93b860f54170b5e8a6f1b9de5bf7609fdf8499de","modified":1468800834815},{"_id":"themes/next/.git/objects/7c/7f5c36030c1ab22ed35e0c985e36244029f281","hash":"e12f190ec55ff7ae7fc4f4bea152569e9c6126c7","modified":1468800834963},{"_id":"themes/next/.git/objects/7e/1490ea8a501a762ce621128a333697457d1583","hash":"f3b37d7ec334a2aa52fc4b0a53fbb648b1020ce7","modified":1468666073136},{"_id":"themes/next/.git/objects/80/64dbd2a3559f3e29025dbfc595c27f294d3069","hash":"102e272ca131b9247bb8c180000e00549922f8ac","modified":1468801157835},{"_id":"themes/next/.git/objects/83/7fac2f32ec4c5e731d8fcea9ba81a515b27413","hash":"be3cbc3d90d3eff3aa1625830946fac1c2dfd1b0","modified":1468666073140},{"_id":"themes/next/.git/objects/85/f275f254f0a03c094d0af9e85e2a7b7260c504","hash":"9df4846f520e5906808c043a28440b8bee193f18","modified":1468666073140},{"_id":"themes/next/.git/objects/87/2c34fe124e15af1f24190a413ea657ee540846","hash":"52e586de70c7afcb37ab7253c8e6817545929b81","modified":1468800834891},{"_id":"themes/next/.git/objects/88/07d2062332a1d90b838aa5b25c64f975a6f819","hash":"04460a4e25bac3791f2cde7c2daf9d8d362b7f17","modified":1468647704896},{"_id":"themes/next/.git/objects/89/5984d6f4af73fa0e3721416238a33c0873a925","hash":"974d3efe8b677dab7aa0d27846ddfda94b6ee48b","modified":1468588784562},{"_id":"themes/next/.git/objects/8b/8184478b98c82d413e14a21ecf88d6eac117b7","hash":"884367ee7bc093f1a5a15e732c620916987a8922","modified":1468647704956},{"_id":"themes/next/.git/objects/8c/b4dad5034b2aa43cebebcc5c2dfaba977e6bc8","hash":"7acd3c27e2399092be088e515effa051337a4d6c","modified":1468541554354},{"_id":"themes/next/.git/objects/8d/70667391eadc8f546f52bf577001662f833819","hash":"2d2b7c410227d917c4cedf94042b13757f85daff","modified":1468541554042},{"_id":"themes/next/.git/objects/8d/7dc8474fdaa1aa084322a798fd770f662d3813","hash":"ed953a64b116832bbbc834f73716bcb7c05a7e22","modified":1469406266572},{"_id":"themes/next/.git/objects/91/ebdb55ea900225f4f8a268c7c2fa4e72da42d5","hash":"ccf6fdc9409a391610ca793ba5547eef1057863b","modified":1468800834815},{"_id":"themes/next/.git/objects/92/03e0d2a71a4a6008379ce8efa8d492fba03ca7","hash":"89b8c3be8355ddf6ada5ec665c01194078596430","modified":1468498049862},{"_id":"themes/next/.git/objects/95/b697572bef84574ec9c7076610a5f0bcdcee4c","hash":"9d1ebaf26400fedbfd5c508488521658a196071d","modified":1468647704932},{"_id":"themes/next/.git/objects/99/7c91770f2af84e6cd975331dfc16a309ddf83c","hash":"e0e89f7855bf0f79dff17f3172a0c5f7953c6702","modified":1468652381193},{"_id":"themes/next/.git/objects/9f/2cf823150c19821803cb64d9596510023bd1fa","hash":"3c3223ae3fc2c21b67321296b3748c40c24e95d8","modified":1468652381197},{"_id":"themes/next/.git/objects/a0/98bbed70df26d5065682e99eedcd660a677e24","hash":"892ad1dbfca5f88275458659978492db3a6041f5","modified":1469406266572},{"_id":"themes/next/.git/objects/a0/d27920a7b561b95a9badad2d88c94c99765a73","hash":"e665a8325b55897af94c29bb6e8ae89763a283df","modified":1468652366889},{"_id":"themes/next/.git/objects/a2/b736389c2a8f568f5bd803cb2723b0fd99b94d","hash":"015437eab641123d220383b111cd770e6608e58e","modified":1468647704968},{"_id":"themes/next/.git/objects/a5/3d484b288deec0310178101aec4be20e2e0126","hash":"88436c40f51e8f99e1abc413ab8a05594ea78d71","modified":1468647704956},{"_id":"themes/next/.git/objects/a6/52fe10e22776cb9d42a9abb2d724a347c5bb71","hash":"3fdda44e745d1eb32de48add13f15775919fe39b","modified":1468541554042},{"_id":"themes/next/.git/objects/a6/6682fdc9c7202c1168e4d398320ac3649c35b6","hash":"7abadec173b1c6f4c056f4a28969aae74a4e36db","modified":1468666073140},{"_id":"themes/next/.git/objects/a6/8c08785833c368a6990b6532e677655cfff6e9","hash":"a934727a5e689960f77d9019203a96cf7fe31562","modified":1468647704928},{"_id":"themes/next/.git/objects/aa/bbe4e0f2dac945f3d1d84f244e96291186ff33","hash":"28b838c8b6d892cc7d3d1dec8d740e379b7ae836","modified":1468800834891},{"_id":"themes/next/.git/objects/aa/c85e4c99837af44eabdb6bf84e0d700cdd60ee","hash":"431883c52daa40c4df07553685254309344a2334","modified":1468800834963},{"_id":"themes/next/.git/objects/af/21a76db22fb16e863fcf10098371ada8886a85","hash":"589ffa040461886cefbe8372ac49303ac6810474","modified":1468647704896},{"_id":"themes/next/.git/objects/b1/3cf8a56322a9c7e7ad9ac52d6e20d4ebd495ff","hash":"0ee91c43d2f02a5ba3d41392da783cc7b3526364","modified":1468501424957},{"_id":"themes/next/.git/objects/b1/ed4e1db42918da5112fd283865b3d175721454","hash":"d0c8424470057aad6ff9a2701f50f1597eb4c4cc","modified":1468666073136},{"_id":"themes/next/.git/objects/b7/900cedb56f840fa5c163d32a5f7f12da56af87","hash":"e5e26945a8e7ea43056e793b5fd97410cc6fc2aa","modified":1468541554758},{"_id":"themes/next/.git/objects/b8/06001994e013a78ff40936744d949e1748f8c5","hash":"182959598b01fd60d70b516a9bb44ee4c6e01577","modified":1468588784562},{"_id":"themes/next/.git/objects/b8/c2e88c4ffe1983e0b40994ebfec49d979a8ee7","hash":"f8367e4cdfea4c6335d24790d11d160721f0f3f4","modified":1468647704932},{"_id":"themes/next/.git/objects/b9/6bd7b733f40a6899124e79ad953102241271c8","hash":"9f8dc0f84c5c0734a211eb6608a20e51ac7803ae","modified":1468647704896},{"_id":"themes/next/.git/objects/bb/5a94dc750cfd6b4d40c89e57958879ba6dce81","hash":"b22af3a83f8e3ad3d816b0e8b9a88bf975231d08","modified":1468647704932},{"_id":"themes/next/.git/objects/be/2047091f6aed74fbaee7ac29f01ac89206433c","hash":"087368d380a0c051174b3265f8c732e53023ca5d","modified":1468562338319},{"_id":"themes/next/.git/objects/c2/5c16dba77ef981462dcb5b666f27529095b9c9","hash":"95376763294a1b32a8eaa717ff28e9ab4b85261b","modified":1468588784562},{"_id":"themes/next/.git/objects/c2/dac6ffaba47edae2889dd77162b8b41857fe49","hash":"a7ac7d6ab4ee18555eee66d258fc03d85f479e4e","modified":1468801171623},{"_id":"themes/next/.git/objects/c2/e3c29fa05461d371d34f17f042d120dd823d56","hash":"f42708d5a17e26e780c6a6d6880fe25b404540a5","modified":1468588747746},{"_id":"themes/next/.git/objects/c3/35167ee2989a42167e1542dc23f5b528fb4af0","hash":"4d85b82fa5f2a4315cbb72201e4b0e516bec2d5a","modified":1468800834843},{"_id":"themes/next/.git/objects/c6/fbb59380fc7ed5100c8dee860c74456310aab7","hash":"28dc5b632377e75a62e82c6404dda9ac999c9a9e","modified":1468652381197},{"_id":"themes/next/.git/objects/ca/81f2dae5da50dbd3c490196bf9a99ddd44b41b","hash":"11af30289039be14550f52afd8ab5f4405771db0","modified":1468801171623},{"_id":"themes/next/.git/objects/cd/bac982da6738c0f3c259924d0cf6e6678f974b","hash":"d5261967bcdb1aa0f1866110d06e731e3eea44bc","modified":1468647704928},{"_id":"themes/next/.git/objects/ce/1d02f8d7ad6e75770140cf2d9b3e7617955c22","hash":"9d3a2184fcf261da7cd1c26ed551a559f9973098","modified":1468652381193},{"_id":"themes/next/.git/objects/d0/0325fbd7cf40152041f965283ee0a331865ffd","hash":"10b61b8f929518e6a1e99ef9346ef8084790267f","modified":1468800835243},{"_id":"themes/next/.git/objects/d0/229b82970c507f95b595da53847a3414029dbd","hash":"2d4c4b801ca0c780bef0e85e4e2753c3c247f2e3","modified":1468501410673},{"_id":"themes/next/.git/objects/d1/0bad91042f867d84b13d20359d6e9e1ce82b67","hash":"ed4466462399697d58a803a1739d0d8ca321fcba","modified":1468801171623},{"_id":"themes/next/.git/objects/d2/7c21193d06c93f901716aa1fd7a1780a8d2df8","hash":"0c3a4b1c25b5efd1a1359f1f9cde8c9280845f21","modified":1468800834803},{"_id":"themes/next/.git/objects/d7/61af276fdcb5c8f7dba2b21d8539cffa462080","hash":"a81ce86d3ebd2f186d9d907aa2389872f024fa99","modified":1468667142933},{"_id":"themes/next/.git/objects/d8/43220447189c9830b7c201d3002f02cf45312d","hash":"03c0c898b5682c315ae8174645e67bae0b1f7391","modified":1468666073136},{"_id":"themes/next/.git/objects/d8/f034d08e11d1eee942bd4a4964924b51c711d0","hash":"8fc8640bb5390822bece1931da25e09108831602","modified":1468666073136},{"_id":"themes/next/.git/objects/db/6f87b2a39a70411ca330ec8c4bc5d8beb32dc4","hash":"7bacb7e3a7c9af7548b815a86f6c22159496f146","modified":1468647704932},{"_id":"themes/next/.git/objects/de/c0071429f2ed76c06e14624edd1465b0a35ed6","hash":"a99ccaf2b251e514d68a4777066a8be7c1241a48","modified":1468647704936},{"_id":"themes/next/.git/objects/e0/febb16db2f9a7e2ab88ff775c5571012cfd48e","hash":"955479efc16f419b15eda5d975151395ca2a1421","modified":1468800834843},{"_id":"themes/next/.git/objects/e4/2caa8eb55ffa23e9b54c39addfb5cac7228db4","hash":"c8949c6878c3f5482fa20b4b67b9d9c213b6cd28","modified":1468652366889},{"_id":"themes/next/.git/objects/e4/65957d8fd150bac78d9f6fe9b6dab540a5b836","hash":"ccf625872bae7cf9ee9561ac61e211ff5117d369","modified":1468647704968},{"_id":"themes/next/.git/objects/e4/8017265789a12ce32a343b9a39e78232381aa4","hash":"1795c181bc876db49ce62cb3cdb392888389cd04","modified":1468647704932},{"_id":"themes/next/.git/objects/e6/7ac1190d00bd4104af92bf72c23682f4740717","hash":"8bb68534e72242617cd6e4197f9d01248bfe454c","modified":1468541554042},{"_id":"themes/next/.git/objects/e6/b610bcad1dee5ceb881d7f1caad7dc3b4e2cc6","hash":"5f552df549bbe75de27a1b13be6899b5502eb000","modified":1468647704928},{"_id":"themes/next/.git/objects/e6/f846840083e87ddbfa6cdaf65d448d700a16f7","hash":"5a28d059ca84ec822ad5f39cac3af7d48187a8de","modified":1468647704968},{"_id":"themes/next/.git/objects/e7/bb958929e1c5546bdb2308b0a0c450d1a520aa","hash":"31e885357bfba0cfee36d9bbdc0b7f7a311d9682","modified":1468800834891},{"_id":"themes/next/.git/objects/f0/7f331e8845cfbc9be895d38b0242ce16405bc5","hash":"1670951a17eaedabac44a25e17a4420efb36b1e9","modified":1468588784562},{"_id":"themes/next/.git/objects/f4/42974e08ad391e09d69b42ee0406dbff35ddad","hash":"11f929044ed638911641f00afc6eea2d86db1227","modified":1468588747746},{"_id":"themes/next/.git/objects/f7/d3fbb8207d4d20bc2d4385ab0fce184b6e6c34","hash":"8d867b3a605cf8a88b093e0e981e72c1525b8cff","modified":1468800834815},{"_id":"themes/next/.git/objects/f9/73dd9d8707d0e94a3230453a2460e0dd08ec58","hash":"f698871ef21c37749ae2d26d3eb358a429245302","modified":1468800834963},{"_id":"themes/next/.git/refs/heads/master","hash":"e8bbfbf39ef2ffb0c12296302edba8b99f1cc794","modified":1469406266644},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1468493738995},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1468493738995},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1468493738995},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1468493738995},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1468493738995},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1468493738995},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1468493738995},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1468493738995},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1468493738995},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1468493738995},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1468493738999},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1468493738999},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1468493738999},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1468493738999},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"5bb9f7127380ed6913285965403052f555212d3e","modified":1468648961204},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a734c792066ca1c1dde82b8c2b41149ca0c915a0","modified":1468800836595},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1468493739003},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1468493739003},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1468493739003},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1468493739003},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1468493739003},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1468493739003},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1468493739003},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1468493739003},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1468493739003},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1468493739003},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1468493739003},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1468493739011},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1468493739011},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1468493739011},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1468493739011},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1468493739011},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1468493739011},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1468493739011},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1468493739011},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1468493739011},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1468493739015},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1468493739015},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1468493739015},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1468493739011},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"31a65d2b2fce5c1b348742b760c63a2dcdf5b187","modified":1469406266644},{"_id":"themes/next/.git/objects/pack/pack-c3370c7b9501aa10b5613c8dddc2383c0b252b0f.idx","hash":"10c5f61a5e89b33ab545866e72878ed48bb4114f","modified":1468493738915},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1468493738967},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"e8bbfbf39ef2ffb0c12296302edba8b99f1cc794","modified":1469406266588},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1468493738995},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1468493738995},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"dbe6f6f3f9d72bf387db9e21d99472b4815d9322","modified":1468647705276},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1468493738999},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"c830add3c2c4f2eb3adb8b1ca6d42cb987eaf7ae","modified":1468800836587},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1468493738999},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1468493738999},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1468493738999},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1468493738999},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"8285d3808f9cdea257f85302e1e805d2b2f46325","modified":1468647705276},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"fc5e6615956b93719dbfbc7d63328003387a24ea","modified":1468800925179},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"5334a537479420c564e1a4ab28ecb5d70cd41343","modified":1468648307068},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"f8f5f114f857ab5b1519f13833bf2a3770050fa4","modified":1468800836595},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1468800836595},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"707bf0175b43a86d9e584f99453cd31cc9f84a35","modified":1468647705276},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1468493739003},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1468493739003},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1468493739011},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1468493739011},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1468493739011},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1468493739007},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1468493739007},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1468493739011},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1468493739015},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"1519cee26f4ad60bff92c555e4235aee75714f1f","modified":1468493738967},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"4eff84393eeeda7a397cf9b0c3b7363b77b0adfc","modified":1469406266588},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"e74adb4a744694db51e8576d1268e201b355c9b9","modified":1468800836587},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"f116c9619f8d09c55c343d99e3685ea70fe2eda8","modified":1468800836587},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1ea2525b62640ec2871ec277f3631f72941c02f3","modified":1468800836587},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"86b3ca734231b29c4d4e8399d418b0812d6dfd4c","modified":1468800836587},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"b6c27821e3f4d92e00ac1635a17a4185e43b2d3e","modified":1468800836587},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1468493738999},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1468493738999},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1468493738999},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1468493739003},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1468493739003},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1468493739011},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1468493739011},{"_id":"themes/next/.git/objects/pack/pack-c3370c7b9501aa10b5613c8dddc2383c0b252b0f.pack","hash":"67ac7eba666dab146e1dd44dd002c14b53c2cb09","modified":1468493738903},{"_id":"public/search.xml","hash":"dd4aa37212b384158c8a047aae266940704054e0","modified":1469581263214},{"_id":"public/sitemap.xml","hash":"b3d8fdd6c5b23d6277ffdb6100aef3d68def4ee8","modified":1469581263236},{"_id":"public/categories/markdown/index.html","hash":"e9380da88f975f520c25b9a914b3e9acca7cdd0e","modified":1469581263267},{"_id":"public/categories/git/index.html","hash":"bb37d580d8f48c2570844227f8e0f0094e238366","modified":1469581263267},{"_id":"public/tags/visual-stdio-code/index.html","hash":"3b933e126d40c58cac29c58f448f841e5f32a806","modified":1469581263267},{"_id":"public/tags/vsc/index.html","hash":"f98d9e627938c024a05760fb094655b32f9e644d","modified":1469581263268},{"_id":"public/tags/markdown/index.html","hash":"7ee916423c442e87280ad177797db2e7cbd734b9","modified":1469581263268},{"_id":"public/tags/digital-signature/index.html","hash":"41bc2176b23dc7a12271806f4636b787bab4bb74","modified":1469581263268},{"_id":"public/tags/digital-certificate/index.html","hash":"146474b5fdfcefd4461d08e2f0c1cfe226a11a1c","modified":1469581263268},{"_id":"public/tags/SSL/index.html","hash":"4defd9a16132bac31c9f3b3495cb90a62f27cbcf","modified":1469581263268},{"_id":"public/tags/VPN/index.html","hash":"61d5ca759bd26d3f2069a5cf28801fb638a64bf1","modified":1469581263268},{"_id":"public/tags/git/index.html","hash":"105c7f2d46f829f69cd9583821145f48288529cd","modified":1469581263269},{"_id":"public/tags/Vmware/index.html","hash":"c8394d37cf9d64248001b32e795b3482a33035ba","modified":1469581263269},{"_id":"public/tags/xalan/index.html","hash":"f0202b5696877f9f0776200d5fd227ec95b7ebad","modified":1469581263269},{"_id":"public/tags/JDBC，-MySql/index.html","hash":"cec9c7e82f113836b5e736ee793aec463307b341","modified":1469581263269},{"_id":"public/tags/XML，-DOM/index.html","hash":"fadb81958a2c5228f8a3646d2fdd4ae52777da2b","modified":1469581263269},{"_id":"public/categories/index.html","hash":"aaba9073f66ff0ca0f0e3df6cbb7f3dc988d37ab","modified":1469581263269},{"_id":"public/tags/index.html","hash":"404d2ce9974cf8048099621da6af433194750076","modified":1469581263269},{"_id":"public/2016/07/26/2016-07-16-Notes/index.html","hash":"da72da35594265551c97853b1c9176e95c7645e1","modified":1469581263269},{"_id":"public/2016/07/26/2016-07-26-java-DOM-create-xml/index.html","hash":"43f46af1063ee50435331c699a78a0bfe5e8f48a","modified":1469581263269},{"_id":"public/2016/07/26/2016-07-22-jdbc-remote-connect-mysql/index.html","hash":"e216d16e680dc2d7beda8683ba18ff85a5159349","modified":1469581263269},{"_id":"public/2016/07/22/2016-07-21-xslt-java-function/index.html","hash":"bf3539d51444e00b385b2209aef8ab54fc61d5ba","modified":1469581263270},{"_id":"public/2016/07/20/2016-07-20-ASF-xalan/index.html","hash":"c7b397f9ca3d24db31c3842705f974205981e2a7","modified":1469581263270},{"_id":"public/2016/07/16/2016-06-30-Visual-Stdio-Code/index.html","hash":"6c40319c6796c7994de5b7e9ed8baf6c35066e03","modified":1469581263270},{"_id":"public/2016/07/16/2016-07-04-digital-signature-and-digital certificate/index.html","hash":"e82c5bd0805adaa5234d707782ae38a3b44e8d95","modified":1469581263270},{"_id":"public/2016/07/15/hello-world/index.html","hash":"e007a4aaebe357dbeae300f9e22d332ad147c8e0","modified":1469581263270},{"_id":"public/2016/07/15/2016-07-12-vmvare-vsphere-share-plate/index.html","hash":"8df84be7d3e1e9c73981b2fbd357a828fcd86dd3","modified":1469581263271},{"_id":"public/2016/07/15/2016-07-12-samba/index.html","hash":"ff9aab43b6adbb7bd11f1ed229c71110ff8425c8","modified":1469581263271},{"_id":"public/2016/07/15/2016-07-06-ssl-vpn-detailed-explanation/index.html","hash":"ceda0c3ef6b29feebb07a5552bf9efd2563d3581","modified":1469581263271},{"_id":"public/2016/07/15/2016-06-30-cmd-markdown/index.html","hash":"c1970677cdf39130cd492a924b31c4c0bbe2af36","modified":1469581263271},{"_id":"public/2016/07/12/2016-07-12-git-p4merge/index.html","hash":"5778398a491a81eb9d5585d0ac67a645157b93bf","modified":1469581263271},{"_id":"public/archives/index.html","hash":"ff3669b397f2eef038a6c44c44bd33e6d4ddd6a6","modified":1469581263271},{"_id":"public/archives/page/2/index.html","hash":"7d8120f090f179db040967cbda751b92d8995f01","modified":1469581263272},{"_id":"public/archives/2016/index.html","hash":"024f90c41a15a56ec81f26e22f57063bcc8437e1","modified":1469581263272},{"_id":"public/archives/2016/page/2/index.html","hash":"b0ebe57c72bded17369969b9f8a1afeb911bd6b6","modified":1469581263272},{"_id":"public/archives/2016/07/index.html","hash":"abe644dfa95961b5b0e55b65352819d894c034b1","modified":1469581263272},{"_id":"public/archives/2016/07/page/2/index.html","hash":"1503ddc1c741f1c89a18ae64da572cbb0f2abe7c","modified":1469581263273},{"_id":"public/categories/tools/index.html","hash":"ddd03984df58c73ae47ae34c58ae7d8247cc331d","modified":1469581263280},{"_id":"public/categories/network/index.html","hash":"0412b767be6c1d40f0aec37cac5e5d3263202951","modified":1469581263280},{"_id":"public/categories/other/index.html","hash":"54fa5452529635e83602a5ee9612c71631b1f1ec","modified":1469581263280},{"_id":"public/categories/xslt/index.html","hash":"b2b1aa215417c6aee94cf9e1dff47afc690110cd","modified":1469581263280},{"_id":"public/categories/java/index.html","hash":"70c7c0e986ed13edd8a04f12a588ce5c437ebbde","modified":1469581263280},{"_id":"public/index.html","hash":"61540fc404268a03506911b6cc531c84f6b962ed","modified":1469581263280},{"_id":"public/page/2/index.html","hash":"724769ad758c3a6291666ef98cfe2cd4b888f6ba","modified":1469581263281},{"_id":"public/tags/samba/index.html","hash":"f4a0bbf6da65d65256448d742469e46df6dadff8","modified":1469581263281},{"_id":"public/tags/xml/index.html","hash":"bd8d8319d97844cbb181f98fd023132d910e782a","modified":1469581263281},{"_id":"public/tags/xsl/index.html","hash":"3dfcbf8a7f92a3531bb90a55d20272f79d2c6749","modified":1469581263281},{"_id":"public/tags/xslt/index.html","hash":"afdfd149d35977962d72344878d27c320fb09de4","modified":1469581263282},{"_id":"public/tags/xpath/index.html","hash":"3f3bfc356b1cfaab39b42942f473a811d6ed6736","modified":1469581263282},{"_id":"public/uploads/wechatpublic.jpg","hash":"3e373f3175f1555ef315debfc6dc7bd9ba25353f","modified":1469581263351},{"_id":"public/images/Wechatpay.jpg","hash":"58a2e7515b6299f1fc8944816b9e5569c1c44e80","modified":1469581263351},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1469581263353},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469581263353},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469581263353},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469581263353},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469581263354},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469581263354},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469581263354},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469581263354},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469581263354},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469581263354},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1469581263354},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1469581263354},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469581263356},{"_id":"public/images/timg.jpg","hash":"6f960558d7160ed64b33c8e7940ab5710e2a5933","modified":1469581263356},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1469581263357},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1469581263357},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469581263357},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469581263357},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469581263357},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469581263357},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469581263357},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469581263357},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1469581263357},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1469581263357},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469581263358},{"_id":"public/images/Alipay.jpg","hash":"909c7791bd36f8c27bf2d96f007a75a5ddb88a6b","modified":1469581264724},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1469581264729},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1469581264737},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1469581264737},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1469581264762},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1469581264762},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1469581264765},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1469581264765},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1469581264765},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1469581264766},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1469581264766},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1469581264766},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1469581264766},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1469581264775},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1469581264775},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1469581264775},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1469581264775},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1469581264775},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1469581264776},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1469581264776},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1469581264776},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1469581264776},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1469581264776},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1469581264778},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1469581264778},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1469581264778},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469581264779},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1469581264779},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1469581264779},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469581264779},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1469581264779},{"_id":"public/css/main.css","hash":"cef1fa81b5ecd1b59873174f5bfa7fc3d172f9d9","modified":1469581264779},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1469581264779},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1469581264779},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1469581264779},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1469581264783},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1469581264783},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1469581264783},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1469581264783},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1469581264785},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1469581264785},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1469581264786},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1469581264849}],"Category":[{"name":"tools","_id":"cir46qlcd0005pq8aqqoq3wmp"},{"name":"markdown","_id":"cir46qld2000apq8ageharh04"},{"name":"network","_id":"cir46qldb000fpq8adqp84r7e"},{"name":"git","_id":"cir46qle2000spq8a814pd2ko"},{"name":"other","_id":"cir46qlef000xpq8a4muyf9e4"},{"name":"xslt","_id":"cir46qlek0015pq8alcglqcky"},{"name":"java","_id":"cir46qles001epq8a4sfavd2b"}],"Data":[],"Page":[{"title":"categories","date":"2016-07-14T12:46:54.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-07-14 20:46:54\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-07-15T12:23:26.717Z","path":"categories/index.html","layout":"page","_id":"cir46qlbv0001pq8ay3g6c66g","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-07-14T12:46:05.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-14 20:46:05\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-07-15T12:23:24.769Z","path":"tags/index.html","layout":"page","_id":"cir46qlc50003pq8alkiby212","content":"","excerpt":"","more":""}],"Post":[{"title":"VSC Keyboard Shortcuts","_content":"\nSome frequently used vsc keyboard shortcuts.\n\n<!-- more -->\n\n- shift+ctrl+A 注释代码块\n- ctrl+/       注释\n\n\n- shift+ctrl+alt+[ 整个文件函数折叠\n- shift+ctrl+alt+] 整个文件函数展开\n- shift+ctrl+[ 单个函数折叠\n- shift+ctrl+] 单个函数展开\n\n\n- ctrl+[ 缩进\n- Ctrl+] 后退\n\n\n- Ctrl+I       选中一行\n- shift+ctrl+K 删除一行\n- ctrl+Enter   在当前行后插入一行\n\n\n- Ctrl+P       搜索最近打开的文档 alt+tab可以选择\n- Ctrl+T       在当前文件里查找符号\n- shift+ctrl+O 在工作空间里查找符号\n\n\n- 按住Ctrl, 单击导航栏的文件名会显示在右侧\n \n\n- Ctrl+Down  鼠标位置不变，文件下移\n- Ctrl+Up\t   鼠标位置不变，文件上移\n\n\n- F3\t   向后查找\n- Shift+F3   向前查找\n\n\n- F1   显示所有命令\n\n\n- ctrl+click或F12 转到定义\n- ctrl+hover      显示定义或声明\n- shift+alt+F10   快速显示定义\n\n\n- ctrl+F2      高亮所有选中的单词\n- shift+ctrl+L 高亮所有选中的内容\n\n\n- shift+alt   multi select\n\n\n- 自定义：\n- ctrl+left  后退\n- ctrl+right 前进\n","source":"_posts/2016-06-30-Visual-Stdio-Code.md","raw":"---\ntitle: VSC Keyboard Shortcuts\ncategories : tools\ntags : [visual stdio code, vsc]\n---\n\nSome frequently used vsc keyboard shortcuts.\n\n<!-- more -->\n\n- shift+ctrl+A 注释代码块\n- ctrl+/       注释\n\n\n- shift+ctrl+alt+[ 整个文件函数折叠\n- shift+ctrl+alt+] 整个文件函数展开\n- shift+ctrl+[ 单个函数折叠\n- shift+ctrl+] 单个函数展开\n\n\n- ctrl+[ 缩进\n- Ctrl+] 后退\n\n\n- Ctrl+I       选中一行\n- shift+ctrl+K 删除一行\n- ctrl+Enter   在当前行后插入一行\n\n\n- Ctrl+P       搜索最近打开的文档 alt+tab可以选择\n- Ctrl+T       在当前文件里查找符号\n- shift+ctrl+O 在工作空间里查找符号\n\n\n- 按住Ctrl, 单击导航栏的文件名会显示在右侧\n \n\n- Ctrl+Down  鼠标位置不变，文件下移\n- Ctrl+Up\t   鼠标位置不变，文件上移\n\n\n- F3\t   向后查找\n- Shift+F3   向前查找\n\n\n- F1   显示所有命令\n\n\n- ctrl+click或F12 转到定义\n- ctrl+hover      显示定义或声明\n- shift+alt+F10   快速显示定义\n\n\n- ctrl+F2      高亮所有选中的单词\n- shift+ctrl+L 高亮所有选中的内容\n\n\n- shift+alt   multi select\n\n\n- 自定义：\n- ctrl+left  后退\n- ctrl+right 前进\n","slug":"2016-06-30-Visual-Stdio-Code","published":1,"date":"2016-07-16T05:42:00.536Z","updated":"2016-07-16T05:42:00.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qlbm0000pq8a7svylm1c","content":"<p>Some frequently used vsc keyboard shortcuts.</p>\n<a id=\"more\"></a>\n<ul>\n<li>shift+ctrl+A 注释代码块</li>\n<li>ctrl+/       注释</li>\n</ul>\n<ul>\n<li>shift+ctrl+alt+[ 整个文件函数折叠</li>\n<li>shift+ctrl+alt+] 整个文件函数展开</li>\n<li>shift+ctrl+[ 单个函数折叠</li>\n<li>shift+ctrl+] 单个函数展开</li>\n</ul>\n<ul>\n<li>ctrl+[ 缩进</li>\n<li>Ctrl+] 后退</li>\n</ul>\n<ul>\n<li>Ctrl+I       选中一行</li>\n<li>shift+ctrl+K 删除一行</li>\n<li>ctrl+Enter   在当前行后插入一行</li>\n</ul>\n<ul>\n<li>Ctrl+P       搜索最近打开的文档 alt+tab可以选择</li>\n<li>Ctrl+T       在当前文件里查找符号</li>\n<li>shift+ctrl+O 在工作空间里查找符号</li>\n</ul>\n<ul>\n<li>按住Ctrl, 单击导航栏的文件名会显示在右侧</li>\n</ul>\n<ul>\n<li>Ctrl+Down  鼠标位置不变，文件下移</li>\n<li>Ctrl+Up       鼠标位置不变，文件上移</li>\n</ul>\n<ul>\n<li>F3       向后查找</li>\n<li>Shift+F3   向前查找</li>\n</ul>\n<ul>\n<li>F1   显示所有命令</li>\n</ul>\n<ul>\n<li>ctrl+click或F12 转到定义</li>\n<li>ctrl+hover      显示定义或声明</li>\n<li>shift+alt+F10   快速显示定义</li>\n</ul>\n<ul>\n<li>ctrl+F2      高亮所有选中的单词</li>\n<li>shift+ctrl+L 高亮所有选中的内容</li>\n</ul>\n<ul>\n<li>shift+alt   multi select</li>\n</ul>\n<ul>\n<li>自定义：</li>\n<li>ctrl+left  后退</li>\n<li>ctrl+right 前进</li>\n</ul>\n","excerpt":"<p>Some frequently used vsc keyboard shortcuts.</p>","more":"<ul>\n<li>shift+ctrl+A 注释代码块</li>\n<li>ctrl+/       注释</li>\n</ul>\n<ul>\n<li>shift+ctrl+alt+[ 整个文件函数折叠</li>\n<li>shift+ctrl+alt+] 整个文件函数展开</li>\n<li>shift+ctrl+[ 单个函数折叠</li>\n<li>shift+ctrl+] 单个函数展开</li>\n</ul>\n<ul>\n<li>ctrl+[ 缩进</li>\n<li>Ctrl+] 后退</li>\n</ul>\n<ul>\n<li>Ctrl+I       选中一行</li>\n<li>shift+ctrl+K 删除一行</li>\n<li>ctrl+Enter   在当前行后插入一行</li>\n</ul>\n<ul>\n<li>Ctrl+P       搜索最近打开的文档 alt+tab可以选择</li>\n<li>Ctrl+T       在当前文件里查找符号</li>\n<li>shift+ctrl+O 在工作空间里查找符号</li>\n</ul>\n<ul>\n<li>按住Ctrl, 单击导航栏的文件名会显示在右侧</li>\n</ul>\n<ul>\n<li>Ctrl+Down  鼠标位置不变，文件下移</li>\n<li>Ctrl+Up       鼠标位置不变，文件上移</li>\n</ul>\n<ul>\n<li>F3       向后查找</li>\n<li>Shift+F3   向前查找</li>\n</ul>\n<ul>\n<li>F1   显示所有命令</li>\n</ul>\n<ul>\n<li>ctrl+click或F12 转到定义</li>\n<li>ctrl+hover      显示定义或声明</li>\n<li>shift+alt+F10   快速显示定义</li>\n</ul>\n<ul>\n<li>ctrl+F2      高亮所有选中的单词</li>\n<li>shift+ctrl+L 高亮所有选中的内容</li>\n</ul>\n<ul>\n<li>shift+alt   multi select</li>\n</ul>\n<ul>\n<li>自定义：</li>\n<li>ctrl+left  后退</li>\n<li>ctrl+right 前进</li>\n</ul>"},{"title":"Cmd Markdown","_content":"\nCmd Markdown是一种markdown文本编辑工具，这篇文章对该工具进行了相关的介绍。\n\n<!-- more -->\n\n# 欢迎使用 Cmd Markdown 编辑阅读器\n------\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png) \n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n```\n@requires_authorization\nclass SomeClass:\npass\n\nif __name__ == '__main__':\n# A comment\nprint 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  |:----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n\n### 7. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右测的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2015 年 06月 15日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n\n","source":"_posts/2016-06-30-cmd-markdown.md","raw":"---\ntitle: Cmd Markdown\ncategories : [markdown]\ntags : [markdown]\n---\n\nCmd Markdown是一种markdown文本编辑工具，这篇文章对该工具进行了相关的介绍。\n\n<!-- more -->\n\n# 欢迎使用 Cmd Markdown 编辑阅读器\n------\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png) \n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n```\n@requires_authorization\nclass SomeClass:\npass\n\nif __name__ == '__main__':\n# A comment\nprint 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  |:----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n\n### 7. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右测的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2015 年 06月 15日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n\n","slug":"2016-06-30-cmd-markdown","published":1,"date":"2016-07-15T12:55:13.860Z","updated":"2016-07-15T12:55:13.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qlc10002pq8a06j0vq5k","content":"<p>Cmd Markdown是一种markdown文本编辑工具，这篇文章对该工具进行了相关的介绍。</p>\n<a id=\"more\"></a>\n<h1 id=\"欢迎使用-Cmd-Markdown-编辑阅读器\"><a href=\"#欢迎使用-Cmd-Markdown-编辑阅读器\" class=\"headerlink\" title=\"欢迎使用 Cmd Markdown 编辑阅读器\"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>\n<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"> </p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"external\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\" target=\"_blank\" rel=\"external\">Todo 列表</a></h3><ul>\n<li>[ ] 支持以 PDF 格式导出文稿</li>\n<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li>[x] 新增 Todo 列表功能</li>\n<li>[x] 修复 LaTex 公式渲染问题</li>\n<li>[x] 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># A comment</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@requires_authorization</div><div class=\"line\">class SomeClass:</div><div class=\"line\">pass</div><div class=\"line\"></div><div class=\"line\">if __name__ == &apos;__main__&apos;:</div><div class=\"line\"># A comment</div><div class=\"line\">print &apos;hello world&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\" target=\"_blank\" rel=\"external\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\" target=\"_blank\" rel=\"external\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"6-绘制表格\"><a href=\"#6-绘制表格\" class=\"headerlink\" title=\"6. 绘制表格\"></a>6. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7-更详细语法说明\"><a href=\"#7-更详细语法说明\" class=\"headerlink\" title=\"7. 更详细语法说明\"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\" target=\"_blank\" rel=\"external\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\" target=\"_blank\" rel=\"external\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a href=\"http://weibo.com/ghosert\" target=\"_blank\" rel=\"external\">@ghosert</a><br>2015 年 06月 15日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"external\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>\n","excerpt":"<p>Cmd Markdown是一种markdown文本编辑工具，这篇文章对该工具进行了相关的介绍。</p>","more":"<h1 id=\"欢迎使用-Cmd-Markdown-编辑阅读器\"><a href=\"#欢迎使用-Cmd-Markdown-编辑阅读器\" class=\"headerlink\" title=\"欢迎使用 Cmd Markdown 编辑阅读器\"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>\n<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"> </p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\">Todo 列表</a></h3><ul>\n<li>[ ] 支持以 PDF 格式导出文稿</li>\n<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li>[x] 新增 Todo 列表功能</li>\n<li>[x] 修复 LaTex 公式渲染问题</li>\n<li>[x] 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># A comment</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@requires_authorization</div><div class=\"line\">class SomeClass:</div><div class=\"line\">pass</div><div class=\"line\"></div><div class=\"line\">if __name__ == &apos;__main__&apos;:</div><div class=\"line\"># A comment</div><div class=\"line\">print &apos;hello world&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"6-绘制表格\"><a href=\"#6-绘制表格\" class=\"headerlink\" title=\"6. 绘制表格\"></a>6. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7-更详细语法说明\"><a href=\"#7-更详细语法说明\" class=\"headerlink\" title=\"7. 更详细语法说明\"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a href=\"http://weibo.com/ghosert\">@ghosert</a><br>2015 年 06月 15日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>"},{"title":"数字签名是什么？","_content":"\n今天，我读到一篇好文章。\n它用图片通俗易懂地解释了，\"数字签名\"（digital signature）和\"数字证书\"（digital certificate）到底是什么。我对这些问题的理解，一直是模模糊糊的，很多细节搞不清楚。读完这篇文章后，发现思路一下子就理清了。\n\n<!-- more -->\n\n---\n\n原文网址：[http://www.youdzone.com/signature.html](http://www.youdzone.com/signature.html) \n转载网址：[http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html](http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html) \n\n 1.鲍勃有两把钥匙，一把是公钥，另一把是私钥。\n\n![](http://image.beekka.com/blog/201108/bg2011080901.png)\n\n 2.鲍勃把公钥送给他的朋友们----帕蒂、道格、苏珊----每人一把。\n\n![](http://image.beekka.com/blog/201108/bg2011080902.png)\n\n 3.苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。\n\n![](http://image.beekka.com/blog/201108/bg2011080903.png)\n\n 4.鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。\n\n![](http://image.beekka.com/blog/201108/bg2011080904.png)\n\n 5.鲍勃给苏珊回信，决定采用\"数字签名\"。他写完后先用Hash函数，生成信件的摘要（digest）。\n\n![](http://image.beekka.com/blog/201108/bg2011080905.png)\n\n 6.然后，鲍勃使用私钥，对这个摘要加密，生成\"数字签名\"（signature）。\n\n![](http://image.beekka.com/blog/201108/bg2011080906.png)\n\n 7.鲍勃将这个签名，附在信件下面，一起发给苏珊。\n\n![](http://image.beekka.com/blog/201108/bg2011080907.png)\n\n 8.苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。\n\n![](http://image.beekka.com/blog/201108/bg2011080908.png)\n\n 9.苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。\n\n![](http://image.beekka.com/blog/201108/bg2011080909.png)\n\n 10.复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成\"数字签名\"，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。\n\n![](http://image.beekka.com/blog/201108/bg2011080910.png)\n\n 11.后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找\"证书中心\"（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成\"数字证书\"（Digital Certificate）。\n\n![](http://image.beekka.com/blog/201108/bg2011080911.png)\n\n 12.鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。\n\n![](http://image.beekka.com/blog/201108/bg2011080912.png)\n\n 13.苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明\"数字签名\"是否真的是鲍勃签的。\n\n![](http://image.beekka.com/blog/201108/bg2011080913.png)\n\n 14.下面，我们看一个应用\"数字证书\"的实例：https协议。这个协议主要用于网页加密。\n\n![](http://image.beekka.com/blog/201108/bg2011080914.jpg)\n\n 15.首先，客户端向服务器发出加密请求。\n\n![](http://image.beekka.com/blog/201108/bg2011080915.png)\n\n 16.服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。\n\n![](http://image.beekka.com/blog/201108/bg2011080916.png)\n\n 17.客户端（浏览器）的\"证书管理器\"，有\"受信任的根证书颁发机构\"列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。\n\n![](http://image.beekka.com/blog/201108/bg2011080917.png)\n\n 18.如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。\n\n![](http://image.beekka.com/blog/201108/bg2011080918.png)\n\n 19.如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。\n\n![](http://image.beekka.com/blog/201108/bg2011080919.jpg)\n\n 20.如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。\n\n![](http://image.beekka.com/blog/201108/bg2011080920.png)\n\n（完）","source":"_posts/2016-07-04-digital-signature-and-digital certificate.md","raw":"---\ntitle: 数字签名是什么？\ncategories : [network]\ntags : [digital signature, digital certificate]\n---\n\n今天，我读到一篇好文章。\n它用图片通俗易懂地解释了，\"数字签名\"（digital signature）和\"数字证书\"（digital certificate）到底是什么。我对这些问题的理解，一直是模模糊糊的，很多细节搞不清楚。读完这篇文章后，发现思路一下子就理清了。\n\n<!-- more -->\n\n---\n\n原文网址：[http://www.youdzone.com/signature.html](http://www.youdzone.com/signature.html) \n转载网址：[http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html](http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html) \n\n 1.鲍勃有两把钥匙，一把是公钥，另一把是私钥。\n\n![](http://image.beekka.com/blog/201108/bg2011080901.png)\n\n 2.鲍勃把公钥送给他的朋友们----帕蒂、道格、苏珊----每人一把。\n\n![](http://image.beekka.com/blog/201108/bg2011080902.png)\n\n 3.苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。\n\n![](http://image.beekka.com/blog/201108/bg2011080903.png)\n\n 4.鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。\n\n![](http://image.beekka.com/blog/201108/bg2011080904.png)\n\n 5.鲍勃给苏珊回信，决定采用\"数字签名\"。他写完后先用Hash函数，生成信件的摘要（digest）。\n\n![](http://image.beekka.com/blog/201108/bg2011080905.png)\n\n 6.然后，鲍勃使用私钥，对这个摘要加密，生成\"数字签名\"（signature）。\n\n![](http://image.beekka.com/blog/201108/bg2011080906.png)\n\n 7.鲍勃将这个签名，附在信件下面，一起发给苏珊。\n\n![](http://image.beekka.com/blog/201108/bg2011080907.png)\n\n 8.苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。\n\n![](http://image.beekka.com/blog/201108/bg2011080908.png)\n\n 9.苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。\n\n![](http://image.beekka.com/blog/201108/bg2011080909.png)\n\n 10.复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成\"数字签名\"，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。\n\n![](http://image.beekka.com/blog/201108/bg2011080910.png)\n\n 11.后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找\"证书中心\"（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成\"数字证书\"（Digital Certificate）。\n\n![](http://image.beekka.com/blog/201108/bg2011080911.png)\n\n 12.鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。\n\n![](http://image.beekka.com/blog/201108/bg2011080912.png)\n\n 13.苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明\"数字签名\"是否真的是鲍勃签的。\n\n![](http://image.beekka.com/blog/201108/bg2011080913.png)\n\n 14.下面，我们看一个应用\"数字证书\"的实例：https协议。这个协议主要用于网页加密。\n\n![](http://image.beekka.com/blog/201108/bg2011080914.jpg)\n\n 15.首先，客户端向服务器发出加密请求。\n\n![](http://image.beekka.com/blog/201108/bg2011080915.png)\n\n 16.服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。\n\n![](http://image.beekka.com/blog/201108/bg2011080916.png)\n\n 17.客户端（浏览器）的\"证书管理器\"，有\"受信任的根证书颁发机构\"列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。\n\n![](http://image.beekka.com/blog/201108/bg2011080917.png)\n\n 18.如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。\n\n![](http://image.beekka.com/blog/201108/bg2011080918.png)\n\n 19.如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。\n\n![](http://image.beekka.com/blog/201108/bg2011080919.jpg)\n\n 20.如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。\n\n![](http://image.beekka.com/blog/201108/bg2011080920.png)\n\n（完）","slug":"2016-07-04-digital-signature-and-digital certificate","published":1,"date":"2016-07-16T05:42:00.536Z","updated":"2016-07-16T05:42:00.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qlce0006pq8ajxzyny65","content":"<p>今天，我读到一篇好文章。<br>它用图片通俗易懂地解释了，”数字签名”（digital signature）和”数字证书”（digital certificate）到底是什么。我对这些问题的理解，一直是模模糊糊的，很多细节搞不清楚。读完这篇文章后，发现思路一下子就理清了。</p>\n<a id=\"more\"></a>\n<hr>\n<p>原文网址：<a href=\"http://www.youdzone.com/signature.html\" target=\"_blank\" rel=\"external\">http://www.youdzone.com/signature.html</a><br>转载网址：<a href=\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a> </p>\n<p> 1.鲍勃有两把钥匙，一把是公钥，另一把是私钥。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080901.png\" alt=\"\"></p>\n<p> 2.鲍勃把公钥送给他的朋友们—-帕蒂、道格、苏珊—-每人一把。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080902.png\" alt=\"\"></p>\n<p> 3.苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080903.png\" alt=\"\"></p>\n<p> 4.鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080904.png\" alt=\"\"></p>\n<p> 5.鲍勃给苏珊回信，决定采用”数字签名”。他写完后先用Hash函数，生成信件的摘要（digest）。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080905.png\" alt=\"\"></p>\n<p> 6.然后，鲍勃使用私钥，对这个摘要加密，生成”数字签名”（signature）。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080906.png\" alt=\"\"></p>\n<p> 7.鲍勃将这个签名，附在信件下面，一起发给苏珊。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080907.png\" alt=\"\"></p>\n<p> 8.苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080908.png\" alt=\"\"></p>\n<p> 9.苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080909.png\" alt=\"\"></p>\n<p> 10.复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080910.png\" alt=\"\"></p>\n<p> 11.后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080911.png\" alt=\"\"></p>\n<p> 12.鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080912.png\" alt=\"\"></p>\n<p> 13.苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080913.png\" alt=\"\"></p>\n<p> 14.下面，我们看一个应用”数字证书”的实例：https协议。这个协议主要用于网页加密。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080914.jpg\" alt=\"\"></p>\n<p> 15.首先，客户端向服务器发出加密请求。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080915.png\" alt=\"\"></p>\n<p> 16.服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080916.png\" alt=\"\"></p>\n<p> 17.客户端（浏览器）的”证书管理器”，有”受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080917.png\" alt=\"\"></p>\n<p> 18.如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080918.png\" alt=\"\"></p>\n<p> 19.如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080919.jpg\" alt=\"\"></p>\n<p> 20.如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080920.png\" alt=\"\"></p>\n<p>（完）</p>\n","excerpt":"<p>今天，我读到一篇好文章。<br>它用图片通俗易懂地解释了，”数字签名”（digital signature）和”数字证书”（digital certificate）到底是什么。我对这些问题的理解，一直是模模糊糊的，很多细节搞不清楚。读完这篇文章后，发现思路一下子就理清了。</p>","more":"<hr>\n<p>原文网址：<a href=\"http://www.youdzone.com/signature.html\">http://www.youdzone.com/signature.html</a><br>转载网址：<a href=\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a> </p>\n<p> 1.鲍勃有两把钥匙，一把是公钥，另一把是私钥。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080901.png\" alt=\"\"></p>\n<p> 2.鲍勃把公钥送给他的朋友们—-帕蒂、道格、苏珊—-每人一把。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080902.png\" alt=\"\"></p>\n<p> 3.苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080903.png\" alt=\"\"></p>\n<p> 4.鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080904.png\" alt=\"\"></p>\n<p> 5.鲍勃给苏珊回信，决定采用”数字签名”。他写完后先用Hash函数，生成信件的摘要（digest）。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080905.png\" alt=\"\"></p>\n<p> 6.然后，鲍勃使用私钥，对这个摘要加密，生成”数字签名”（signature）。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080906.png\" alt=\"\"></p>\n<p> 7.鲍勃将这个签名，附在信件下面，一起发给苏珊。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080907.png\" alt=\"\"></p>\n<p> 8.苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080908.png\" alt=\"\"></p>\n<p> 9.苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080909.png\" alt=\"\"></p>\n<p> 10.复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080910.png\" alt=\"\"></p>\n<p> 11.后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080911.png\" alt=\"\"></p>\n<p> 12.鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080912.png\" alt=\"\"></p>\n<p> 13.苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080913.png\" alt=\"\"></p>\n<p> 14.下面，我们看一个应用”数字证书”的实例：https协议。这个协议主要用于网页加密。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080914.jpg\" alt=\"\"></p>\n<p> 15.首先，客户端向服务器发出加密请求。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080915.png\" alt=\"\"></p>\n<p> 16.服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080916.png\" alt=\"\"></p>\n<p> 17.客户端（浏览器）的”证书管理器”，有”受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080917.png\" alt=\"\"></p>\n<p> 18.如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080918.png\" alt=\"\"></p>\n<p> 19.如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080919.jpg\" alt=\"\"></p>\n<p> 20.如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。</p>\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080920.png\" alt=\"\"></p>\n<p>（完）</p>"},{"title":"技术点详解---SSL VPN","_content":"\nSSL VPN是专栏VPN系列技术原理的最后一篇，SSL VPN作为远程接入型的VPN，已经具备非常广阔的前景，它的主要适应场景是取代L2TP Over IPSec，但功能要比L2TP Over IPSec更丰富，方案也更加灵活。\n\n<!-- more -->\n\n## 一、SSL VPN简介\n\n何谓SSL VPN，首先要从SSL谈起，使用网络不能不提的是各个网站，浏览网站使用浏览器，网络上传送网页的协议叫HTTP，它是明文传播的，传播内容可以被黑客读取。而SSL全名叫Secure Session Layer（安全会话层），其最初目的是给HTTP加密使用的安全套件，使用SSL的HTTP，也就摇身一变成了HTTPS，端口也从HTTP的80变成了443。由于HTTPS具备安全性，也具备传输数据的能力，也就被研究VPN技术的专家盯上了，觉得HTTPS可以用于组建VPN方案，于是乎SSL VPN技术就呼之欲出了。经过多年的发展，SSL版本发展到了3.0，也被标准组织采纳为TLS（Transport Layer Security传输层安全） 1.0之中，所以SSL VPN也叫TLS VPN。下面是SSL 与SSL VPN、TLS的区别：\n\n1. SSL：单纯的实现对某些TCP应用的保护，如HTTPS和SFTP；\n\n2. SSL VPN：利用TCP的传输作用以及SSL对TCP会话的保护，实现VPN业务，被保护的VPN业务可以是TCP的、也可以UDP，纯IP的应用；\n\n3. TLS：在SSL上进行扩展，能够直接实现对UDP应用的保护，这也是传输层安全的最佳注释。\n\n接下来看看SSL VPN的使用场景吧：\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032947_image001_686807_30005_0.jpg)\n\nL2TP实现的是远程接入VPN，而IPSec为L2TP提供安全保护，这种应用已经非常成熟，但属于两个协议的生硬组合，在方案上不是特别灵活。而SSL VPN是天然的安全远程接入，在方案上，特别是权限控制、应用粒度上有独到之处，成为目前远程接入领域的香饽饽，目前已经超越了技术范畴，而成为一个安全网络服务框架。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032948_image002_686807_30005_0.jpg)\n\nSSL VPN最常见的入口还是网页，所以推广起来特别方便：\n\n1. 使用者只需要记住VPN的网站（通常是HTTPS），用浏览器打开该网站；\n\n2. 输入使用者的身份信息，身份信息可以是用户名、数字证书（如USB-Key）、静态口令、动态口令的至尊组合，确保身份不泄露、不假冒；\n\n3. 选择服务种类，其中WEB代理是最为简单的应用，也是控制粒度最细的SSL VPN应用，可以精确地控制每个链接；\n\n4. 端口映射是粒度仅次于WEB代理的应用，它通过TCP端口映射的方式（原理上类似于NAT内部服务器应用），为使用者提供远程接入TCP的服务，它需要专门的、与服务器配套的SSL VPN客户端程序帮忙；\n\n5. IP连接是SSL VPN中粒度最粗的服务，但也是使用最广泛的，它实现了类似于L2TP的特性，所有客户端都可以从服务器获得一个VPN地址，然后直接访问内部服务器，它也需要专门的SSL VPN客户端程序帮忙；\n\n6. SSL VPN由于处在TCP层，所以可以进行丰富的业务控制，如行为审计，可以记录每名用户的所有操作，为更好地管理VPN提供了有效统计数据；\n\n7. 当使用者退出SSL VPN登陆页面时，所有上述安全会话会统统释放。\n\n以上7个步骤可以划分为三个阶段：阶段一是连接与验证、阶段二是VPN应用、阶段三是审计与退出。由于连接与验证、审计与退出都是统一流程，也比较简单，本期针对大家较为关注的阶段二，VPN应用部分进行展开介绍。\n\n## 二、WEB代理\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032949_image003_686807_30005_0.jpg)\n\n由于SSL是封装在TCP上的，穿越NAT不是问题，所以在示例中客户端使用公网地址进行介绍：\n\n1. 假设SSL VPN的WEB站点的互联网域名是https://sslvpn，该WEB站点对应的主机则是SSL VPN服务器；\n\n2. 使用者登陆SSL VPN的WEB页面后，WEB代理一栏会有许多链接，如内部财务报表、订单提交等内部网站；\n\n3. 假设“订单提交”网站在单位内部私有URL是http://site1/page，那么在SSL VPN服务器上的订单提交链接URL则会进行相应的修改，变成https://sslvpn/httpsite1/pate，相当于SSL VPN站点的内部链接；\n\n4. 使用者点击“订单提交”链接后，会新建一个浏览器窗口，打开链接https://sslvpn/httpsite1/page，也就是说对于使用者而言，订单提交像是SSL VPN站点的一个链接，而非另外一个站点，所有的访问都终结在SSL VPN站点；\n\n5. SSL VPN站点的所有者SSL VPN服务器在接收到使用者对https://sslvpn/httpsite1/page的页面请求后，SSL VPN服务器会做WEB代理的工作，即以内部地址10.1.1.1向真正的“订单提交”站点10.6.16.3访问页面http://site1/page；\n\n6. 可以发现整个页面访问是由使用者与服务器之间的HTTPS会话、服务器与“订单提交”站点的HTTP会话连接而成的，服务器在这个访问中起的是WEB代理作用，因为在“订单提交”站点看来，访问者IP是服务器，而不是最终用户IP；\n\n7. 而使用者访问另外一个站点“财务报表”，也是类似过程。\n\nWEB代理因为原理简单，实现起来较为容易，因为传统的WEB Proxy代理是两段HTTP会话的衔接，而SSL VPN的WEB代理则把用户与服务器的连接把HTTP换成了HTTPS、并对网站的URL进行了替换而已，从图中我们可以看到红色部分即为URL的替换。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032950_image004_686807_30005_0.jpg)\n\n从这张封装原理图，我们可以比较清楚地看到HTTPS与HTTP会话在这个访问过程中的衔接。可能有人会问，让“订单提交”站点直接在互联网提供HTTPS服务，直接用一个HTTPS会话不是更好，原理上当然更好，但是有更多的现实问题：\n\n1. 直接在互联网提供HTTPS服务，需要一个互联网地址和公共域名，这两样都是要花钱申请的，使用SSL VPN统一接入，这么多内部站点只需要一个公网地址、一个公网域名，多划算；\n\n2. 订单提交真的需要开放到互联网吗？订单提交都是公司内部业务，访问量也不大，直接开放到互联网并不能有更多的提速效果；\n\n3. 开放到互联网怎么保证安全，财务报表等信息都是公司机密，老老实实放在内网，前面通过SSL VPN服务器挡着，即使有攻击也只是攻击SSL VPN服务器，内网服务器还是很安全的。\n\n综上所述对于一些内部站点，使用SSL VPN还是相当有好处的，特别是在拥有一款强大的SSL VPN服务器的时候。\n\n## 三、端口映射\n\n刚才讲的是WEB代理，对于一些内部服务器并不是WEB站点，那WEB代理还能使用吗？不能使用了，比如内部站点是FTP应用，那么访问不可能由HTTPS会话和FTP会话衔接而成，SSL VPN必须想其余办法。由于SSL只能封装在TCP之上，所以端口映射服务器只能针对内部的TCP应用，如FTP。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032951_image005_686807_30005_0.jpg)\n\n在端口映射中，SSL VPN的使用者会从SSL VPN页面自动加载一个客户端程序，我们姑且就叫它SSL VPN客户端程序吧，它是怎么使端口映射工作的呢，我们假设内部有两个FTP服务器，一个叫FTP1，内部地址10.6.16.1，另一个是FTP2，内部地址10.6.16.4，都是监听TCP 21端口：\n\n1. SSL VPN服务器为这两个内部服务器做了端口映射，TCP 2021端口映射到FTP1的TCP 21，3021则映射到FTP2；\n\n2. SSL VPN服务器会让使用者PC自动加载SSL VPN客户端程序，并根据这两个映射生成两个静态host映射表项，告诉使用者PC访问FTP1其实就是访问127.0.0.2，访问FTP2就是访问127.0.0.3，127.0.0.0/8称为环回地址，及该地址只能在PC内部使用，不可能被发出到PC之外，那么SSL VPN客户端程序就监听这两个内部地址；\n\n3. 使用者访问FTP1，其实访问的是TCP 127.0.0.2:21，所有数据都会被SSL VPN客户端程序监听，客户端程序会进行代理，变成访问服务器TCP 6.16.5.6:2021，该TCP访问会使用SSL进行加密；\n\n4. 大家可能会问，为何需要个客户端程序进行代理呢，使用者的应用程序不能直接和SSL VPN服务器建立SSL会话吗？这个问题很好，使用者的应用程序的确无法直接建立SSL会话，所以使用客户端程序代劳，这种方式可以让所有TCP应用都能够享用SSL VPN服务；\n\n5. 服务器接收到SSL加密的请求后，首先会进行解密，然后根据端口映射，会向内部FTP1站点TCP 10.6.16.1:21发起访问；\n\n6. 反向转发以及访问FTP2类似。\n\n我们可以发现这种端口映射使整个访问过程由三段会话组成：使用者应用程序与SSL VPN客户端程序的普通TCP会话、SSL VPN客户端程序与服务器的SSL会话、服务器与内部站点的普通TCP会话。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032952_image006_686807_30005_0.jpg)\n\n从这张图可以看出更详细的数据封装过程以及会话衔接过程，使用SSL VPN服务器进行端口映射的好处与WEB代理类似，可以牺牲SSL VPN服务器，保护内部服务器。\n\n## 四、IP连接\n\n前面介绍的WEB代理是专门针对WEB应用的，端口映射则受制于SSL只支持TCP应用，如果使用者要任意访问一个内部服务器的任意协议、端口，该如何是好呢？IP连接应运而生，IP连接可以完美地替代L2TP这种传统意义上的VPN：虚拟连接、内部地址、路由互联。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032953_image007_686807_30005_0.jpg)\n\n我们从上图来解释一下IP连接的原理：\n\n1. 用户登陆SSL VPN页面后，会建立HTTPS会话，服务器通过这个会话给用户自动加载SSL VPN客户端程序；\n\n2. 此时的SSL VPN客户端程序的目的是给用户PC创建一个虚拟网卡，以实现类似于L2TP那种到客户总部网络的VPN连接；\n\n3. 虚拟网卡创建好后，服务器会给该用户从地址池中取一个地址分配给该用户，同时下发路由、DNS等信息，服务器针对该地址池也会有一个服务器地址192.168.1.1，作为所有客户端程序虚拟网卡的网关；\n\n4. 此时SSL VPN客户端程序与服务器之间会建立一个全新的SSL会话，专门用来传输虚拟网卡与服务器之间的流量；\n\n5. 假设用户要访问DNS 10.6.16.1，根据路由的关系，PC会通过虚拟网卡将DNS请求（源192.168.1.2目的10.6.16.1）转发给SSL VPN服务器192.168.1.1；\n\n6. PC上的SSL VPN客户端程序会将虚拟网卡发出的IP包封装至新的SSL会话中，通过互联网传送到服务器；\n\n7. 服务器进行解密，解封装后发现IP目的地址是10.6.16.1，那么就转发给DNS；\n\n8. 反向过程以及访问ERP服务器10.6.16.4与此类似。\n\n再来看一下数据封装过程，会有更加直观的认识：\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032954_image008_686807_30005_0.jpg)\n\n在SSL VPN的IP连接中，客户端访问内部服务器不再像WEB代理、端口映射那应该多个会话衔接而成，而是一个内部地址端到端会话，穿越互联网的时候直接会话被封装至SSL会话中，和L2TP Over IPSec非常类似。\n\n## 五、SSL VPN总结\n\n为什么说SSL VPN可以通过多粒度的服务呢？这是一个对比：\n\n1. WEB代理，可以精确到对HTTP站点某些URL的控制；\n\n2. 端口映射，可以精确到对某个端口的控制；\n\n3. IP连接，可以精确到对某个IP地址的控制；\n\nL2TP只能实现3，无法实现1和2，更是很难实现行为审计功能。因此业界非常看好SSL VPN的前景，但使用SSL VPN必然也有一些局限性和代价：\n\n1. 对于站点到站点的应用，效率上不如IPSec，所以通常用来取代L2TP方案，而不是IPSec方案；\n\n2. SSL VPN的IP连接服务，在有连接的TCP中封装无连接的IP、UDP上效率不是很高，如果TCP中再封装TCP，在网络状况不稳定情况下，传输效率可能会急剧下降，但这个难题在被逐步功课之中，将来的TLS VPN可以实现在安全UDP会话，那情况就会好转很多；\n\n3. SSL VPN客户端必须配合SSL VPN服务器，各个厂家的客户端都是自行开发的，无法互相兼容，由于客户端都是动态加载的，也就是说访问什么服务器，必然加载与之配套的客户端，不存在兼容性问题，但客户端是操作系统相关，甚至是浏览器相关的，很多厂家的SSL VPN只开发了基于Windows IE的客户端，使用Linux、BSD操作系统的使用者无疑就杯具了，这里呼吁各大厂家要多多照顾一下其余操作系统用户。","source":"_posts/2016-07-06-ssl-vpn-detailed-explanation.md","raw":"---\ntitle: 技术点详解---SSL VPN\ncategories : [network]\ntags : [SSL, VPN]\n---\n\nSSL VPN是专栏VPN系列技术原理的最后一篇，SSL VPN作为远程接入型的VPN，已经具备非常广阔的前景，它的主要适应场景是取代L2TP Over IPSec，但功能要比L2TP Over IPSec更丰富，方案也更加灵活。\n\n<!-- more -->\n\n## 一、SSL VPN简介\n\n何谓SSL VPN，首先要从SSL谈起，使用网络不能不提的是各个网站，浏览网站使用浏览器，网络上传送网页的协议叫HTTP，它是明文传播的，传播内容可以被黑客读取。而SSL全名叫Secure Session Layer（安全会话层），其最初目的是给HTTP加密使用的安全套件，使用SSL的HTTP，也就摇身一变成了HTTPS，端口也从HTTP的80变成了443。由于HTTPS具备安全性，也具备传输数据的能力，也就被研究VPN技术的专家盯上了，觉得HTTPS可以用于组建VPN方案，于是乎SSL VPN技术就呼之欲出了。经过多年的发展，SSL版本发展到了3.0，也被标准组织采纳为TLS（Transport Layer Security传输层安全） 1.0之中，所以SSL VPN也叫TLS VPN。下面是SSL 与SSL VPN、TLS的区别：\n\n1. SSL：单纯的实现对某些TCP应用的保护，如HTTPS和SFTP；\n\n2. SSL VPN：利用TCP的传输作用以及SSL对TCP会话的保护，实现VPN业务，被保护的VPN业务可以是TCP的、也可以UDP，纯IP的应用；\n\n3. TLS：在SSL上进行扩展，能够直接实现对UDP应用的保护，这也是传输层安全的最佳注释。\n\n接下来看看SSL VPN的使用场景吧：\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032947_image001_686807_30005_0.jpg)\n\nL2TP实现的是远程接入VPN，而IPSec为L2TP提供安全保护，这种应用已经非常成熟，但属于两个协议的生硬组合，在方案上不是特别灵活。而SSL VPN是天然的安全远程接入，在方案上，特别是权限控制、应用粒度上有独到之处，成为目前远程接入领域的香饽饽，目前已经超越了技术范畴，而成为一个安全网络服务框架。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032948_image002_686807_30005_0.jpg)\n\nSSL VPN最常见的入口还是网页，所以推广起来特别方便：\n\n1. 使用者只需要记住VPN的网站（通常是HTTPS），用浏览器打开该网站；\n\n2. 输入使用者的身份信息，身份信息可以是用户名、数字证书（如USB-Key）、静态口令、动态口令的至尊组合，确保身份不泄露、不假冒；\n\n3. 选择服务种类，其中WEB代理是最为简单的应用，也是控制粒度最细的SSL VPN应用，可以精确地控制每个链接；\n\n4. 端口映射是粒度仅次于WEB代理的应用，它通过TCP端口映射的方式（原理上类似于NAT内部服务器应用），为使用者提供远程接入TCP的服务，它需要专门的、与服务器配套的SSL VPN客户端程序帮忙；\n\n5. IP连接是SSL VPN中粒度最粗的服务，但也是使用最广泛的，它实现了类似于L2TP的特性，所有客户端都可以从服务器获得一个VPN地址，然后直接访问内部服务器，它也需要专门的SSL VPN客户端程序帮忙；\n\n6. SSL VPN由于处在TCP层，所以可以进行丰富的业务控制，如行为审计，可以记录每名用户的所有操作，为更好地管理VPN提供了有效统计数据；\n\n7. 当使用者退出SSL VPN登陆页面时，所有上述安全会话会统统释放。\n\n以上7个步骤可以划分为三个阶段：阶段一是连接与验证、阶段二是VPN应用、阶段三是审计与退出。由于连接与验证、审计与退出都是统一流程，也比较简单，本期针对大家较为关注的阶段二，VPN应用部分进行展开介绍。\n\n## 二、WEB代理\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032949_image003_686807_30005_0.jpg)\n\n由于SSL是封装在TCP上的，穿越NAT不是问题，所以在示例中客户端使用公网地址进行介绍：\n\n1. 假设SSL VPN的WEB站点的互联网域名是https://sslvpn，该WEB站点对应的主机则是SSL VPN服务器；\n\n2. 使用者登陆SSL VPN的WEB页面后，WEB代理一栏会有许多链接，如内部财务报表、订单提交等内部网站；\n\n3. 假设“订单提交”网站在单位内部私有URL是http://site1/page，那么在SSL VPN服务器上的订单提交链接URL则会进行相应的修改，变成https://sslvpn/httpsite1/pate，相当于SSL VPN站点的内部链接；\n\n4. 使用者点击“订单提交”链接后，会新建一个浏览器窗口，打开链接https://sslvpn/httpsite1/page，也就是说对于使用者而言，订单提交像是SSL VPN站点的一个链接，而非另外一个站点，所有的访问都终结在SSL VPN站点；\n\n5. SSL VPN站点的所有者SSL VPN服务器在接收到使用者对https://sslvpn/httpsite1/page的页面请求后，SSL VPN服务器会做WEB代理的工作，即以内部地址10.1.1.1向真正的“订单提交”站点10.6.16.3访问页面http://site1/page；\n\n6. 可以发现整个页面访问是由使用者与服务器之间的HTTPS会话、服务器与“订单提交”站点的HTTP会话连接而成的，服务器在这个访问中起的是WEB代理作用，因为在“订单提交”站点看来，访问者IP是服务器，而不是最终用户IP；\n\n7. 而使用者访问另外一个站点“财务报表”，也是类似过程。\n\nWEB代理因为原理简单，实现起来较为容易，因为传统的WEB Proxy代理是两段HTTP会话的衔接，而SSL VPN的WEB代理则把用户与服务器的连接把HTTP换成了HTTPS、并对网站的URL进行了替换而已，从图中我们可以看到红色部分即为URL的替换。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032950_image004_686807_30005_0.jpg)\n\n从这张封装原理图，我们可以比较清楚地看到HTTPS与HTTP会话在这个访问过程中的衔接。可能有人会问，让“订单提交”站点直接在互联网提供HTTPS服务，直接用一个HTTPS会话不是更好，原理上当然更好，但是有更多的现实问题：\n\n1. 直接在互联网提供HTTPS服务，需要一个互联网地址和公共域名，这两样都是要花钱申请的，使用SSL VPN统一接入，这么多内部站点只需要一个公网地址、一个公网域名，多划算；\n\n2. 订单提交真的需要开放到互联网吗？订单提交都是公司内部业务，访问量也不大，直接开放到互联网并不能有更多的提速效果；\n\n3. 开放到互联网怎么保证安全，财务报表等信息都是公司机密，老老实实放在内网，前面通过SSL VPN服务器挡着，即使有攻击也只是攻击SSL VPN服务器，内网服务器还是很安全的。\n\n综上所述对于一些内部站点，使用SSL VPN还是相当有好处的，特别是在拥有一款强大的SSL VPN服务器的时候。\n\n## 三、端口映射\n\n刚才讲的是WEB代理，对于一些内部服务器并不是WEB站点，那WEB代理还能使用吗？不能使用了，比如内部站点是FTP应用，那么访问不可能由HTTPS会话和FTP会话衔接而成，SSL VPN必须想其余办法。由于SSL只能封装在TCP之上，所以端口映射服务器只能针对内部的TCP应用，如FTP。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032951_image005_686807_30005_0.jpg)\n\n在端口映射中，SSL VPN的使用者会从SSL VPN页面自动加载一个客户端程序，我们姑且就叫它SSL VPN客户端程序吧，它是怎么使端口映射工作的呢，我们假设内部有两个FTP服务器，一个叫FTP1，内部地址10.6.16.1，另一个是FTP2，内部地址10.6.16.4，都是监听TCP 21端口：\n\n1. SSL VPN服务器为这两个内部服务器做了端口映射，TCP 2021端口映射到FTP1的TCP 21，3021则映射到FTP2；\n\n2. SSL VPN服务器会让使用者PC自动加载SSL VPN客户端程序，并根据这两个映射生成两个静态host映射表项，告诉使用者PC访问FTP1其实就是访问127.0.0.2，访问FTP2就是访问127.0.0.3，127.0.0.0/8称为环回地址，及该地址只能在PC内部使用，不可能被发出到PC之外，那么SSL VPN客户端程序就监听这两个内部地址；\n\n3. 使用者访问FTP1，其实访问的是TCP 127.0.0.2:21，所有数据都会被SSL VPN客户端程序监听，客户端程序会进行代理，变成访问服务器TCP 6.16.5.6:2021，该TCP访问会使用SSL进行加密；\n\n4. 大家可能会问，为何需要个客户端程序进行代理呢，使用者的应用程序不能直接和SSL VPN服务器建立SSL会话吗？这个问题很好，使用者的应用程序的确无法直接建立SSL会话，所以使用客户端程序代劳，这种方式可以让所有TCP应用都能够享用SSL VPN服务；\n\n5. 服务器接收到SSL加密的请求后，首先会进行解密，然后根据端口映射，会向内部FTP1站点TCP 10.6.16.1:21发起访问；\n\n6. 反向转发以及访问FTP2类似。\n\n我们可以发现这种端口映射使整个访问过程由三段会话组成：使用者应用程序与SSL VPN客户端程序的普通TCP会话、SSL VPN客户端程序与服务器的SSL会话、服务器与内部站点的普通TCP会话。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032952_image006_686807_30005_0.jpg)\n\n从这张图可以看出更详细的数据封装过程以及会话衔接过程，使用SSL VPN服务器进行端口映射的好处与WEB代理类似，可以牺牲SSL VPN服务器，保护内部服务器。\n\n## 四、IP连接\n\n前面介绍的WEB代理是专门针对WEB应用的，端口映射则受制于SSL只支持TCP应用，如果使用者要任意访问一个内部服务器的任意协议、端口，该如何是好呢？IP连接应运而生，IP连接可以完美地替代L2TP这种传统意义上的VPN：虚拟连接、内部地址、路由互联。\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032953_image007_686807_30005_0.jpg)\n\n我们从上图来解释一下IP连接的原理：\n\n1. 用户登陆SSL VPN页面后，会建立HTTPS会话，服务器通过这个会话给用户自动加载SSL VPN客户端程序；\n\n2. 此时的SSL VPN客户端程序的目的是给用户PC创建一个虚拟网卡，以实现类似于L2TP那种到客户总部网络的VPN连接；\n\n3. 虚拟网卡创建好后，服务器会给该用户从地址池中取一个地址分配给该用户，同时下发路由、DNS等信息，服务器针对该地址池也会有一个服务器地址192.168.1.1，作为所有客户端程序虚拟网卡的网关；\n\n4. 此时SSL VPN客户端程序与服务器之间会建立一个全新的SSL会话，专门用来传输虚拟网卡与服务器之间的流量；\n\n5. 假设用户要访问DNS 10.6.16.1，根据路由的关系，PC会通过虚拟网卡将DNS请求（源192.168.1.2目的10.6.16.1）转发给SSL VPN服务器192.168.1.1；\n\n6. PC上的SSL VPN客户端程序会将虚拟网卡发出的IP包封装至新的SSL会话中，通过互联网传送到服务器；\n\n7. 服务器进行解密，解封装后发现IP目的地址是10.6.16.1，那么就转发给DNS；\n\n8. 反向过程以及访问ERP服务器10.6.16.4与此类似。\n\n再来看一下数据封装过程，会有更加直观的认识：\n\n![](http://www.h3c.com.cn/res/201008/13/20100813_1032954_image008_686807_30005_0.jpg)\n\n在SSL VPN的IP连接中，客户端访问内部服务器不再像WEB代理、端口映射那应该多个会话衔接而成，而是一个内部地址端到端会话，穿越互联网的时候直接会话被封装至SSL会话中，和L2TP Over IPSec非常类似。\n\n## 五、SSL VPN总结\n\n为什么说SSL VPN可以通过多粒度的服务呢？这是一个对比：\n\n1. WEB代理，可以精确到对HTTP站点某些URL的控制；\n\n2. 端口映射，可以精确到对某个端口的控制；\n\n3. IP连接，可以精确到对某个IP地址的控制；\n\nL2TP只能实现3，无法实现1和2，更是很难实现行为审计功能。因此业界非常看好SSL VPN的前景，但使用SSL VPN必然也有一些局限性和代价：\n\n1. 对于站点到站点的应用，效率上不如IPSec，所以通常用来取代L2TP方案，而不是IPSec方案；\n\n2. SSL VPN的IP连接服务，在有连接的TCP中封装无连接的IP、UDP上效率不是很高，如果TCP中再封装TCP，在网络状况不稳定情况下，传输效率可能会急剧下降，但这个难题在被逐步功课之中，将来的TLS VPN可以实现在安全UDP会话，那情况就会好转很多；\n\n3. SSL VPN客户端必须配合SSL VPN服务器，各个厂家的客户端都是自行开发的，无法互相兼容，由于客户端都是动态加载的，也就是说访问什么服务器，必然加载与之配套的客户端，不存在兼容性问题，但客户端是操作系统相关，甚至是浏览器相关的，很多厂家的SSL VPN只开发了基于Windows IE的客户端，使用Linux、BSD操作系统的使用者无疑就杯具了，这里呼吁各大厂家要多多照顾一下其余操作系统用户。","slug":"2016-07-06-ssl-vpn-detailed-explanation","published":1,"date":"2016-07-15T12:55:41.020Z","updated":"2016-07-15T12:55:41.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qlcm0007pq8anp7fsb17","content":"<p>SSL VPN是专栏VPN系列技术原理的最后一篇，SSL VPN作为远程接入型的VPN，已经具备非常广阔的前景，它的主要适应场景是取代L2TP Over IPSec，但功能要比L2TP Over IPSec更丰富，方案也更加灵活。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、SSL-VPN简介\"><a href=\"#一、SSL-VPN简介\" class=\"headerlink\" title=\"一、SSL VPN简介\"></a>一、SSL VPN简介</h2><p>何谓SSL VPN，首先要从SSL谈起，使用网络不能不提的是各个网站，浏览网站使用浏览器，网络上传送网页的协议叫HTTP，它是明文传播的，传播内容可以被黑客读取。而SSL全名叫Secure Session Layer（安全会话层），其最初目的是给HTTP加密使用的安全套件，使用SSL的HTTP，也就摇身一变成了HTTPS，端口也从HTTP的80变成了443。由于HTTPS具备安全性，也具备传输数据的能力，也就被研究VPN技术的专家盯上了，觉得HTTPS可以用于组建VPN方案，于是乎SSL VPN技术就呼之欲出了。经过多年的发展，SSL版本发展到了3.0，也被标准组织采纳为TLS（Transport Layer Security传输层安全） 1.0之中，所以SSL VPN也叫TLS VPN。下面是SSL 与SSL VPN、TLS的区别：</p>\n<ol>\n<li><p>SSL：单纯的实现对某些TCP应用的保护，如HTTPS和SFTP；</p>\n</li>\n<li><p>SSL VPN：利用TCP的传输作用以及SSL对TCP会话的保护，实现VPN业务，被保护的VPN业务可以是TCP的、也可以UDP，纯IP的应用；</p>\n</li>\n<li><p>TLS：在SSL上进行扩展，能够直接实现对UDP应用的保护，这也是传输层安全的最佳注释。</p>\n</li>\n</ol>\n<p>接下来看看SSL VPN的使用场景吧：</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032947_image001_686807_30005_0.jpg\" alt=\"\"></p>\n<p>L2TP实现的是远程接入VPN，而IPSec为L2TP提供安全保护，这种应用已经非常成熟，但属于两个协议的生硬组合，在方案上不是特别灵活。而SSL VPN是天然的安全远程接入，在方案上，特别是权限控制、应用粒度上有独到之处，成为目前远程接入领域的香饽饽，目前已经超越了技术范畴，而成为一个安全网络服务框架。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032948_image002_686807_30005_0.jpg\" alt=\"\"></p>\n<p>SSL VPN最常见的入口还是网页，所以推广起来特别方便：</p>\n<ol>\n<li><p>使用者只需要记住VPN的网站（通常是HTTPS），用浏览器打开该网站；</p>\n</li>\n<li><p>输入使用者的身份信息，身份信息可以是用户名、数字证书（如USB-Key）、静态口令、动态口令的至尊组合，确保身份不泄露、不假冒；</p>\n</li>\n<li><p>选择服务种类，其中WEB代理是最为简单的应用，也是控制粒度最细的SSL VPN应用，可以精确地控制每个链接；</p>\n</li>\n<li><p>端口映射是粒度仅次于WEB代理的应用，它通过TCP端口映射的方式（原理上类似于NAT内部服务器应用），为使用者提供远程接入TCP的服务，它需要专门的、与服务器配套的SSL VPN客户端程序帮忙；</p>\n</li>\n<li><p>IP连接是SSL VPN中粒度最粗的服务，但也是使用最广泛的，它实现了类似于L2TP的特性，所有客户端都可以从服务器获得一个VPN地址，然后直接访问内部服务器，它也需要专门的SSL VPN客户端程序帮忙；</p>\n</li>\n<li><p>SSL VPN由于处在TCP层，所以可以进行丰富的业务控制，如行为审计，可以记录每名用户的所有操作，为更好地管理VPN提供了有效统计数据；</p>\n</li>\n<li><p>当使用者退出SSL VPN登陆页面时，所有上述安全会话会统统释放。</p>\n</li>\n</ol>\n<p>以上7个步骤可以划分为三个阶段：阶段一是连接与验证、阶段二是VPN应用、阶段三是审计与退出。由于连接与验证、审计与退出都是统一流程，也比较简单，本期针对大家较为关注的阶段二，VPN应用部分进行展开介绍。</p>\n<h2 id=\"二、WEB代理\"><a href=\"#二、WEB代理\" class=\"headerlink\" title=\"二、WEB代理\"></a>二、WEB代理</h2><p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032949_image003_686807_30005_0.jpg\" alt=\"\"></p>\n<p>由于SSL是封装在TCP上的，穿越NAT不是问题，所以在示例中客户端使用公网地址进行介绍：</p>\n<ol>\n<li><p>假设SSL VPN的WEB站点的互联网域名是<a href=\"https://sslvpn，该WEB站点对应的主机则是SSL\" target=\"_blank\" rel=\"external\">https://sslvpn，该WEB站点对应的主机则是SSL</a> VPN服务器；</p>\n</li>\n<li><p>使用者登陆SSL VPN的WEB页面后，WEB代理一栏会有许多链接，如内部财务报表、订单提交等内部网站；</p>\n</li>\n<li><p>假设“订单提交”网站在单位内部私有URL是<a href=\"http://site1/page，那么在SSL\" target=\"_blank\" rel=\"external\">http://site1/page，那么在SSL</a> VPN服务器上的订单提交链接URL则会进行相应的修改，变成<a href=\"https://sslvpn/httpsite1/pate，相当于SSL\" target=\"_blank\" rel=\"external\">https://sslvpn/httpsite1/pate，相当于SSL</a> VPN站点的内部链接；</p>\n</li>\n<li><p>使用者点击“订单提交”链接后，会新建一个浏览器窗口，打开链接<a href=\"https://sslvpn/httpsite1/page，也就是说对于使用者而言，订单提交像是SSL\" target=\"_blank\" rel=\"external\">https://sslvpn/httpsite1/page，也就是说对于使用者而言，订单提交像是SSL</a> VPN站点的一个链接，而非另外一个站点，所有的访问都终结在SSL VPN站点；</p>\n</li>\n<li><p>SSL VPN站点的所有者SSL VPN服务器在接收到使用者对<a href=\"https://sslvpn/httpsite1/page的页面请求后，SSL\" target=\"_blank\" rel=\"external\">https://sslvpn/httpsite1/page的页面请求后，SSL</a> VPN服务器会做WEB代理的工作，即以内部地址10.1.1.1向真正的“订单提交”站点10.6.16.3访问页面<a href=\"http://site1/page；\" target=\"_blank\" rel=\"external\">http://site1/page；</a></p>\n</li>\n<li><p>可以发现整个页面访问是由使用者与服务器之间的HTTPS会话、服务器与“订单提交”站点的HTTP会话连接而成的，服务器在这个访问中起的是WEB代理作用，因为在“订单提交”站点看来，访问者IP是服务器，而不是最终用户IP；</p>\n</li>\n<li><p>而使用者访问另外一个站点“财务报表”，也是类似过程。</p>\n</li>\n</ol>\n<p>WEB代理因为原理简单，实现起来较为容易，因为传统的WEB Proxy代理是两段HTTP会话的衔接，而SSL VPN的WEB代理则把用户与服务器的连接把HTTP换成了HTTPS、并对网站的URL进行了替换而已，从图中我们可以看到红色部分即为URL的替换。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032950_image004_686807_30005_0.jpg\" alt=\"\"></p>\n<p>从这张封装原理图，我们可以比较清楚地看到HTTPS与HTTP会话在这个访问过程中的衔接。可能有人会问，让“订单提交”站点直接在互联网提供HTTPS服务，直接用一个HTTPS会话不是更好，原理上当然更好，但是有更多的现实问题：</p>\n<ol>\n<li><p>直接在互联网提供HTTPS服务，需要一个互联网地址和公共域名，这两样都是要花钱申请的，使用SSL VPN统一接入，这么多内部站点只需要一个公网地址、一个公网域名，多划算；</p>\n</li>\n<li><p>订单提交真的需要开放到互联网吗？订单提交都是公司内部业务，访问量也不大，直接开放到互联网并不能有更多的提速效果；</p>\n</li>\n<li><p>开放到互联网怎么保证安全，财务报表等信息都是公司机密，老老实实放在内网，前面通过SSL VPN服务器挡着，即使有攻击也只是攻击SSL VPN服务器，内网服务器还是很安全的。</p>\n</li>\n</ol>\n<p>综上所述对于一些内部站点，使用SSL VPN还是相当有好处的，特别是在拥有一款强大的SSL VPN服务器的时候。</p>\n<h2 id=\"三、端口映射\"><a href=\"#三、端口映射\" class=\"headerlink\" title=\"三、端口映射\"></a>三、端口映射</h2><p>刚才讲的是WEB代理，对于一些内部服务器并不是WEB站点，那WEB代理还能使用吗？不能使用了，比如内部站点是FTP应用，那么访问不可能由HTTPS会话和FTP会话衔接而成，SSL VPN必须想其余办法。由于SSL只能封装在TCP之上，所以端口映射服务器只能针对内部的TCP应用，如FTP。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032951_image005_686807_30005_0.jpg\" alt=\"\"></p>\n<p>在端口映射中，SSL VPN的使用者会从SSL VPN页面自动加载一个客户端程序，我们姑且就叫它SSL VPN客户端程序吧，它是怎么使端口映射工作的呢，我们假设内部有两个FTP服务器，一个叫FTP1，内部地址10.6.16.1，另一个是FTP2，内部地址10.6.16.4，都是监听TCP 21端口：</p>\n<ol>\n<li><p>SSL VPN服务器为这两个内部服务器做了端口映射，TCP 2021端口映射到FTP1的TCP 21，3021则映射到FTP2；</p>\n</li>\n<li><p>SSL VPN服务器会让使用者PC自动加载SSL VPN客户端程序，并根据这两个映射生成两个静态host映射表项，告诉使用者PC访问FTP1其实就是访问127.0.0.2，访问FTP2就是访问127.0.0.3，127.0.0.0/8称为环回地址，及该地址只能在PC内部使用，不可能被发出到PC之外，那么SSL VPN客户端程序就监听这两个内部地址；</p>\n</li>\n<li><p>使用者访问FTP1，其实访问的是TCP 127.0.0.2:21，所有数据都会被SSL VPN客户端程序监听，客户端程序会进行代理，变成访问服务器TCP 6.16.5.6:2021，该TCP访问会使用SSL进行加密；</p>\n</li>\n<li><p>大家可能会问，为何需要个客户端程序进行代理呢，使用者的应用程序不能直接和SSL VPN服务器建立SSL会话吗？这个问题很好，使用者的应用程序的确无法直接建立SSL会话，所以使用客户端程序代劳，这种方式可以让所有TCP应用都能够享用SSL VPN服务；</p>\n</li>\n<li><p>服务器接收到SSL加密的请求后，首先会进行解密，然后根据端口映射，会向内部FTP1站点TCP 10.6.16.1:21发起访问；</p>\n</li>\n<li><p>反向转发以及访问FTP2类似。</p>\n</li>\n</ol>\n<p>我们可以发现这种端口映射使整个访问过程由三段会话组成：使用者应用程序与SSL VPN客户端程序的普通TCP会话、SSL VPN客户端程序与服务器的SSL会话、服务器与内部站点的普通TCP会话。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032952_image006_686807_30005_0.jpg\" alt=\"\"></p>\n<p>从这张图可以看出更详细的数据封装过程以及会话衔接过程，使用SSL VPN服务器进行端口映射的好处与WEB代理类似，可以牺牲SSL VPN服务器，保护内部服务器。</p>\n<h2 id=\"四、IP连接\"><a href=\"#四、IP连接\" class=\"headerlink\" title=\"四、IP连接\"></a>四、IP连接</h2><p>前面介绍的WEB代理是专门针对WEB应用的，端口映射则受制于SSL只支持TCP应用，如果使用者要任意访问一个内部服务器的任意协议、端口，该如何是好呢？IP连接应运而生，IP连接可以完美地替代L2TP这种传统意义上的VPN：虚拟连接、内部地址、路由互联。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032953_image007_686807_30005_0.jpg\" alt=\"\"></p>\n<p>我们从上图来解释一下IP连接的原理：</p>\n<ol>\n<li><p>用户登陆SSL VPN页面后，会建立HTTPS会话，服务器通过这个会话给用户自动加载SSL VPN客户端程序；</p>\n</li>\n<li><p>此时的SSL VPN客户端程序的目的是给用户PC创建一个虚拟网卡，以实现类似于L2TP那种到客户总部网络的VPN连接；</p>\n</li>\n<li><p>虚拟网卡创建好后，服务器会给该用户从地址池中取一个地址分配给该用户，同时下发路由、DNS等信息，服务器针对该地址池也会有一个服务器地址192.168.1.1，作为所有客户端程序虚拟网卡的网关；</p>\n</li>\n<li><p>此时SSL VPN客户端程序与服务器之间会建立一个全新的SSL会话，专门用来传输虚拟网卡与服务器之间的流量；</p>\n</li>\n<li><p>假设用户要访问DNS 10.6.16.1，根据路由的关系，PC会通过虚拟网卡将DNS请求（源192.168.1.2目的10.6.16.1）转发给SSL VPN服务器192.168.1.1；</p>\n</li>\n<li><p>PC上的SSL VPN客户端程序会将虚拟网卡发出的IP包封装至新的SSL会话中，通过互联网传送到服务器；</p>\n</li>\n<li><p>服务器进行解密，解封装后发现IP目的地址是10.6.16.1，那么就转发给DNS；</p>\n</li>\n<li><p>反向过程以及访问ERP服务器10.6.16.4与此类似。</p>\n</li>\n</ol>\n<p>再来看一下数据封装过程，会有更加直观的认识：</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032954_image008_686807_30005_0.jpg\" alt=\"\"></p>\n<p>在SSL VPN的IP连接中，客户端访问内部服务器不再像WEB代理、端口映射那应该多个会话衔接而成，而是一个内部地址端到端会话，穿越互联网的时候直接会话被封装至SSL会话中，和L2TP Over IPSec非常类似。</p>\n<h2 id=\"五、SSL-VPN总结\"><a href=\"#五、SSL-VPN总结\" class=\"headerlink\" title=\"五、SSL VPN总结\"></a>五、SSL VPN总结</h2><p>为什么说SSL VPN可以通过多粒度的服务呢？这是一个对比：</p>\n<ol>\n<li><p>WEB代理，可以精确到对HTTP站点某些URL的控制；</p>\n</li>\n<li><p>端口映射，可以精确到对某个端口的控制；</p>\n</li>\n<li><p>IP连接，可以精确到对某个IP地址的控制；</p>\n</li>\n</ol>\n<p>L2TP只能实现3，无法实现1和2，更是很难实现行为审计功能。因此业界非常看好SSL VPN的前景，但使用SSL VPN必然也有一些局限性和代价：</p>\n<ol>\n<li><p>对于站点到站点的应用，效率上不如IPSec，所以通常用来取代L2TP方案，而不是IPSec方案；</p>\n</li>\n<li><p>SSL VPN的IP连接服务，在有连接的TCP中封装无连接的IP、UDP上效率不是很高，如果TCP中再封装TCP，在网络状况不稳定情况下，传输效率可能会急剧下降，但这个难题在被逐步功课之中，将来的TLS VPN可以实现在安全UDP会话，那情况就会好转很多；</p>\n</li>\n<li><p>SSL VPN客户端必须配合SSL VPN服务器，各个厂家的客户端都是自行开发的，无法互相兼容，由于客户端都是动态加载的，也就是说访问什么服务器，必然加载与之配套的客户端，不存在兼容性问题，但客户端是操作系统相关，甚至是浏览器相关的，很多厂家的SSL VPN只开发了基于Windows IE的客户端，使用Linux、BSD操作系统的使用者无疑就杯具了，这里呼吁各大厂家要多多照顾一下其余操作系统用户。</p>\n</li>\n</ol>\n","excerpt":"<p>SSL VPN是专栏VPN系列技术原理的最后一篇，SSL VPN作为远程接入型的VPN，已经具备非常广阔的前景，它的主要适应场景是取代L2TP Over IPSec，但功能要比L2TP Over IPSec更丰富，方案也更加灵活。</p>","more":"<h2 id=\"一、SSL-VPN简介\"><a href=\"#一、SSL-VPN简介\" class=\"headerlink\" title=\"一、SSL VPN简介\"></a>一、SSL VPN简介</h2><p>何谓SSL VPN，首先要从SSL谈起，使用网络不能不提的是各个网站，浏览网站使用浏览器，网络上传送网页的协议叫HTTP，它是明文传播的，传播内容可以被黑客读取。而SSL全名叫Secure Session Layer（安全会话层），其最初目的是给HTTP加密使用的安全套件，使用SSL的HTTP，也就摇身一变成了HTTPS，端口也从HTTP的80变成了443。由于HTTPS具备安全性，也具备传输数据的能力，也就被研究VPN技术的专家盯上了，觉得HTTPS可以用于组建VPN方案，于是乎SSL VPN技术就呼之欲出了。经过多年的发展，SSL版本发展到了3.0，也被标准组织采纳为TLS（Transport Layer Security传输层安全） 1.0之中，所以SSL VPN也叫TLS VPN。下面是SSL 与SSL VPN、TLS的区别：</p>\n<ol>\n<li><p>SSL：单纯的实现对某些TCP应用的保护，如HTTPS和SFTP；</p>\n</li>\n<li><p>SSL VPN：利用TCP的传输作用以及SSL对TCP会话的保护，实现VPN业务，被保护的VPN业务可以是TCP的、也可以UDP，纯IP的应用；</p>\n</li>\n<li><p>TLS：在SSL上进行扩展，能够直接实现对UDP应用的保护，这也是传输层安全的最佳注释。</p>\n</li>\n</ol>\n<p>接下来看看SSL VPN的使用场景吧：</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032947_image001_686807_30005_0.jpg\" alt=\"\"></p>\n<p>L2TP实现的是远程接入VPN，而IPSec为L2TP提供安全保护，这种应用已经非常成熟，但属于两个协议的生硬组合，在方案上不是特别灵活。而SSL VPN是天然的安全远程接入，在方案上，特别是权限控制、应用粒度上有独到之处，成为目前远程接入领域的香饽饽，目前已经超越了技术范畴，而成为一个安全网络服务框架。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032948_image002_686807_30005_0.jpg\" alt=\"\"></p>\n<p>SSL VPN最常见的入口还是网页，所以推广起来特别方便：</p>\n<ol>\n<li><p>使用者只需要记住VPN的网站（通常是HTTPS），用浏览器打开该网站；</p>\n</li>\n<li><p>输入使用者的身份信息，身份信息可以是用户名、数字证书（如USB-Key）、静态口令、动态口令的至尊组合，确保身份不泄露、不假冒；</p>\n</li>\n<li><p>选择服务种类，其中WEB代理是最为简单的应用，也是控制粒度最细的SSL VPN应用，可以精确地控制每个链接；</p>\n</li>\n<li><p>端口映射是粒度仅次于WEB代理的应用，它通过TCP端口映射的方式（原理上类似于NAT内部服务器应用），为使用者提供远程接入TCP的服务，它需要专门的、与服务器配套的SSL VPN客户端程序帮忙；</p>\n</li>\n<li><p>IP连接是SSL VPN中粒度最粗的服务，但也是使用最广泛的，它实现了类似于L2TP的特性，所有客户端都可以从服务器获得一个VPN地址，然后直接访问内部服务器，它也需要专门的SSL VPN客户端程序帮忙；</p>\n</li>\n<li><p>SSL VPN由于处在TCP层，所以可以进行丰富的业务控制，如行为审计，可以记录每名用户的所有操作，为更好地管理VPN提供了有效统计数据；</p>\n</li>\n<li><p>当使用者退出SSL VPN登陆页面时，所有上述安全会话会统统释放。</p>\n</li>\n</ol>\n<p>以上7个步骤可以划分为三个阶段：阶段一是连接与验证、阶段二是VPN应用、阶段三是审计与退出。由于连接与验证、审计与退出都是统一流程，也比较简单，本期针对大家较为关注的阶段二，VPN应用部分进行展开介绍。</p>\n<h2 id=\"二、WEB代理\"><a href=\"#二、WEB代理\" class=\"headerlink\" title=\"二、WEB代理\"></a>二、WEB代理</h2><p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032949_image003_686807_30005_0.jpg\" alt=\"\"></p>\n<p>由于SSL是封装在TCP上的，穿越NAT不是问题，所以在示例中客户端使用公网地址进行介绍：</p>\n<ol>\n<li><p>假设SSL VPN的WEB站点的互联网域名是<a href=\"https://sslvpn，该WEB站点对应的主机则是SSL\">https://sslvpn，该WEB站点对应的主机则是SSL</a> VPN服务器；</p>\n</li>\n<li><p>使用者登陆SSL VPN的WEB页面后，WEB代理一栏会有许多链接，如内部财务报表、订单提交等内部网站；</p>\n</li>\n<li><p>假设“订单提交”网站在单位内部私有URL是<a href=\"http://site1/page，那么在SSL\">http://site1/page，那么在SSL</a> VPN服务器上的订单提交链接URL则会进行相应的修改，变成<a href=\"https://sslvpn/httpsite1/pate，相当于SSL\">https://sslvpn/httpsite1/pate，相当于SSL</a> VPN站点的内部链接；</p>\n</li>\n<li><p>使用者点击“订单提交”链接后，会新建一个浏览器窗口，打开链接<a href=\"https://sslvpn/httpsite1/page，也就是说对于使用者而言，订单提交像是SSL\">https://sslvpn/httpsite1/page，也就是说对于使用者而言，订单提交像是SSL</a> VPN站点的一个链接，而非另外一个站点，所有的访问都终结在SSL VPN站点；</p>\n</li>\n<li><p>SSL VPN站点的所有者SSL VPN服务器在接收到使用者对<a href=\"https://sslvpn/httpsite1/page的页面请求后，SSL\">https://sslvpn/httpsite1/page的页面请求后，SSL</a> VPN服务器会做WEB代理的工作，即以内部地址10.1.1.1向真正的“订单提交”站点10.6.16.3访问页面<a href=\"http://site1/page；\">http://site1/page；</a></p>\n</li>\n<li><p>可以发现整个页面访问是由使用者与服务器之间的HTTPS会话、服务器与“订单提交”站点的HTTP会话连接而成的，服务器在这个访问中起的是WEB代理作用，因为在“订单提交”站点看来，访问者IP是服务器，而不是最终用户IP；</p>\n</li>\n<li><p>而使用者访问另外一个站点“财务报表”，也是类似过程。</p>\n</li>\n</ol>\n<p>WEB代理因为原理简单，实现起来较为容易，因为传统的WEB Proxy代理是两段HTTP会话的衔接，而SSL VPN的WEB代理则把用户与服务器的连接把HTTP换成了HTTPS、并对网站的URL进行了替换而已，从图中我们可以看到红色部分即为URL的替换。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032950_image004_686807_30005_0.jpg\" alt=\"\"></p>\n<p>从这张封装原理图，我们可以比较清楚地看到HTTPS与HTTP会话在这个访问过程中的衔接。可能有人会问，让“订单提交”站点直接在互联网提供HTTPS服务，直接用一个HTTPS会话不是更好，原理上当然更好，但是有更多的现实问题：</p>\n<ol>\n<li><p>直接在互联网提供HTTPS服务，需要一个互联网地址和公共域名，这两样都是要花钱申请的，使用SSL VPN统一接入，这么多内部站点只需要一个公网地址、一个公网域名，多划算；</p>\n</li>\n<li><p>订单提交真的需要开放到互联网吗？订单提交都是公司内部业务，访问量也不大，直接开放到互联网并不能有更多的提速效果；</p>\n</li>\n<li><p>开放到互联网怎么保证安全，财务报表等信息都是公司机密，老老实实放在内网，前面通过SSL VPN服务器挡着，即使有攻击也只是攻击SSL VPN服务器，内网服务器还是很安全的。</p>\n</li>\n</ol>\n<p>综上所述对于一些内部站点，使用SSL VPN还是相当有好处的，特别是在拥有一款强大的SSL VPN服务器的时候。</p>\n<h2 id=\"三、端口映射\"><a href=\"#三、端口映射\" class=\"headerlink\" title=\"三、端口映射\"></a>三、端口映射</h2><p>刚才讲的是WEB代理，对于一些内部服务器并不是WEB站点，那WEB代理还能使用吗？不能使用了，比如内部站点是FTP应用，那么访问不可能由HTTPS会话和FTP会话衔接而成，SSL VPN必须想其余办法。由于SSL只能封装在TCP之上，所以端口映射服务器只能针对内部的TCP应用，如FTP。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032951_image005_686807_30005_0.jpg\" alt=\"\"></p>\n<p>在端口映射中，SSL VPN的使用者会从SSL VPN页面自动加载一个客户端程序，我们姑且就叫它SSL VPN客户端程序吧，它是怎么使端口映射工作的呢，我们假设内部有两个FTP服务器，一个叫FTP1，内部地址10.6.16.1，另一个是FTP2，内部地址10.6.16.4，都是监听TCP 21端口：</p>\n<ol>\n<li><p>SSL VPN服务器为这两个内部服务器做了端口映射，TCP 2021端口映射到FTP1的TCP 21，3021则映射到FTP2；</p>\n</li>\n<li><p>SSL VPN服务器会让使用者PC自动加载SSL VPN客户端程序，并根据这两个映射生成两个静态host映射表项，告诉使用者PC访问FTP1其实就是访问127.0.0.2，访问FTP2就是访问127.0.0.3，127.0.0.0/8称为环回地址，及该地址只能在PC内部使用，不可能被发出到PC之外，那么SSL VPN客户端程序就监听这两个内部地址；</p>\n</li>\n<li><p>使用者访问FTP1，其实访问的是TCP 127.0.0.2:21，所有数据都会被SSL VPN客户端程序监听，客户端程序会进行代理，变成访问服务器TCP 6.16.5.6:2021，该TCP访问会使用SSL进行加密；</p>\n</li>\n<li><p>大家可能会问，为何需要个客户端程序进行代理呢，使用者的应用程序不能直接和SSL VPN服务器建立SSL会话吗？这个问题很好，使用者的应用程序的确无法直接建立SSL会话，所以使用客户端程序代劳，这种方式可以让所有TCP应用都能够享用SSL VPN服务；</p>\n</li>\n<li><p>服务器接收到SSL加密的请求后，首先会进行解密，然后根据端口映射，会向内部FTP1站点TCP 10.6.16.1:21发起访问；</p>\n</li>\n<li><p>反向转发以及访问FTP2类似。</p>\n</li>\n</ol>\n<p>我们可以发现这种端口映射使整个访问过程由三段会话组成：使用者应用程序与SSL VPN客户端程序的普通TCP会话、SSL VPN客户端程序与服务器的SSL会话、服务器与内部站点的普通TCP会话。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032952_image006_686807_30005_0.jpg\" alt=\"\"></p>\n<p>从这张图可以看出更详细的数据封装过程以及会话衔接过程，使用SSL VPN服务器进行端口映射的好处与WEB代理类似，可以牺牲SSL VPN服务器，保护内部服务器。</p>\n<h2 id=\"四、IP连接\"><a href=\"#四、IP连接\" class=\"headerlink\" title=\"四、IP连接\"></a>四、IP连接</h2><p>前面介绍的WEB代理是专门针对WEB应用的，端口映射则受制于SSL只支持TCP应用，如果使用者要任意访问一个内部服务器的任意协议、端口，该如何是好呢？IP连接应运而生，IP连接可以完美地替代L2TP这种传统意义上的VPN：虚拟连接、内部地址、路由互联。</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032953_image007_686807_30005_0.jpg\" alt=\"\"></p>\n<p>我们从上图来解释一下IP连接的原理：</p>\n<ol>\n<li><p>用户登陆SSL VPN页面后，会建立HTTPS会话，服务器通过这个会话给用户自动加载SSL VPN客户端程序；</p>\n</li>\n<li><p>此时的SSL VPN客户端程序的目的是给用户PC创建一个虚拟网卡，以实现类似于L2TP那种到客户总部网络的VPN连接；</p>\n</li>\n<li><p>虚拟网卡创建好后，服务器会给该用户从地址池中取一个地址分配给该用户，同时下发路由、DNS等信息，服务器针对该地址池也会有一个服务器地址192.168.1.1，作为所有客户端程序虚拟网卡的网关；</p>\n</li>\n<li><p>此时SSL VPN客户端程序与服务器之间会建立一个全新的SSL会话，专门用来传输虚拟网卡与服务器之间的流量；</p>\n</li>\n<li><p>假设用户要访问DNS 10.6.16.1，根据路由的关系，PC会通过虚拟网卡将DNS请求（源192.168.1.2目的10.6.16.1）转发给SSL VPN服务器192.168.1.1；</p>\n</li>\n<li><p>PC上的SSL VPN客户端程序会将虚拟网卡发出的IP包封装至新的SSL会话中，通过互联网传送到服务器；</p>\n</li>\n<li><p>服务器进行解密，解封装后发现IP目的地址是10.6.16.1，那么就转发给DNS；</p>\n</li>\n<li><p>反向过程以及访问ERP服务器10.6.16.4与此类似。</p>\n</li>\n</ol>\n<p>再来看一下数据封装过程，会有更加直观的认识：</p>\n<p><img src=\"http://www.h3c.com.cn/res/201008/13/20100813_1032954_image008_686807_30005_0.jpg\" alt=\"\"></p>\n<p>在SSL VPN的IP连接中，客户端访问内部服务器不再像WEB代理、端口映射那应该多个会话衔接而成，而是一个内部地址端到端会话，穿越互联网的时候直接会话被封装至SSL会话中，和L2TP Over IPSec非常类似。</p>\n<h2 id=\"五、SSL-VPN总结\"><a href=\"#五、SSL-VPN总结\" class=\"headerlink\" title=\"五、SSL VPN总结\"></a>五、SSL VPN总结</h2><p>为什么说SSL VPN可以通过多粒度的服务呢？这是一个对比：</p>\n<ol>\n<li><p>WEB代理，可以精确到对HTTP站点某些URL的控制；</p>\n</li>\n<li><p>端口映射，可以精确到对某个端口的控制；</p>\n</li>\n<li><p>IP连接，可以精确到对某个IP地址的控制；</p>\n</li>\n</ol>\n<p>L2TP只能实现3，无法实现1和2，更是很难实现行为审计功能。因此业界非常看好SSL VPN的前景，但使用SSL VPN必然也有一些局限性和代价：</p>\n<ol>\n<li><p>对于站点到站点的应用，效率上不如IPSec，所以通常用来取代L2TP方案，而不是IPSec方案；</p>\n</li>\n<li><p>SSL VPN的IP连接服务，在有连接的TCP中封装无连接的IP、UDP上效率不是很高，如果TCP中再封装TCP，在网络状况不稳定情况下，传输效率可能会急剧下降，但这个难题在被逐步功课之中，将来的TLS VPN可以实现在安全UDP会话，那情况就会好转很多；</p>\n</li>\n<li><p>SSL VPN客户端必须配合SSL VPN服务器，各个厂家的客户端都是自行开发的，无法互相兼容，由于客户端都是动态加载的，也就是说访问什么服务器，必然加载与之配套的客户端，不存在兼容性问题，但客户端是操作系统相关，甚至是浏览器相关的，很多厂家的SSL VPN只开发了基于Windows IE的客户端，使用Linux、BSD操作系统的使用者无疑就杯具了，这里呼吁各大厂家要多多照顾一下其余操作系统用户。</p>\n</li>\n</ol>"},{"title":"用p4merge解决git冲突问题","date":"2016-07-12T03:15:00.000Z","_content":"\ngit在遇到冲突的时候除了可以直接编辑文件来解决冲突，也可以借助一些第三方的图形化工具来解决。p4merge是p4v上采用的一种比对工具，本文采用p4merge来解决git冲突，平台是Linux Mint17。\n\n<!-- more -->\n\n## p4merge安装\n\n**如果linux系统上面已经安装过p4v客户端，p4merge应该已经装好了，就可以跳过p4merge安装这个步骤了。**\n\n1. 到官网下载p4merge,选择linux平台进行下载\n\n    [https://www.perforce.com/downloads/integrations](https://www.perforce.com/downloads/integrations)\n\n2. 解压下载的p4merge软件包\n\n\t\ttar -zxvf p4v.tgz\n\n3. 解压之后进入解压出来的文件夹，发现里面会有两个子文件夹bin和lib,将这两个文件夹中的文件分别拷贝到对应的系统目录下，执行以下指令即可：\n\n\t    sudo cp -rf bin/* /usr/local/bin/\n        sudo cp -rf lib/* /usr/local/lib/\n\n4. 这个时候p4merge应该就可以使用了，在控制台输入p4merge应该就会出现diff和merge对话框。下面将会修改git的配置文件来使用p4merge.\n\n## 配置.gitconfig\n\n打开.gitconfig:\n\n\tvim ~/.gitconfig\n\n向其中添加以下内容：\n\n\t[diff]\n\t    tool = p4merge\n\t[difftool]\n\t    prompt = false\n\t[merge]\n\t    tool = p4merge\n\t[mergetool]\n\t    prompt = false\n\n## 使用\n\n查看diff\n\n\tgit difftool\n \n解决冲突\n\n\tgit mergetool\n\t\n\n","source":"_posts/2016-07-12-git-p4merge.md","raw":"---\ntitle: 用p4merge解决git冲突问题\ndate: 2016-07-12 11:15:00\ncategories: git\ntags: [git]\n---\n\ngit在遇到冲突的时候除了可以直接编辑文件来解决冲突，也可以借助一些第三方的图形化工具来解决。p4merge是p4v上采用的一种比对工具，本文采用p4merge来解决git冲突，平台是Linux Mint17。\n\n<!-- more -->\n\n## p4merge安装\n\n**如果linux系统上面已经安装过p4v客户端，p4merge应该已经装好了，就可以跳过p4merge安装这个步骤了。**\n\n1. 到官网下载p4merge,选择linux平台进行下载\n\n    [https://www.perforce.com/downloads/integrations](https://www.perforce.com/downloads/integrations)\n\n2. 解压下载的p4merge软件包\n\n\t\ttar -zxvf p4v.tgz\n\n3. 解压之后进入解压出来的文件夹，发现里面会有两个子文件夹bin和lib,将这两个文件夹中的文件分别拷贝到对应的系统目录下，执行以下指令即可：\n\n\t    sudo cp -rf bin/* /usr/local/bin/\n        sudo cp -rf lib/* /usr/local/lib/\n\n4. 这个时候p4merge应该就可以使用了，在控制台输入p4merge应该就会出现diff和merge对话框。下面将会修改git的配置文件来使用p4merge.\n\n## 配置.gitconfig\n\n打开.gitconfig:\n\n\tvim ~/.gitconfig\n\n向其中添加以下内容：\n\n\t[diff]\n\t    tool = p4merge\n\t[difftool]\n\t    prompt = false\n\t[merge]\n\t    tool = p4merge\n\t[mergetool]\n\t    prompt = false\n\n## 使用\n\n查看diff\n\n\tgit difftool\n \n解决冲突\n\n\tgit mergetool\n\t\n\n","slug":"2016-07-12-git-p4merge","published":1,"updated":"2016-07-15T12:55:46.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qlco0009pq8aw7df9vh3","content":"<p>git在遇到冲突的时候除了可以直接编辑文件来解决冲突，也可以借助一些第三方的图形化工具来解决。p4merge是p4v上采用的一种比对工具，本文采用p4merge来解决git冲突，平台是Linux Mint17。</p>\n<a id=\"more\"></a>\n<h2 id=\"p4merge安装\"><a href=\"#p4merge安装\" class=\"headerlink\" title=\"p4merge安装\"></a>p4merge安装</h2><p><strong>如果linux系统上面已经安装过p4v客户端，p4merge应该已经装好了，就可以跳过p4merge安装这个步骤了。</strong></p>\n<ol>\n<li><p>到官网下载p4merge,选择linux平台进行下载</p>\n<p> <a href=\"https://www.perforce.com/downloads/integrations\" target=\"_blank\" rel=\"external\">https://www.perforce.com/downloads/integrations</a></p>\n</li>\n<li><p>解压下载的p4merge软件包</p>\n<pre><code>tar -zxvf p4v.tgz\n</code></pre></li>\n<li><p>解压之后进入解压出来的文件夹，发现里面会有两个子文件夹bin和lib,将这两个文件夹中的文件分别拷贝到对应的系统目录下，执行以下指令即可：</p>\n<pre><code>sudo cp -rf bin/* /usr/local/bin/\nsudo cp -rf lib/* /usr/local/lib/\n</code></pre></li>\n<li><p>这个时候p4merge应该就可以使用了，在控制台输入p4merge应该就会出现diff和merge对话框。下面将会修改git的配置文件来使用p4merge.</p>\n</li>\n</ol>\n<h2 id=\"配置-gitconfig\"><a href=\"#配置-gitconfig\" class=\"headerlink\" title=\"配置.gitconfig\"></a>配置.gitconfig</h2><p>打开.gitconfig:</p>\n<pre><code>vim ~/.gitconfig\n</code></pre><p>向其中添加以下内容：</p>\n<pre><code>[diff]\n    tool = p4merge\n[difftool]\n    prompt = false\n[merge]\n    tool = p4merge\n[mergetool]\n    prompt = false\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>查看diff</p>\n<pre><code>git difftool\n</code></pre><p>解决冲突</p>\n<pre><code>git mergetool\n</code></pre>","excerpt":"<p>git在遇到冲突的时候除了可以直接编辑文件来解决冲突，也可以借助一些第三方的图形化工具来解决。p4merge是p4v上采用的一种比对工具，本文采用p4merge来解决git冲突，平台是Linux Mint17。</p>","more":"<h2 id=\"p4merge安装\"><a href=\"#p4merge安装\" class=\"headerlink\" title=\"p4merge安装\"></a>p4merge安装</h2><p><strong>如果linux系统上面已经安装过p4v客户端，p4merge应该已经装好了，就可以跳过p4merge安装这个步骤了。</strong></p>\n<ol>\n<li><p>到官网下载p4merge,选择linux平台进行下载</p>\n<p> <a href=\"https://www.perforce.com/downloads/integrations\">https://www.perforce.com/downloads/integrations</a></p>\n</li>\n<li><p>解压下载的p4merge软件包</p>\n<pre><code>tar -zxvf p4v.tgz\n</code></pre></li>\n<li><p>解压之后进入解压出来的文件夹，发现里面会有两个子文件夹bin和lib,将这两个文件夹中的文件分别拷贝到对应的系统目录下，执行以下指令即可：</p>\n<pre><code>sudo cp -rf bin/* /usr/local/bin/\nsudo cp -rf lib/* /usr/local/lib/\n</code></pre></li>\n<li><p>这个时候p4merge应该就可以使用了，在控制台输入p4merge应该就会出现diff和merge对话框。下面将会修改git的配置文件来使用p4merge.</p>\n</li>\n</ol>\n<h2 id=\"配置-gitconfig\"><a href=\"#配置-gitconfig\" class=\"headerlink\" title=\"配置.gitconfig\"></a>配置.gitconfig</h2><p>打开.gitconfig:</p>\n<pre><code>vim ~/.gitconfig\n</code></pre><p>向其中添加以下内容：</p>\n<pre><code>[diff]\n    tool = p4merge\n[difftool]\n    prompt = false\n[merge]\n    tool = p4merge\n[mergetool]\n    prompt = false\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>查看diff</p>\n<pre><code>git difftool\n</code></pre><p>解决冲突</p>\n<pre><code>git mergetool\n</code></pre>"},{"title":"Samba配置方案","_content":"\n对于samba的配置有多种方案，本方案使所有的guest用户都可以不用输入用户名密码都能访问共享的文件夹。基于Linux Mint17来进行配置。\n\n<!-- more -->\n\n## 安装samba\n\n安装samba比较简单，在控制台输入:\n\n    sudo apt-get install samba\n\n在Mint上还需要安装一些库：\n\n    sudo apt-get install -y libsmbclient libsmbclient-dev libtevent0 libtalloc2\n\n## 配置\n\n这种方案的配置比较简单，配置文件为： \n\n    /etc/samba/smb.conf \n\n原文件不变，向其中Share Definitions部分加入下面这段内容：\n\n    [public]\n        path = /home/tony \n        available = yes    \n        browseable = yes\n        writeable = yes\n        public = yes \n        guest ok = yes\n\npath是要共享的文件夹路径，我共享的是/home/tony这个文件夹下的所有内容。对于这个文件夹需要修改其权限为：\n\n    chmod 777 /home/tony\n\n## 重启服务\n\n在控制台中输入：\n\n    sudo service smbd restart\n\n下面就可以愉快地访问共享的文件了","source":"_posts/2016-07-12-samba.md","raw":"---\ntitle: Samba配置方案\ncategories : tools\ntags : [samba]\n---\n\n对于samba的配置有多种方案，本方案使所有的guest用户都可以不用输入用户名密码都能访问共享的文件夹。基于Linux Mint17来进行配置。\n\n<!-- more -->\n\n## 安装samba\n\n安装samba比较简单，在控制台输入:\n\n    sudo apt-get install samba\n\n在Mint上还需要安装一些库：\n\n    sudo apt-get install -y libsmbclient libsmbclient-dev libtevent0 libtalloc2\n\n## 配置\n\n这种方案的配置比较简单，配置文件为： \n\n    /etc/samba/smb.conf \n\n原文件不变，向其中Share Definitions部分加入下面这段内容：\n\n    [public]\n        path = /home/tony \n        available = yes    \n        browseable = yes\n        writeable = yes\n        public = yes \n        guest ok = yes\n\npath是要共享的文件夹路径，我共享的是/home/tony这个文件夹下的所有内容。对于这个文件夹需要修改其权限为：\n\n    chmod 777 /home/tony\n\n## 重启服务\n\n在控制台中输入：\n\n    sudo service smbd restart\n\n下面就可以愉快地访问共享的文件了","slug":"2016-07-12-samba","published":1,"date":"2016-07-15T12:55:51.316Z","updated":"2016-07-15T12:55:51.316Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qld3000bpq8ay753tv4l","content":"<p>对于samba的配置有多种方案，本方案使所有的guest用户都可以不用输入用户名密码都能访问共享的文件夹。基于Linux Mint17来进行配置。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装samba\"><a href=\"#安装samba\" class=\"headerlink\" title=\"安装samba\"></a>安装samba</h2><p>安装samba比较简单，在控制台输入:</p>\n<pre><code>sudo apt-get install samba\n</code></pre><p>在Mint上还需要安装一些库：</p>\n<pre><code>sudo apt-get install -y libsmbclient libsmbclient-dev libtevent0 libtalloc2\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>这种方案的配置比较简单，配置文件为： </p>\n<pre><code>/etc/samba/smb.conf \n</code></pre><p>原文件不变，向其中Share Definitions部分加入下面这段内容：</p>\n<pre><code>[public]\n    path = /home/tony \n    available = yes    \n    browseable = yes\n    writeable = yes\n    public = yes \n    guest ok = yes\n</code></pre><p>path是要共享的文件夹路径，我共享的是/home/tony这个文件夹下的所有内容。对于这个文件夹需要修改其权限为：</p>\n<pre><code>chmod 777 /home/tony\n</code></pre><h2 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h2><p>在控制台中输入：</p>\n<pre><code>sudo service smbd restart\n</code></pre><p>下面就可以愉快地访问共享的文件了</p>\n","excerpt":"<p>对于samba的配置有多种方案，本方案使所有的guest用户都可以不用输入用户名密码都能访问共享的文件夹。基于Linux Mint17来进行配置。</p>","more":"<h2 id=\"安装samba\"><a href=\"#安装samba\" class=\"headerlink\" title=\"安装samba\"></a>安装samba</h2><p>安装samba比较简单，在控制台输入:</p>\n<pre><code>sudo apt-get install samba\n</code></pre><p>在Mint上还需要安装一些库：</p>\n<pre><code>sudo apt-get install -y libsmbclient libsmbclient-dev libtevent0 libtalloc2\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>这种方案的配置比较简单，配置文件为： </p>\n<pre><code>/etc/samba/smb.conf \n</code></pre><p>原文件不变，向其中Share Definitions部分加入下面这段内容：</p>\n<pre><code>[public]\n    path = /home/tony \n    available = yes    \n    browseable = yes\n    writeable = yes\n    public = yes \n    guest ok = yes\n</code></pre><p>path是要共享的文件夹路径，我共享的是/home/tony这个文件夹下的所有内容。对于这个文件夹需要修改其权限为：</p>\n<pre><code>chmod 777 /home/tony\n</code></pre><h2 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h2><p>在控制台中输入：</p>\n<pre><code>sudo service smbd restart\n</code></pre><p>下面就可以愉快地访问共享的文件了</p>"},{"title":"Vmware vSphere虚拟机与主机共享剪贴板","_content":"\n默认情况下，Vmware vSphere已禁用针对ESXESXi的复制和粘贴操作，以防止公开已复制到剪贴板中的敏感数据。其实可以通过设置启用它，具体操作如下：\n\n<!-- more -->\n\n\n1. 使用 vSphere Client 登录到 vCenter Server 系统并选择虚拟机，虚拟机要在关闭状态下。\n\n2. 选中虚拟机，单击右键编辑设置。\n\n3. 选择选项 > 高级 > 常规，然后单击配置参数。\n\n4. 单击添加行，并在“名称”和“值”列中键入以下值。名称值\n\n\t    isolation.tools.copy.disable     false\n\t    isolation.tools.paste.disable    false\n\n5. 单击确定以关闭“配置参数”对话框，然后再次单击确定以关闭“虚拟机属性”对话框。\n\n6. 重新启动虚拟机。\n","source":"_posts/2016-07-12-vmvare-vsphere-share-plate.md","raw":"---\ntitle: Vmware vSphere虚拟机与主机共享剪贴板  \ncategories : other\ntags : [Vmware]\n---\n\n默认情况下，Vmware vSphere已禁用针对ESXESXi的复制和粘贴操作，以防止公开已复制到剪贴板中的敏感数据。其实可以通过设置启用它，具体操作如下：\n\n<!-- more -->\n\n\n1. 使用 vSphere Client 登录到 vCenter Server 系统并选择虚拟机，虚拟机要在关闭状态下。\n\n2. 选中虚拟机，单击右键编辑设置。\n\n3. 选择选项 > 高级 > 常规，然后单击配置参数。\n\n4. 单击添加行，并在“名称”和“值”列中键入以下值。名称值\n\n\t    isolation.tools.copy.disable     false\n\t    isolation.tools.paste.disable    false\n\n5. 单击确定以关闭“配置参数”对话框，然后再次单击确定以关闭“虚拟机属性”对话框。\n\n6. 重新启动虚拟机。\n","slug":"2016-07-12-vmvare-vsphere-share-plate","published":1,"date":"2016-07-15T12:55:58.524Z","updated":"2016-07-15T12:55:58.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qld6000dpq8a5768u0di","content":"<p>默认情况下，Vmware vSphere已禁用针对ESXESXi的复制和粘贴操作，以防止公开已复制到剪贴板中的敏感数据。其实可以通过设置启用它，具体操作如下：</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>使用 vSphere Client 登录到 vCenter Server 系统并选择虚拟机，虚拟机要在关闭状态下。</p>\n</li>\n<li><p>选中虚拟机，单击右键编辑设置。</p>\n</li>\n<li><p>选择选项 &gt; 高级 &gt; 常规，然后单击配置参数。</p>\n</li>\n<li><p>单击添加行，并在“名称”和“值”列中键入以下值。名称值</p>\n<pre><code>isolation.tools.copy.disable     false\nisolation.tools.paste.disable    false\n</code></pre></li>\n<li><p>单击确定以关闭“配置参数”对话框，然后再次单击确定以关闭“虚拟机属性”对话框。</p>\n</li>\n<li><p>重新启动虚拟机。</p>\n</li>\n</ol>\n","excerpt":"<p>默认情况下，Vmware vSphere已禁用针对ESXESXi的复制和粘贴操作，以防止公开已复制到剪贴板中的敏感数据。其实可以通过设置启用它，具体操作如下：</p>","more":"<ol>\n<li><p>使用 vSphere Client 登录到 vCenter Server 系统并选择虚拟机，虚拟机要在关闭状态下。</p>\n</li>\n<li><p>选中虚拟机，单击右键编辑设置。</p>\n</li>\n<li><p>选择选项 &gt; 高级 &gt; 常规，然后单击配置参数。</p>\n</li>\n<li><p>单击添加行，并在“名称”和“值”列中键入以下值。名称值</p>\n<pre><code>isolation.tools.copy.disable     false\nisolation.tools.paste.disable    false\n</code></pre></li>\n<li><p>单击确定以关闭“配置参数”对话框，然后再次单击确定以关闭“虚拟机属性”对话框。</p>\n</li>\n<li><p>重新启动虚拟机。</p>\n</li>\n</ol>"},{"title":"Notes","_content":"\n本文主要记录平时遇到的一些杂碎的东西。\n\n<!-- more -->\n\n## Python实现xslt\n~~~\n#!/usr/bin/env python3\n# coding=utf-8\n# Created Time: 2016-06-20\n\n__author__ = 'Matthew Gao'\n\nimport lxml.etree as ET\nimport pprint\n\n\n\ndef parse():\n    pp = pprint.PrettyPrinter(indent=4)\n    xml_filename = 'amc_one_of_everything.xml'\n    xsl_filename = 'phonehometranslator.xsl'\n\n    dom = ET.parse(xml_filename)\n    xslt = ET.parse(xsl_filename)\n    transform = ET.XSLT(xslt)\n    newdom = transform(dom)\n    # print(ET.tostring(newdom, pretty_print=True))\n    pp.pprint(ET.tostring(newdom, pretty_print=True).decode())\n\n    print(transform.error_log)\n\n    for entry in transform.error_log:\n        print('message from line %s, col %s: %s' % (entry.line, entry.column, entry.message))\n        print('domain: %s (%d)' % (entry.domain_name, entry.domain))\n        print('type: %s (%d)' % (entry.type_name, entry.type))\n        print('level: %s (%d)' % (entry.level_name, entry.level))\n        print('filename: %s' % entry.filename)\n\nif __name__ == \"__main__\":\n    parse()\n~~~\n\n---\n\n## java依赖第三方jar包调用方法\n~~~\njava -cp .:mysql-connector-java-5.1.39-bin.jar extensions.PersonalBookmarks\njava -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Transform app\njava -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Runtime\n~~~","source":"_posts/2016-07-16-Notes.md","raw":"---\ntitle: Notes\ncategories : other\ntags : [samba]\n---\n\n本文主要记录平时遇到的一些杂碎的东西。\n\n<!-- more -->\n\n## Python实现xslt\n~~~\n#!/usr/bin/env python3\n# coding=utf-8\n# Created Time: 2016-06-20\n\n__author__ = 'Matthew Gao'\n\nimport lxml.etree as ET\nimport pprint\n\n\n\ndef parse():\n    pp = pprint.PrettyPrinter(indent=4)\n    xml_filename = 'amc_one_of_everything.xml'\n    xsl_filename = 'phonehometranslator.xsl'\n\n    dom = ET.parse(xml_filename)\n    xslt = ET.parse(xsl_filename)\n    transform = ET.XSLT(xslt)\n    newdom = transform(dom)\n    # print(ET.tostring(newdom, pretty_print=True))\n    pp.pprint(ET.tostring(newdom, pretty_print=True).decode())\n\n    print(transform.error_log)\n\n    for entry in transform.error_log:\n        print('message from line %s, col %s: %s' % (entry.line, entry.column, entry.message))\n        print('domain: %s (%d)' % (entry.domain_name, entry.domain))\n        print('type: %s (%d)' % (entry.type_name, entry.type))\n        print('level: %s (%d)' % (entry.level_name, entry.level))\n        print('filename: %s' % entry.filename)\n\nif __name__ == \"__main__\":\n    parse()\n~~~\n\n---\n\n## java依赖第三方jar包调用方法\n~~~\njava -cp .:mysql-connector-java-5.1.39-bin.jar extensions.PersonalBookmarks\njava -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Transform app\njava -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Runtime\n~~~","slug":"2016-07-16-Notes","published":1,"date":"2016-07-26T08:58:36.285Z","updated":"2016-07-26T08:58:36.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qldg000hpq8adxfky5t5","content":"<p>本文主要记录平时遇到的一些杂碎的东西。</p>\n<a id=\"more\"></a>\n<h2 id=\"Python实现xslt\"><a href=\"#Python实现xslt\" class=\"headerlink\" title=\"Python实现xslt\"></a>Python实现xslt</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python3</div><div class=\"line\"># coding=utf-8</div><div class=\"line\"># Created Time: 2016-06-20</div><div class=\"line\"></div><div class=\"line\">__author__ = &apos;Matthew Gao&apos;</div><div class=\"line\"></div><div class=\"line\">import lxml.etree as ET</div><div class=\"line\">import pprint</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def parse():</div><div class=\"line\">    pp = pprint.PrettyPrinter(indent=4)</div><div class=\"line\">    xml_filename = &apos;amc_one_of_everything.xml&apos;</div><div class=\"line\">    xsl_filename = &apos;phonehometranslator.xsl&apos;</div><div class=\"line\"></div><div class=\"line\">    dom = ET.parse(xml_filename)</div><div class=\"line\">    xslt = ET.parse(xsl_filename)</div><div class=\"line\">    transform = ET.XSLT(xslt)</div><div class=\"line\">    newdom = transform(dom)</div><div class=\"line\">    # print(ET.tostring(newdom, pretty_print=True))</div><div class=\"line\">    pp.pprint(ET.tostring(newdom, pretty_print=True).decode())</div><div class=\"line\"></div><div class=\"line\">    print(transform.error_log)</div><div class=\"line\"></div><div class=\"line\">    for entry in transform.error_log:</div><div class=\"line\">        print(&apos;message from line %s, col %s: %s&apos; % (entry.line, entry.column, entry.message))</div><div class=\"line\">        print(&apos;domain: %s (%d)&apos; % (entry.domain_name, entry.domain))</div><div class=\"line\">        print(&apos;type: %s (%d)&apos; % (entry.type_name, entry.type))</div><div class=\"line\">        print(&apos;level: %s (%d)&apos; % (entry.level_name, entry.level))</div><div class=\"line\">        print(&apos;filename: %s&apos; % entry.filename)</div><div class=\"line\"></div><div class=\"line\">if __name__ == &quot;__main__&quot;:</div><div class=\"line\">    parse()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"java依赖第三方jar包调用方法\"><a href=\"#java依赖第三方jar包调用方法\" class=\"headerlink\" title=\"java依赖第三方jar包调用方法\"></a>java依赖第三方jar包调用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -cp .:mysql-connector-java-5.1.39-bin.jar extensions.PersonalBookmarks</div><div class=\"line\">java -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Transform app</div><div class=\"line\">java -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Runtime</div></pre></td></tr></table></figure>","excerpt":"<p>本文主要记录平时遇到的一些杂碎的东西。</p>","more":"<h2 id=\"Python实现xslt\"><a href=\"#Python实现xslt\" class=\"headerlink\" title=\"Python实现xslt\"></a>Python实现xslt</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python3</div><div class=\"line\"># coding=utf-8</div><div class=\"line\"># Created Time: 2016-06-20</div><div class=\"line\"></div><div class=\"line\">__author__ = &apos;Matthew Gao&apos;</div><div class=\"line\"></div><div class=\"line\">import lxml.etree as ET</div><div class=\"line\">import pprint</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def parse():</div><div class=\"line\">    pp = pprint.PrettyPrinter(indent=4)</div><div class=\"line\">    xml_filename = &apos;amc_one_of_everything.xml&apos;</div><div class=\"line\">    xsl_filename = &apos;phonehometranslator.xsl&apos;</div><div class=\"line\"></div><div class=\"line\">    dom = ET.parse(xml_filename)</div><div class=\"line\">    xslt = ET.parse(xsl_filename)</div><div class=\"line\">    transform = ET.XSLT(xslt)</div><div class=\"line\">    newdom = transform(dom)</div><div class=\"line\">    # print(ET.tostring(newdom, pretty_print=True))</div><div class=\"line\">    pp.pprint(ET.tostring(newdom, pretty_print=True).decode())</div><div class=\"line\"></div><div class=\"line\">    print(transform.error_log)</div><div class=\"line\"></div><div class=\"line\">    for entry in transform.error_log:</div><div class=\"line\">        print(&apos;message from line %s, col %s: %s&apos; % (entry.line, entry.column, entry.message))</div><div class=\"line\">        print(&apos;domain: %s (%d)&apos; % (entry.domain_name, entry.domain))</div><div class=\"line\">        print(&apos;type: %s (%d)&apos; % (entry.type_name, entry.type))</div><div class=\"line\">        print(&apos;level: %s (%d)&apos; % (entry.level_name, entry.level))</div><div class=\"line\">        print(&apos;filename: %s&apos; % entry.filename)</div><div class=\"line\"></div><div class=\"line\">if __name__ == &quot;__main__&quot;:</div><div class=\"line\">    parse()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"java依赖第三方jar包调用方法\"><a href=\"#java依赖第三方jar包调用方法\" class=\"headerlink\" title=\"java依赖第三方jar包调用方法\"></a>java依赖第三方jar包调用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -cp .:mysql-connector-java-5.1.39-bin.jar extensions.PersonalBookmarks</div><div class=\"line\">java -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Transform app</div><div class=\"line\">java -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Runtime</div></pre></td></tr></table></figure>"},{"title":"用xalan解析xml文件","_content":"\nXSLT 是一种基于规则的格式转换语言。在许多人眼里,它的功能就是将一种格式的 xml 文件转换成另外一种格式的 xml 或 html 文件，仅此而已。不过，事实真是这样吗？\n\n<!-- more -->\n\n其实 XSLT 能够做的事情很多，绝对超乎你的想象。除了格式转换，XSLT 还能完成一些看起来和格式转换完全无关的工作。比如说文件访问或者是数据库查询等等。而这一切都要归功于 XSLT 扩展（XSLT Extension）。\n根据 XSLT 1.0 的规范，符合标准的 XSLT 引擎应该支持 XSLT 扩展。也就是允许用户自定义 XSLT 的扩展元素（extension elements）和函数(extension functions)。今天我们所看到的主流 XSLT 引擎都按照国际标准，提供了自己的扩展方式。而开源软件中的 saxaon 和 xalan，在这方面走得更远。\nSaxon 和 xalan 都是基于 java 开发的 XSLT 引擎，为它们编写扩展自然也基于 java。一般只要以下 3 步就可以完成一个扩展了。\n\n1. 编写一个 java 类，在这个类里面设计好扩展功能，并以**静态方法**的形式提供给XSLT 引擎调用。\n2. 在 XSLT 文件中，声明一个自定义的命名空间（namespace）,该命名空间指出了类的位置\n3. 在 XSLT 文件中，在适当的地方，调用扩展即可。\n\n本文主要运用的是xalan, xalan是ASF的项目，可以访问其官网进行了解：[https://xalan.apache.org](https://xalan.apache.org/)\n关于xalan的使用这个网站可以参考一下（这个网站上面的例子试了不成功）：[http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html](http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html)\n\n## 一. xalan 包\n\nxalan有两种版本，分别是基于C++和Java来实现， 本文采用Java版本，有关xalan包的信息可以去官网进行查阅，找到对应的版本进行下载。本文使用的包是 [Xalan-Java 2.7.2二进制包](http://www-us.apache.org/dist/xalan/xalan-j/binaries/).\n将包下载之后，需要安装java相关的依赖。\n\n\n## 二. 解析xml\n\n新建一个java文件SimpleTransform.java,添加如下内容\n\n~~~\n//import needed xalan packages\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerConfigurationException;\n\n//import needed java packages\nimport java.io.FileOutputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class SimpleTransform\n{\n    public static void main(String[] args)\n    throws TransformerException, TransformerConfigurationException, \n           FileNotFoundException, IOException\n    {  \n        //create a transformer factory class.\n        TransformerFactory tFactory = TransformerFactory.newInstance();\n\n        //create an instance using the factory class\n        Transformer transformer = tFactory.newTransformer(new StreamSource(\"phonehometranslator.xsl\"));\n\n        //call function transform from class transformer to complete conversion\n        transformer.transform(new StreamSource(\"amc_one_of_everything.xml\"), new StreamResult(new FileOutputStream(\"out.xml\")));\n\n        //print the message telling user that the conversion is done. \n        System.out.println(\"************* The result is in out.xml*************\");\n    }\n}\n~~~\n\n这个文件的作用是将 amc_one_of_everything.xml 根据 phonehometranslator.xsl 解析成 out.xml .\n如果解析成功的话会在console上输出: ”The result is in out.xml“;\n如果出错的话会给出错误提示信息，错误提示信息相对python上面的lxml解析器还是更友好些的。\n接着就是编译这个文件（之前下载的xalan包要放在SimpleTransform.java同一路径下，这样方便调用）\n~~~\njavac SimpleTransform.java\n~~~\n编译成功会生成SimpleTransform.class, 接下来就可以进行转换啦～～运行\n~~~\njava SimpleTransform\n~~~\n不出意外的话就可以看到转换后的结果了，当然前提是所写的xsl文件没有问题～\n\n\n## 三. 在xsl中调用自定义的java函数\n\n想要调用java函数，就像本文开头说的那样，总共分三步。\n\n### 1.编写java类\n\n新建文件extFunc.java,向其中加入以下内容：\n~~~\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class extFunc{\n    private static ArrayList<Integer> valueList = new ArrayList<Integer>();\n\n    //reset sum and valueList\n    public static int reset() {\n        valueList.clear();\n        return 1;\n    }\n\n    public static int calc() {\n        if(valueList.size() > 0) {\n            Collections.sort(valueList);\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    public static int insert(int val) {\n        valueList.add(val);\n\n        return 1;\n    }\n\n    public static int getMax() {\n        return valueList.get(valueList.size()-1);\n    }\n\t\n    public static int getMin() {\n        return valueList.get(0);\n    }\n\n    public static int getMedium() {\n        return valueList.get(valueList.size()/2);\n    }\n}\n~~~\n注意其中的静态方法就是给后面的xsl文件调用的。这个文件中函数的简单介绍为：\nxsl文件调用insert函数插入数值到ArrayList中，然后getMax,getMin,getMedium分别是获取ArrayList中所有数值的最大值、最小值、和中位数。calc主要就是将ArrayList排序，方便取得最大值、最小值和中位数。\nreset就不用解释了～\n然后同样编译这个文件：\n~~~\njavac extFunc.java\n~~~\n\n### 2.xsl命名空间\n想要调用extFunc类中的文件，需要在xsl文件中将其引用进来，具体看下面的代码：\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" \n    xmlns:myext=\"extFunc\"\n    exclude-result-prefixes=\"myext\">\n\n    .\n    .\n    .\n\n</xsl:stylesheet>\n~~~\nxmlns:myext=\"extFunc\"就是将类引入，exclude-result-prefixes=\"myext\"声明调用的前缀。\n\n### 3.调用\n下面编写一个例子来调用extFunc类中的函数。\n在phonehometranslator.xsl文件中写入如下内容\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" \n    xmlns:myext=\"extFunc\"\n    exclude-result-prefixes=\"myext\">\n\n    <xsl:if test=\"myext:insert(1)\" />\n    <xsl:if test=\"myext:insert(2)\" />\n    <xsl:if test=\"myext:insert(3)\" />\n    <xsl:if test=\"myext:insert(4)\" />\n    \n    <xsl:if test=\"myext:calc()\" />\n    \n    <test>\n        <max>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"myext:getMax()\" />\n            </xsl:attribute>\n        </max>\n        <min>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"myext:getMin()\" />\n            </xsl:attribute>\n        </min>\n        <medium>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"myext:getMedium()\" />\n            </xsl:attribute>\n        </medium>\n    </test>\n\n</xsl:stylesheet>\n~~~\n这段代码如果没有问题的话，执行\n~~~\njava SimpleTransform\n~~~\n如果没有错误的话，理应得到的xml文件内容为：\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<test>\n<max value=\"4\"/>\n<min value=\"1\"/>\n<medium count=\"2\">\n</test>\n~~~\n\n\nxalan调用java函数的功能还是很强大的，更多的内容请自行探索～～","source":"_posts/2016-07-20-ASF-xalan.md","raw":"---\ntitle: 用xalan解析xml文件\ncategories : xslt\ntags : [xml,xalan,xsl,xslt,xpath]\n---\n\nXSLT 是一种基于规则的格式转换语言。在许多人眼里,它的功能就是将一种格式的 xml 文件转换成另外一种格式的 xml 或 html 文件，仅此而已。不过，事实真是这样吗？\n\n<!-- more -->\n\n其实 XSLT 能够做的事情很多，绝对超乎你的想象。除了格式转换，XSLT 还能完成一些看起来和格式转换完全无关的工作。比如说文件访问或者是数据库查询等等。而这一切都要归功于 XSLT 扩展（XSLT Extension）。\n根据 XSLT 1.0 的规范，符合标准的 XSLT 引擎应该支持 XSLT 扩展。也就是允许用户自定义 XSLT 的扩展元素（extension elements）和函数(extension functions)。今天我们所看到的主流 XSLT 引擎都按照国际标准，提供了自己的扩展方式。而开源软件中的 saxaon 和 xalan，在这方面走得更远。\nSaxon 和 xalan 都是基于 java 开发的 XSLT 引擎，为它们编写扩展自然也基于 java。一般只要以下 3 步就可以完成一个扩展了。\n\n1. 编写一个 java 类，在这个类里面设计好扩展功能，并以**静态方法**的形式提供给XSLT 引擎调用。\n2. 在 XSLT 文件中，声明一个自定义的命名空间（namespace）,该命名空间指出了类的位置\n3. 在 XSLT 文件中，在适当的地方，调用扩展即可。\n\n本文主要运用的是xalan, xalan是ASF的项目，可以访问其官网进行了解：[https://xalan.apache.org](https://xalan.apache.org/)\n关于xalan的使用这个网站可以参考一下（这个网站上面的例子试了不成功）：[http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html](http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html)\n\n## 一. xalan 包\n\nxalan有两种版本，分别是基于C++和Java来实现， 本文采用Java版本，有关xalan包的信息可以去官网进行查阅，找到对应的版本进行下载。本文使用的包是 [Xalan-Java 2.7.2二进制包](http://www-us.apache.org/dist/xalan/xalan-j/binaries/).\n将包下载之后，需要安装java相关的依赖。\n\n\n## 二. 解析xml\n\n新建一个java文件SimpleTransform.java,添加如下内容\n\n~~~\n//import needed xalan packages\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerConfigurationException;\n\n//import needed java packages\nimport java.io.FileOutputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class SimpleTransform\n{\n    public static void main(String[] args)\n    throws TransformerException, TransformerConfigurationException, \n           FileNotFoundException, IOException\n    {  \n        //create a transformer factory class.\n        TransformerFactory tFactory = TransformerFactory.newInstance();\n\n        //create an instance using the factory class\n        Transformer transformer = tFactory.newTransformer(new StreamSource(\"phonehometranslator.xsl\"));\n\n        //call function transform from class transformer to complete conversion\n        transformer.transform(new StreamSource(\"amc_one_of_everything.xml\"), new StreamResult(new FileOutputStream(\"out.xml\")));\n\n        //print the message telling user that the conversion is done. \n        System.out.println(\"************* The result is in out.xml*************\");\n    }\n}\n~~~\n\n这个文件的作用是将 amc_one_of_everything.xml 根据 phonehometranslator.xsl 解析成 out.xml .\n如果解析成功的话会在console上输出: ”The result is in out.xml“;\n如果出错的话会给出错误提示信息，错误提示信息相对python上面的lxml解析器还是更友好些的。\n接着就是编译这个文件（之前下载的xalan包要放在SimpleTransform.java同一路径下，这样方便调用）\n~~~\njavac SimpleTransform.java\n~~~\n编译成功会生成SimpleTransform.class, 接下来就可以进行转换啦～～运行\n~~~\njava SimpleTransform\n~~~\n不出意外的话就可以看到转换后的结果了，当然前提是所写的xsl文件没有问题～\n\n\n## 三. 在xsl中调用自定义的java函数\n\n想要调用java函数，就像本文开头说的那样，总共分三步。\n\n### 1.编写java类\n\n新建文件extFunc.java,向其中加入以下内容：\n~~~\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class extFunc{\n    private static ArrayList<Integer> valueList = new ArrayList<Integer>();\n\n    //reset sum and valueList\n    public static int reset() {\n        valueList.clear();\n        return 1;\n    }\n\n    public static int calc() {\n        if(valueList.size() > 0) {\n            Collections.sort(valueList);\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    public static int insert(int val) {\n        valueList.add(val);\n\n        return 1;\n    }\n\n    public static int getMax() {\n        return valueList.get(valueList.size()-1);\n    }\n\t\n    public static int getMin() {\n        return valueList.get(0);\n    }\n\n    public static int getMedium() {\n        return valueList.get(valueList.size()/2);\n    }\n}\n~~~\n注意其中的静态方法就是给后面的xsl文件调用的。这个文件中函数的简单介绍为：\nxsl文件调用insert函数插入数值到ArrayList中，然后getMax,getMin,getMedium分别是获取ArrayList中所有数值的最大值、最小值、和中位数。calc主要就是将ArrayList排序，方便取得最大值、最小值和中位数。\nreset就不用解释了～\n然后同样编译这个文件：\n~~~\njavac extFunc.java\n~~~\n\n### 2.xsl命名空间\n想要调用extFunc类中的文件，需要在xsl文件中将其引用进来，具体看下面的代码：\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" \n    xmlns:myext=\"extFunc\"\n    exclude-result-prefixes=\"myext\">\n\n    .\n    .\n    .\n\n</xsl:stylesheet>\n~~~\nxmlns:myext=\"extFunc\"就是将类引入，exclude-result-prefixes=\"myext\"声明调用的前缀。\n\n### 3.调用\n下面编写一个例子来调用extFunc类中的函数。\n在phonehometranslator.xsl文件中写入如下内容\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" \n    xmlns:myext=\"extFunc\"\n    exclude-result-prefixes=\"myext\">\n\n    <xsl:if test=\"myext:insert(1)\" />\n    <xsl:if test=\"myext:insert(2)\" />\n    <xsl:if test=\"myext:insert(3)\" />\n    <xsl:if test=\"myext:insert(4)\" />\n    \n    <xsl:if test=\"myext:calc()\" />\n    \n    <test>\n        <max>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"myext:getMax()\" />\n            </xsl:attribute>\n        </max>\n        <min>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"myext:getMin()\" />\n            </xsl:attribute>\n        </min>\n        <medium>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"myext:getMedium()\" />\n            </xsl:attribute>\n        </medium>\n    </test>\n\n</xsl:stylesheet>\n~~~\n这段代码如果没有问题的话，执行\n~~~\njava SimpleTransform\n~~~\n如果没有错误的话，理应得到的xml文件内容为：\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<test>\n<max value=\"4\"/>\n<min value=\"1\"/>\n<medium count=\"2\">\n</test>\n~~~\n\n\nxalan调用java函数的功能还是很强大的，更多的内容请自行探索～～","slug":"2016-07-20-ASF-xalan","published":1,"date":"2016-07-20T10:51:28.831Z","updated":"2016-07-20T10:51:28.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qldk000kpq8a174euubx","content":"<p>XSLT 是一种基于规则的格式转换语言。在许多人眼里,它的功能就是将一种格式的 xml 文件转换成另外一种格式的 xml 或 html 文件，仅此而已。不过，事实真是这样吗？</p>\n<a id=\"more\"></a>\n<p>其实 XSLT 能够做的事情很多，绝对超乎你的想象。除了格式转换，XSLT 还能完成一些看起来和格式转换完全无关的工作。比如说文件访问或者是数据库查询等等。而这一切都要归功于 XSLT 扩展（XSLT Extension）。<br>根据 XSLT 1.0 的规范，符合标准的 XSLT 引擎应该支持 XSLT 扩展。也就是允许用户自定义 XSLT 的扩展元素（extension elements）和函数(extension functions)。今天我们所看到的主流 XSLT 引擎都按照国际标准，提供了自己的扩展方式。而开源软件中的 saxaon 和 xalan，在这方面走得更远。<br>Saxon 和 xalan 都是基于 java 开发的 XSLT 引擎，为它们编写扩展自然也基于 java。一般只要以下 3 步就可以完成一个扩展了。</p>\n<ol>\n<li>编写一个 java 类，在这个类里面设计好扩展功能，并以<strong>静态方法</strong>的形式提供给XSLT 引擎调用。</li>\n<li>在 XSLT 文件中，声明一个自定义的命名空间（namespace）,该命名空间指出了类的位置</li>\n<li>在 XSLT 文件中，在适当的地方，调用扩展即可。</li>\n</ol>\n<p>本文主要运用的是xalan, xalan是ASF的项目，可以访问其官网进行了解：<a href=\"https://xalan.apache.org/\" target=\"_blank\" rel=\"external\">https://xalan.apache.org</a><br>关于xalan的使用这个网站可以参考一下（这个网站上面的例子试了不成功）：<a href=\"http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html\" target=\"_blank\" rel=\"external\">http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html</a></p>\n<h2 id=\"一-xalan-包\"><a href=\"#一-xalan-包\" class=\"headerlink\" title=\"一. xalan 包\"></a>一. xalan 包</h2><p>xalan有两种版本，分别是基于C++和Java来实现， 本文采用Java版本，有关xalan包的信息可以去官网进行查阅，找到对应的版本进行下载。本文使用的包是 <a href=\"http://www-us.apache.org/dist/xalan/xalan-j/binaries/\" target=\"_blank\" rel=\"external\">Xalan-Java 2.7.2二进制包</a>.<br>将包下载之后，需要安装java相关的依赖。</p>\n<h2 id=\"二-解析xml\"><a href=\"#二-解析xml\" class=\"headerlink\" title=\"二. 解析xml\"></a>二. 解析xml</h2><p>新建一个java文件SimpleTransform.java,添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">//import needed xalan packages</div><div class=\"line\">import javax.xml.transform.TransformerFactory;</div><div class=\"line\">import javax.xml.transform.Transformer;</div><div class=\"line\">import javax.xml.transform.stream.StreamSource;</div><div class=\"line\">import javax.xml.transform.stream.StreamResult;</div><div class=\"line\">import javax.xml.transform.TransformerException;</div><div class=\"line\">import javax.xml.transform.TransformerConfigurationException;</div><div class=\"line\"></div><div class=\"line\">//import needed java packages</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\">import java.io.FileNotFoundException;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\"></div><div class=\"line\">public class SimpleTransform</div><div class=\"line\">&#123;</div><div class=\"line\">    public static void main(String[] args)</div><div class=\"line\">    throws TransformerException, TransformerConfigurationException, </div><div class=\"line\">           FileNotFoundException, IOException</div><div class=\"line\">    &#123;  </div><div class=\"line\">        //create a transformer factory class.</div><div class=\"line\">        TransformerFactory tFactory = TransformerFactory.newInstance();</div><div class=\"line\"></div><div class=\"line\">        //create an instance using the factory class</div><div class=\"line\">        Transformer transformer = tFactory.newTransformer(new StreamSource(&quot;phonehometranslator.xsl&quot;));</div><div class=\"line\"></div><div class=\"line\">        //call function transform from class transformer to complete conversion</div><div class=\"line\">        transformer.transform(new StreamSource(&quot;amc_one_of_everything.xml&quot;), new StreamResult(new FileOutputStream(&quot;out.xml&quot;)));</div><div class=\"line\"></div><div class=\"line\">        //print the message telling user that the conversion is done. </div><div class=\"line\">        System.out.println(&quot;************* The result is in out.xml*************&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个文件的作用是将 amc_one_of_everything.xml 根据 phonehometranslator.xsl 解析成 out.xml .<br>如果解析成功的话会在console上输出: ”The result is in out.xml“;<br>如果出错的话会给出错误提示信息，错误提示信息相对python上面的lxml解析器还是更友好些的。<br>接着就是编译这个文件（之前下载的xalan包要放在SimpleTransform.java同一路径下，这样方便调用）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac SimpleTransform.java</div></pre></td></tr></table></figure></p>\n<p>编译成功会生成SimpleTransform.class, 接下来就可以进行转换啦～～运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java SimpleTransform</div></pre></td></tr></table></figure></p>\n<p>不出意外的话就可以看到转换后的结果了，当然前提是所写的xsl文件没有问题～</p>\n<h2 id=\"三-在xsl中调用自定义的java函数\"><a href=\"#三-在xsl中调用自定义的java函数\" class=\"headerlink\" title=\"三. 在xsl中调用自定义的java函数\"></a>三. 在xsl中调用自定义的java函数</h2><p>想要调用java函数，就像本文开头说的那样，总共分三步。</p>\n<h3 id=\"1-编写java类\"><a href=\"#1-编写java类\" class=\"headerlink\" title=\"1.编写java类\"></a>1.编写java类</h3><p>新建文件extFunc.java,向其中加入以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.Collections;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">public class extFunc&#123;</div><div class=\"line\">    private static ArrayList&lt;Integer&gt; valueList = new ArrayList&lt;Integer&gt;();</div><div class=\"line\"></div><div class=\"line\">    //reset sum and valueList</div><div class=\"line\">    public static int reset() &#123;</div><div class=\"line\">        valueList.clear();</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int calc() &#123;</div><div class=\"line\">        if(valueList.size() &gt; 0) &#123;</div><div class=\"line\">            Collections.sort(valueList);</div><div class=\"line\">            return 1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int insert(int val) &#123;</div><div class=\"line\">        valueList.add(val);</div><div class=\"line\"></div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int getMax() &#123;</div><div class=\"line\">        return valueList.get(valueList.size()-1);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    public static int getMin() &#123;</div><div class=\"line\">        return valueList.get(0);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int getMedium() &#123;</div><div class=\"line\">        return valueList.get(valueList.size()/2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意其中的静态方法就是给后面的xsl文件调用的。这个文件中函数的简单介绍为：<br>xsl文件调用insert函数插入数值到ArrayList中，然后getMax,getMin,getMedium分别是获取ArrayList中所有数值的最大值、最小值、和中位数。calc主要就是将ArrayList排序，方便取得最大值、最小值和中位数。<br>reset就不用解释了～<br>然后同样编译这个文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac extFunc.java</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-xsl命名空间\"><a href=\"#2-xsl命名空间\" class=\"headerlink\" title=\"2.xsl命名空间\"></a>2.xsl命名空间</h3><p>想要调用extFunc类中的文件，需要在xsl文件中将其引用进来，具体看下面的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; </div><div class=\"line\">    xmlns:myext=&quot;extFunc&quot;</div><div class=\"line\">    exclude-result-prefixes=&quot;myext&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    .</div><div class=\"line\">    .</div><div class=\"line\">    .</div><div class=\"line\"></div><div class=\"line\">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure></p>\n<p>xmlns:myext=”extFunc”就是将类引入，exclude-result-prefixes=”myext”声明调用的前缀。</p>\n<h3 id=\"3-调用\"><a href=\"#3-调用\" class=\"headerlink\" title=\"3.调用\"></a>3.调用</h3><p>下面编写一个例子来调用extFunc类中的函数。<br>在phonehometranslator.xsl文件中写入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; </div><div class=\"line\">    xmlns:myext=&quot;extFunc&quot;</div><div class=\"line\">    exclude-result-prefixes=&quot;myext&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;xsl:if test=&quot;myext:insert(1)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;myext:insert(2)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;myext:insert(3)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;myext:insert(4)&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;xsl:if test=&quot;myext:calc()&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;test&gt;</div><div class=\"line\">        &lt;max&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;myext:getMax()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/max&gt;</div><div class=\"line\">        &lt;min&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;myext:getMin()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/min&gt;</div><div class=\"line\">        &lt;medium&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;myext:getMedium()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/medium&gt;</div><div class=\"line\">    &lt;/test&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure></p>\n<p>这段代码如果没有问题的话，执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java SimpleTransform</div></pre></td></tr></table></figure></p>\n<p>如果没有错误的话，理应得到的xml文件内容为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;test&gt;</div><div class=\"line\">&lt;max value=&quot;4&quot;/&gt;</div><div class=\"line\">&lt;min value=&quot;1&quot;/&gt;</div><div class=\"line\">&lt;medium count=&quot;2&quot;&gt;</div><div class=\"line\">&lt;/test&gt;</div></pre></td></tr></table></figure></p>\n<p>xalan调用java函数的功能还是很强大的，更多的内容请自行探索～～</p>\n","excerpt":"<p>XSLT 是一种基于规则的格式转换语言。在许多人眼里,它的功能就是将一种格式的 xml 文件转换成另外一种格式的 xml 或 html 文件，仅此而已。不过，事实真是这样吗？</p>","more":"<p>其实 XSLT 能够做的事情很多，绝对超乎你的想象。除了格式转换，XSLT 还能完成一些看起来和格式转换完全无关的工作。比如说文件访问或者是数据库查询等等。而这一切都要归功于 XSLT 扩展（XSLT Extension）。<br>根据 XSLT 1.0 的规范，符合标准的 XSLT 引擎应该支持 XSLT 扩展。也就是允许用户自定义 XSLT 的扩展元素（extension elements）和函数(extension functions)。今天我们所看到的主流 XSLT 引擎都按照国际标准，提供了自己的扩展方式。而开源软件中的 saxaon 和 xalan，在这方面走得更远。<br>Saxon 和 xalan 都是基于 java 开发的 XSLT 引擎，为它们编写扩展自然也基于 java。一般只要以下 3 步就可以完成一个扩展了。</p>\n<ol>\n<li>编写一个 java 类，在这个类里面设计好扩展功能，并以<strong>静态方法</strong>的形式提供给XSLT 引擎调用。</li>\n<li>在 XSLT 文件中，声明一个自定义的命名空间（namespace）,该命名空间指出了类的位置</li>\n<li>在 XSLT 文件中，在适当的地方，调用扩展即可。</li>\n</ol>\n<p>本文主要运用的是xalan, xalan是ASF的项目，可以访问其官网进行了解：<a href=\"https://xalan.apache.org/\">https://xalan.apache.org</a><br>关于xalan的使用这个网站可以参考一下（这个网站上面的例子试了不成功）：<a href=\"http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html\">http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html</a></p>\n<h2 id=\"一-xalan-包\"><a href=\"#一-xalan-包\" class=\"headerlink\" title=\"一. xalan 包\"></a>一. xalan 包</h2><p>xalan有两种版本，分别是基于C++和Java来实现， 本文采用Java版本，有关xalan包的信息可以去官网进行查阅，找到对应的版本进行下载。本文使用的包是 <a href=\"http://www-us.apache.org/dist/xalan/xalan-j/binaries/\">Xalan-Java 2.7.2二进制包</a>.<br>将包下载之后，需要安装java相关的依赖。</p>\n<h2 id=\"二-解析xml\"><a href=\"#二-解析xml\" class=\"headerlink\" title=\"二. 解析xml\"></a>二. 解析xml</h2><p>新建一个java文件SimpleTransform.java,添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">//import needed xalan packages</div><div class=\"line\">import javax.xml.transform.TransformerFactory;</div><div class=\"line\">import javax.xml.transform.Transformer;</div><div class=\"line\">import javax.xml.transform.stream.StreamSource;</div><div class=\"line\">import javax.xml.transform.stream.StreamResult;</div><div class=\"line\">import javax.xml.transform.TransformerException;</div><div class=\"line\">import javax.xml.transform.TransformerConfigurationException;</div><div class=\"line\"></div><div class=\"line\">//import needed java packages</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\">import java.io.FileNotFoundException;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\"></div><div class=\"line\">public class SimpleTransform</div><div class=\"line\">&#123;</div><div class=\"line\">    public static void main(String[] args)</div><div class=\"line\">    throws TransformerException, TransformerConfigurationException, </div><div class=\"line\">           FileNotFoundException, IOException</div><div class=\"line\">    &#123;  </div><div class=\"line\">        //create a transformer factory class.</div><div class=\"line\">        TransformerFactory tFactory = TransformerFactory.newInstance();</div><div class=\"line\"></div><div class=\"line\">        //create an instance using the factory class</div><div class=\"line\">        Transformer transformer = tFactory.newTransformer(new StreamSource(&quot;phonehometranslator.xsl&quot;));</div><div class=\"line\"></div><div class=\"line\">        //call function transform from class transformer to complete conversion</div><div class=\"line\">        transformer.transform(new StreamSource(&quot;amc_one_of_everything.xml&quot;), new StreamResult(new FileOutputStream(&quot;out.xml&quot;)));</div><div class=\"line\"></div><div class=\"line\">        //print the message telling user that the conversion is done. </div><div class=\"line\">        System.out.println(&quot;************* The result is in out.xml*************&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个文件的作用是将 amc_one_of_everything.xml 根据 phonehometranslator.xsl 解析成 out.xml .<br>如果解析成功的话会在console上输出: ”The result is in out.xml“;<br>如果出错的话会给出错误提示信息，错误提示信息相对python上面的lxml解析器还是更友好些的。<br>接着就是编译这个文件（之前下载的xalan包要放在SimpleTransform.java同一路径下，这样方便调用）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac SimpleTransform.java</div></pre></td></tr></table></figure></p>\n<p>编译成功会生成SimpleTransform.class, 接下来就可以进行转换啦～～运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java SimpleTransform</div></pre></td></tr></table></figure></p>\n<p>不出意外的话就可以看到转换后的结果了，当然前提是所写的xsl文件没有问题～</p>\n<h2 id=\"三-在xsl中调用自定义的java函数\"><a href=\"#三-在xsl中调用自定义的java函数\" class=\"headerlink\" title=\"三. 在xsl中调用自定义的java函数\"></a>三. 在xsl中调用自定义的java函数</h2><p>想要调用java函数，就像本文开头说的那样，总共分三步。</p>\n<h3 id=\"1-编写java类\"><a href=\"#1-编写java类\" class=\"headerlink\" title=\"1.编写java类\"></a>1.编写java类</h3><p>新建文件extFunc.java,向其中加入以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.Collections;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">public class extFunc&#123;</div><div class=\"line\">    private static ArrayList&lt;Integer&gt; valueList = new ArrayList&lt;Integer&gt;();</div><div class=\"line\"></div><div class=\"line\">    //reset sum and valueList</div><div class=\"line\">    public static int reset() &#123;</div><div class=\"line\">        valueList.clear();</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int calc() &#123;</div><div class=\"line\">        if(valueList.size() &gt; 0) &#123;</div><div class=\"line\">            Collections.sort(valueList);</div><div class=\"line\">            return 1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int insert(int val) &#123;</div><div class=\"line\">        valueList.add(val);</div><div class=\"line\"></div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int getMax() &#123;</div><div class=\"line\">        return valueList.get(valueList.size()-1);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    public static int getMin() &#123;</div><div class=\"line\">        return valueList.get(0);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int getMedium() &#123;</div><div class=\"line\">        return valueList.get(valueList.size()/2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意其中的静态方法就是给后面的xsl文件调用的。这个文件中函数的简单介绍为：<br>xsl文件调用insert函数插入数值到ArrayList中，然后getMax,getMin,getMedium分别是获取ArrayList中所有数值的最大值、最小值、和中位数。calc主要就是将ArrayList排序，方便取得最大值、最小值和中位数。<br>reset就不用解释了～<br>然后同样编译这个文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac extFunc.java</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-xsl命名空间\"><a href=\"#2-xsl命名空间\" class=\"headerlink\" title=\"2.xsl命名空间\"></a>2.xsl命名空间</h3><p>想要调用extFunc类中的文件，需要在xsl文件中将其引用进来，具体看下面的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; </div><div class=\"line\">    xmlns:myext=&quot;extFunc&quot;</div><div class=\"line\">    exclude-result-prefixes=&quot;myext&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    .</div><div class=\"line\">    .</div><div class=\"line\">    .</div><div class=\"line\"></div><div class=\"line\">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure></p>\n<p>xmlns:myext=”extFunc”就是将类引入，exclude-result-prefixes=”myext”声明调用的前缀。</p>\n<h3 id=\"3-调用\"><a href=\"#3-调用\" class=\"headerlink\" title=\"3.调用\"></a>3.调用</h3><p>下面编写一个例子来调用extFunc类中的函数。<br>在phonehometranslator.xsl文件中写入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; </div><div class=\"line\">    xmlns:myext=&quot;extFunc&quot;</div><div class=\"line\">    exclude-result-prefixes=&quot;myext&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;xsl:if test=&quot;myext:insert(1)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;myext:insert(2)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;myext:insert(3)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;myext:insert(4)&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;xsl:if test=&quot;myext:calc()&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;test&gt;</div><div class=\"line\">        &lt;max&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;myext:getMax()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/max&gt;</div><div class=\"line\">        &lt;min&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;myext:getMin()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/min&gt;</div><div class=\"line\">        &lt;medium&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;myext:getMedium()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/medium&gt;</div><div class=\"line\">    &lt;/test&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure></p>\n<p>这段代码如果没有问题的话，执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java SimpleTransform</div></pre></td></tr></table></figure></p>\n<p>如果没有错误的话，理应得到的xml文件内容为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;test&gt;</div><div class=\"line\">&lt;max value=&quot;4&quot;/&gt;</div><div class=\"line\">&lt;min value=&quot;1&quot;/&gt;</div><div class=\"line\">&lt;medium count=&quot;2&quot;&gt;</div><div class=\"line\">&lt;/test&gt;</div></pre></td></tr></table></figure></p>\n<p>xalan调用java函数的功能还是很强大的，更多的内容请自行探索～～</p>"},{"title":"xslt调用java类方法","_content":"\nxslt中可以调用java的类方法，对这种引用了java方法的xslt的解析可以采用java JDK自带的 javax.xml.transform.本文对这种方法进行介绍。\n\n<!-- more -->\n\n主要的步骤为：\n1. 编写待调用的java类**静态方法**\n2. 在xsl文件的开头指定待引用的java类所在的包（如果不声明包的话，就填写类名）\n3. 在xsl文件中通过\"**前缀：类名.方法名**\"的方式来调用\n4. 用java jdk自带的javax.xml.transform类完成xslt转换\n\n本文主要是为了演示怎样在xsl中调用java的方法，所以就不用xsl去转换某个xml文件了，仅仅是解析xsl文件而已。\n本文用到的文件有MaxMinMedium.java、Transform.java、s.xsl等。\n原始文件组织结构为：\n~~~\ntest\n  MaxMinMedium.java\n  Transform.java\n  s.xsl\n  x.xml\n~~~\n \n **声明:**文中代码为说明问题所编写，不保证一定可以运行～\n \n 下面进入主题：\n\n## 1. 编写java类\njava相关的安装事宜可以参考这篇文章：\n[https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get](https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get)\n为了编译java文件，首先需要安装jdk, 在ubantu上面执行：\n~~~\nsudo apt-get install default-jdk\n~~~\n如果要运行java程序需要安装jre：\n~~~\nsudo apt-get install default-jre\n~~~\n\n想要理解本方法，需要对java包有所了解，简单来说java包一定程度上充当了命名空间的角色。本文中定义的java源文件为 MaxMinMedium.java：\n~~~\npackage extensions;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MaxMinMedium {\n    private static ArrayList<Integer> valueList = new ArrayList<Integer>();\n\n    //reset sum and valueList\n    public static boolean reset() {\n        valueList.clear();\n        return true;\n    }\n\n    public static boolean calc() {\n        if(valueList.size() > 0) {\n            Collections.sort(valueList);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static boolean insert(int val) {\n        valueList.add(val);\n\n        return true;\n    }\n\n    public static int getMax() {\n        return valueList.get(valueList.size()-1);\n    }\n\t\n    public static int getMin() {\n        return valueList.get(0);\n    }\n\n    public static int getMedium() {\n        return valueList.get(valueList.size()/2);\n    }\n}\n~~~\n这个文件的开头package extensions是声明了一个extensions的包，在该文件所在的路径下执行：\n~~~\njavac -d . MaxMinMedium.java\n~~~\n将会在当前路径下产生 extensions 文件夹，在这个文件夹下会出现 MaxMinMedium.class 文件，这个就是java编译之后得到的文件。\n\n可以在当前路径下新建其他的java文件，在这些源文件中均声明 package extensions，这样编译后会在extensions文件夹下出现相应的class文件。可以在这些不同的java文件中定义不同的类，各自完成相应的功能。\nMaxMinMedium.java中的方法主要是获取一组数的最大值、最小值和中位数。\n\n**注意：**类中待调用的方法需要是静态的！\n\n## 2. 在xsl文件中指定java包\ns.xsl 内容如下：\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:javaExt=\"extensions\"\n    exclude-result-prefixes=\"javaExt\">\n    \n    <xsl:if test=\"javaExt:MaxMinMedium.insert(1)\" />\n    <xsl:if test=\"javaExt:MaxMinMedium.insert(2)\" />\n    <xsl:if test=\"javaExt:MaxMinMedium.insert(3)\" />\n    <xsl:if test=\"javaExt:MaxMinMedium.insert(4)\" />\n    \n    <xsl:if test=\"javaExt:MaxMinMedium.calc()\" />\n    \n    <test>\n        <max>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"javaExt:MaxMinMedium.getMax()\" />\n            </xsl:attribute>\n        </max>\n        <min>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"javaExt:MaxMinMedium.getMin()\" />\n            </xsl:attribute>\n        </min>\n        <medium>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"javaExt:MaxMinMedium.getMedium()\" />\n            </xsl:attribute>\n        </medium>\n    </test>\n    \n</xsl:stylesheet>\n~~~\njava包的引用采用这种方式：xmlns:javaExt=\"extensions\"，这里的javaEx是在引用java方法是所要加的前缀，可以换成其他的名称；\nexclude-result-prefixes=\"javaExt\"这句话是可选的，不加这句话也是可以的，加上后更好，貌似为了避免和java本身的命名空间重叠。\n\n## 3. 在xsl中调用java静态方法\n调用方法在前面的第二步中可以看到，调用的方式为： **前缀:类名.方法名**，如\n~~~\njavaExt:MaxMinMedium.getMax()\n~~~\n\n**补充说明：**\n这种调用方式是在java类中声明了包的时候所采用的，如果在java类中不声明包（将package extensions去掉）的时候，采用下面的方式：\nxsl引用类：xmlns:javaExt=\"MaxMinMedium\"\nxsl调用方法：javaExt:getMax()\n*这种不声明包的方式就要把所有的函数都写在一个java类中，不利于程序的解耦，所以不是很推荐，除非是比较简单单一的调用。*\n\n## 4. 解析\n解析的文件为 Transform.java，其中的内容如下：\n~~~\n//import needed transform packages\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerConfigurationException;\n\n//import needed java packages\nimport java.io.FileOutputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class Transform\n{\n    public static void main(String[] args)\n    throws TransformerException, TransformerConfigurationException, \n           FileNotFoundException, IOException\n    {  \n        //create a transformer factory class.\n        TransformerFactory tFactory = TransformerFactory.newInstance();\n\n        //create an instance using the factory class\n        Transformer transformer = tFactory.newTransformer(new StreamSource(\"s.xsl\"));\n\n        //call function transform from class transformer to complete conversion\n        transformer.transform(new StreamSource(\"x.xml\"), new StreamResult(new FileOutputStream(\"out.xml\")));\n\n        //print the message telling user that the conversion is done. \n        System.out.println(\"************* The result is in out.xml*************\");\n    }\n}\n~~~\n(这段代码中的x.ml其实没用到，这个转换方法能否成功不能百分百保证...)\n\n下面编译该文件：\n~~~\njavac Transform.java\n~~~\n然后会在当前路径生成 Transform.class文件。\n\n下面调用该文件进行xsl转换：\n~~~\njava Transform\n~~~\n\n如果没有错误的话理应会看到控制台输出一段文字：The result is in out.xml，然后在当前路径下会生成out.xml文件。\nout.xml文件中的内容为：\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<test>\n<max value=\"4\"/>\n<min value=\"1\"/>\n<medium count=\"2\">\n</test>\n~~~\n\n至此，整个的文件夹的结构为：\n~~~\ntest\n    MaxMinMedium.java\n    Transform.java\n    Transform.class\n    s.xsl\n    x.xml\n    out.xml\n    extensions\n        MaxMinMedium.class\n~~~\n\n以上就是对xsl调用java方法的介绍，有待进一步研究～\n\n参考链接：\n[http://unmi.cc/xslt-call-java-method/](http://unmi.cc/xslt-call-java-method/)\n\n\n\n\n","source":"_posts/2016-07-21-xslt-java-function.md","raw":"---\ntitle: xslt调用java类方法\ncategories : xslt\ntags : [xml,xsl,xslt,xpath]\n---\n\nxslt中可以调用java的类方法，对这种引用了java方法的xslt的解析可以采用java JDK自带的 javax.xml.transform.本文对这种方法进行介绍。\n\n<!-- more -->\n\n主要的步骤为：\n1. 编写待调用的java类**静态方法**\n2. 在xsl文件的开头指定待引用的java类所在的包（如果不声明包的话，就填写类名）\n3. 在xsl文件中通过\"**前缀：类名.方法名**\"的方式来调用\n4. 用java jdk自带的javax.xml.transform类完成xslt转换\n\n本文主要是为了演示怎样在xsl中调用java的方法，所以就不用xsl去转换某个xml文件了，仅仅是解析xsl文件而已。\n本文用到的文件有MaxMinMedium.java、Transform.java、s.xsl等。\n原始文件组织结构为：\n~~~\ntest\n  MaxMinMedium.java\n  Transform.java\n  s.xsl\n  x.xml\n~~~\n \n **声明:**文中代码为说明问题所编写，不保证一定可以运行～\n \n 下面进入主题：\n\n## 1. 编写java类\njava相关的安装事宜可以参考这篇文章：\n[https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get](https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get)\n为了编译java文件，首先需要安装jdk, 在ubantu上面执行：\n~~~\nsudo apt-get install default-jdk\n~~~\n如果要运行java程序需要安装jre：\n~~~\nsudo apt-get install default-jre\n~~~\n\n想要理解本方法，需要对java包有所了解，简单来说java包一定程度上充当了命名空间的角色。本文中定义的java源文件为 MaxMinMedium.java：\n~~~\npackage extensions;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MaxMinMedium {\n    private static ArrayList<Integer> valueList = new ArrayList<Integer>();\n\n    //reset sum and valueList\n    public static boolean reset() {\n        valueList.clear();\n        return true;\n    }\n\n    public static boolean calc() {\n        if(valueList.size() > 0) {\n            Collections.sort(valueList);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static boolean insert(int val) {\n        valueList.add(val);\n\n        return true;\n    }\n\n    public static int getMax() {\n        return valueList.get(valueList.size()-1);\n    }\n\t\n    public static int getMin() {\n        return valueList.get(0);\n    }\n\n    public static int getMedium() {\n        return valueList.get(valueList.size()/2);\n    }\n}\n~~~\n这个文件的开头package extensions是声明了一个extensions的包，在该文件所在的路径下执行：\n~~~\njavac -d . MaxMinMedium.java\n~~~\n将会在当前路径下产生 extensions 文件夹，在这个文件夹下会出现 MaxMinMedium.class 文件，这个就是java编译之后得到的文件。\n\n可以在当前路径下新建其他的java文件，在这些源文件中均声明 package extensions，这样编译后会在extensions文件夹下出现相应的class文件。可以在这些不同的java文件中定义不同的类，各自完成相应的功能。\nMaxMinMedium.java中的方法主要是获取一组数的最大值、最小值和中位数。\n\n**注意：**类中待调用的方法需要是静态的！\n\n## 2. 在xsl文件中指定java包\ns.xsl 内容如下：\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:javaExt=\"extensions\"\n    exclude-result-prefixes=\"javaExt\">\n    \n    <xsl:if test=\"javaExt:MaxMinMedium.insert(1)\" />\n    <xsl:if test=\"javaExt:MaxMinMedium.insert(2)\" />\n    <xsl:if test=\"javaExt:MaxMinMedium.insert(3)\" />\n    <xsl:if test=\"javaExt:MaxMinMedium.insert(4)\" />\n    \n    <xsl:if test=\"javaExt:MaxMinMedium.calc()\" />\n    \n    <test>\n        <max>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"javaExt:MaxMinMedium.getMax()\" />\n            </xsl:attribute>\n        </max>\n        <min>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"javaExt:MaxMinMedium.getMin()\" />\n            </xsl:attribute>\n        </min>\n        <medium>\n            <xsl:attribute name=\"value\">\n                <xsl:value-of select=\"javaExt:MaxMinMedium.getMedium()\" />\n            </xsl:attribute>\n        </medium>\n    </test>\n    \n</xsl:stylesheet>\n~~~\njava包的引用采用这种方式：xmlns:javaExt=\"extensions\"，这里的javaEx是在引用java方法是所要加的前缀，可以换成其他的名称；\nexclude-result-prefixes=\"javaExt\"这句话是可选的，不加这句话也是可以的，加上后更好，貌似为了避免和java本身的命名空间重叠。\n\n## 3. 在xsl中调用java静态方法\n调用方法在前面的第二步中可以看到，调用的方式为： **前缀:类名.方法名**，如\n~~~\njavaExt:MaxMinMedium.getMax()\n~~~\n\n**补充说明：**\n这种调用方式是在java类中声明了包的时候所采用的，如果在java类中不声明包（将package extensions去掉）的时候，采用下面的方式：\nxsl引用类：xmlns:javaExt=\"MaxMinMedium\"\nxsl调用方法：javaExt:getMax()\n*这种不声明包的方式就要把所有的函数都写在一个java类中，不利于程序的解耦，所以不是很推荐，除非是比较简单单一的调用。*\n\n## 4. 解析\n解析的文件为 Transform.java，其中的内容如下：\n~~~\n//import needed transform packages\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerConfigurationException;\n\n//import needed java packages\nimport java.io.FileOutputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class Transform\n{\n    public static void main(String[] args)\n    throws TransformerException, TransformerConfigurationException, \n           FileNotFoundException, IOException\n    {  \n        //create a transformer factory class.\n        TransformerFactory tFactory = TransformerFactory.newInstance();\n\n        //create an instance using the factory class\n        Transformer transformer = tFactory.newTransformer(new StreamSource(\"s.xsl\"));\n\n        //call function transform from class transformer to complete conversion\n        transformer.transform(new StreamSource(\"x.xml\"), new StreamResult(new FileOutputStream(\"out.xml\")));\n\n        //print the message telling user that the conversion is done. \n        System.out.println(\"************* The result is in out.xml*************\");\n    }\n}\n~~~\n(这段代码中的x.ml其实没用到，这个转换方法能否成功不能百分百保证...)\n\n下面编译该文件：\n~~~\njavac Transform.java\n~~~\n然后会在当前路径生成 Transform.class文件。\n\n下面调用该文件进行xsl转换：\n~~~\njava Transform\n~~~\n\n如果没有错误的话理应会看到控制台输出一段文字：The result is in out.xml，然后在当前路径下会生成out.xml文件。\nout.xml文件中的内容为：\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<test>\n<max value=\"4\"/>\n<min value=\"1\"/>\n<medium count=\"2\">\n</test>\n~~~\n\n至此，整个的文件夹的结构为：\n~~~\ntest\n    MaxMinMedium.java\n    Transform.java\n    Transform.class\n    s.xsl\n    x.xml\n    out.xml\n    extensions\n        MaxMinMedium.class\n~~~\n\n以上就是对xsl调用java方法的介绍，有待进一步研究～\n\n参考链接：\n[http://unmi.cc/xslt-call-java-method/](http://unmi.cc/xslt-call-java-method/)\n\n\n\n\n","slug":"2016-07-21-xslt-java-function","published":1,"date":"2016-07-22T00:55:37.760Z","updated":"2016-07-22T00:55:37.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qldt000opq8ab91wyy7t","content":"<p>xslt中可以调用java的类方法，对这种引用了java方法的xslt的解析可以采用java JDK自带的 javax.xml.transform.本文对这种方法进行介绍。</p>\n<a id=\"more\"></a>\n<p>主要的步骤为：</p>\n<ol>\n<li>编写待调用的java类<strong>静态方法</strong></li>\n<li>在xsl文件的开头指定待引用的java类所在的包（如果不声明包的话，就填写类名）</li>\n<li>在xsl文件中通过”<strong>前缀：类名.方法名</strong>“的方式来调用</li>\n<li>用java jdk自带的javax.xml.transform类完成xslt转换</li>\n</ol>\n<p>本文主要是为了演示怎样在xsl中调用java的方法，所以就不用xsl去转换某个xml文件了，仅仅是解析xsl文件而已。<br>本文用到的文件有MaxMinMedium.java、Transform.java、s.xsl等。<br>原始文件组织结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">test</div><div class=\"line\">  MaxMinMedium.java</div><div class=\"line\">  Transform.java</div><div class=\"line\">  s.xsl</div><div class=\"line\">  x.xml</div></pre></td></tr></table></figure></p>\n<p> <strong>声明:</strong>文中代码为说明问题所编写，不保证一定可以运行～</p>\n<p> 下面进入主题：</p>\n<h2 id=\"1-编写java类\"><a href=\"#1-编写java类\" class=\"headerlink\" title=\"1. 编写java类\"></a>1. 编写java类</h2><p>java相关的安装事宜可以参考这篇文章：<br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get\" target=\"_blank\" rel=\"external\">https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get</a><br>为了编译java文件，首先需要安装jdk, 在ubantu上面执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install default-jdk</div></pre></td></tr></table></figure></p>\n<p>如果要运行java程序需要安装jre：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install default-jre</div></pre></td></tr></table></figure></p>\n<p>想要理解本方法，需要对java包有所了解，简单来说java包一定程度上充当了命名空间的角色。本文中定义的java源文件为 MaxMinMedium.java：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package extensions;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.Collections;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">public class MaxMinMedium &#123;</div><div class=\"line\">    private static ArrayList&lt;Integer&gt; valueList = new ArrayList&lt;Integer&gt;();</div><div class=\"line\"></div><div class=\"line\">    //reset sum and valueList</div><div class=\"line\">    public static boolean reset() &#123;</div><div class=\"line\">        valueList.clear();</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static boolean calc() &#123;</div><div class=\"line\">        if(valueList.size() &gt; 0) &#123;</div><div class=\"line\">            Collections.sort(valueList);</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static boolean insert(int val) &#123;</div><div class=\"line\">        valueList.add(val);</div><div class=\"line\"></div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int getMax() &#123;</div><div class=\"line\">        return valueList.get(valueList.size()-1);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    public static int getMin() &#123;</div><div class=\"line\">        return valueList.get(0);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int getMedium() &#123;</div><div class=\"line\">        return valueList.get(valueList.size()/2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个文件的开头package extensions是声明了一个extensions的包，在该文件所在的路径下执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac -d . MaxMinMedium.java</div></pre></td></tr></table></figure></p>\n<p>将会在当前路径下产生 extensions 文件夹，在这个文件夹下会出现 MaxMinMedium.class 文件，这个就是java编译之后得到的文件。</p>\n<p>可以在当前路径下新建其他的java文件，在这些源文件中均声明 package extensions，这样编译后会在extensions文件夹下出现相应的class文件。可以在这些不同的java文件中定义不同的类，各自完成相应的功能。<br>MaxMinMedium.java中的方法主要是获取一组数的最大值、最小值和中位数。</p>\n<p><strong>注意：</strong>类中待调用的方法需要是静态的！</p>\n<h2 id=\"2-在xsl文件中指定java包\"><a href=\"#2-在xsl文件中指定java包\" class=\"headerlink\" title=\"2. 在xsl文件中指定java包\"></a>2. 在xsl文件中指定java包</h2><p>s.xsl 内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;</div><div class=\"line\">    xmlns:javaExt=&quot;extensions&quot;</div><div class=\"line\">    exclude-result-prefixes=&quot;javaExt&quot;&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(1)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(2)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(3)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(4)&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.calc()&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;test&gt;</div><div class=\"line\">        &lt;max&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;javaExt:MaxMinMedium.getMax()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/max&gt;</div><div class=\"line\">        &lt;min&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;javaExt:MaxMinMedium.getMin()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/min&gt;</div><div class=\"line\">        &lt;medium&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;javaExt:MaxMinMedium.getMedium()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/medium&gt;</div><div class=\"line\">    &lt;/test&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure></p>\n<p>java包的引用采用这种方式：xmlns:javaExt=”extensions”，这里的javaEx是在引用java方法是所要加的前缀，可以换成其他的名称；<br>exclude-result-prefixes=”javaExt”这句话是可选的，不加这句话也是可以的，加上后更好，貌似为了避免和java本身的命名空间重叠。</p>\n<h2 id=\"3-在xsl中调用java静态方法\"><a href=\"#3-在xsl中调用java静态方法\" class=\"headerlink\" title=\"3. 在xsl中调用java静态方法\"></a>3. 在xsl中调用java静态方法</h2><p>调用方法在前面的第二步中可以看到，调用的方式为： <strong>前缀:类名.方法名</strong>，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javaExt:MaxMinMedium.getMax()</div></pre></td></tr></table></figure></p>\n<p><strong>补充说明：</strong><br>这种调用方式是在java类中声明了包的时候所采用的，如果在java类中不声明包（将package extensions去掉）的时候，采用下面的方式：<br>xsl引用类：xmlns:javaExt=”MaxMinMedium”<br>xsl调用方法：javaExt:getMax()<br><em>这种不声明包的方式就要把所有的函数都写在一个java类中，不利于程序的解耦，所以不是很推荐，除非是比较简单单一的调用。</em></p>\n<h2 id=\"4-解析\"><a href=\"#4-解析\" class=\"headerlink\" title=\"4. 解析\"></a>4. 解析</h2><p>解析的文件为 Transform.java，其中的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">//import needed transform packages</div><div class=\"line\">import javax.xml.transform.TransformerFactory;</div><div class=\"line\">import javax.xml.transform.Transformer;</div><div class=\"line\">import javax.xml.transform.stream.StreamSource;</div><div class=\"line\">import javax.xml.transform.stream.StreamResult;</div><div class=\"line\">import javax.xml.transform.TransformerException;</div><div class=\"line\">import javax.xml.transform.TransformerConfigurationException;</div><div class=\"line\"></div><div class=\"line\">//import needed java packages</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\">import java.io.FileNotFoundException;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\"></div><div class=\"line\">public class Transform</div><div class=\"line\">&#123;</div><div class=\"line\">    public static void main(String[] args)</div><div class=\"line\">    throws TransformerException, TransformerConfigurationException, </div><div class=\"line\">           FileNotFoundException, IOException</div><div class=\"line\">    &#123;  </div><div class=\"line\">        //create a transformer factory class.</div><div class=\"line\">        TransformerFactory tFactory = TransformerFactory.newInstance();</div><div class=\"line\"></div><div class=\"line\">        //create an instance using the factory class</div><div class=\"line\">        Transformer transformer = tFactory.newTransformer(new StreamSource(&quot;s.xsl&quot;));</div><div class=\"line\"></div><div class=\"line\">        //call function transform from class transformer to complete conversion</div><div class=\"line\">        transformer.transform(new StreamSource(&quot;x.xml&quot;), new StreamResult(new FileOutputStream(&quot;out.xml&quot;)));</div><div class=\"line\"></div><div class=\"line\">        //print the message telling user that the conversion is done. </div><div class=\"line\">        System.out.println(&quot;************* The result is in out.xml*************&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(这段代码中的x.ml其实没用到，这个转换方法能否成功不能百分百保证…)</p>\n<p>下面编译该文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac Transform.java</div></pre></td></tr></table></figure></p>\n<p>然后会在当前路径生成 Transform.class文件。</p>\n<p>下面调用该文件进行xsl转换：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java Transform</div></pre></td></tr></table></figure></p>\n<p>如果没有错误的话理应会看到控制台输出一段文字：The result is in out.xml，然后在当前路径下会生成out.xml文件。<br>out.xml文件中的内容为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;test&gt;</div><div class=\"line\">&lt;max value=&quot;4&quot;/&gt;</div><div class=\"line\">&lt;min value=&quot;1&quot;/&gt;</div><div class=\"line\">&lt;medium count=&quot;2&quot;&gt;</div><div class=\"line\">&lt;/test&gt;</div></pre></td></tr></table></figure></p>\n<p>至此，整个的文件夹的结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">test</div><div class=\"line\">    MaxMinMedium.java</div><div class=\"line\">    Transform.java</div><div class=\"line\">    Transform.class</div><div class=\"line\">    s.xsl</div><div class=\"line\">    x.xml</div><div class=\"line\">    out.xml</div><div class=\"line\">    extensions</div><div class=\"line\">        MaxMinMedium.class</div></pre></td></tr></table></figure></p>\n<p>以上就是对xsl调用java方法的介绍，有待进一步研究～</p>\n<p>参考链接：<br><a href=\"http://unmi.cc/xslt-call-java-method/\" target=\"_blank\" rel=\"external\">http://unmi.cc/xslt-call-java-method/</a></p>\n","excerpt":"<p>xslt中可以调用java的类方法，对这种引用了java方法的xslt的解析可以采用java JDK自带的 javax.xml.transform.本文对这种方法进行介绍。</p>","more":"<p>主要的步骤为：</p>\n<ol>\n<li>编写待调用的java类<strong>静态方法</strong></li>\n<li>在xsl文件的开头指定待引用的java类所在的包（如果不声明包的话，就填写类名）</li>\n<li>在xsl文件中通过”<strong>前缀：类名.方法名</strong>“的方式来调用</li>\n<li>用java jdk自带的javax.xml.transform类完成xslt转换</li>\n</ol>\n<p>本文主要是为了演示怎样在xsl中调用java的方法，所以就不用xsl去转换某个xml文件了，仅仅是解析xsl文件而已。<br>本文用到的文件有MaxMinMedium.java、Transform.java、s.xsl等。<br>原始文件组织结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">test</div><div class=\"line\">  MaxMinMedium.java</div><div class=\"line\">  Transform.java</div><div class=\"line\">  s.xsl</div><div class=\"line\">  x.xml</div></pre></td></tr></table></figure></p>\n<p> <strong>声明:</strong>文中代码为说明问题所编写，不保证一定可以运行～</p>\n<p> 下面进入主题：</p>\n<h2 id=\"1-编写java类\"><a href=\"#1-编写java类\" class=\"headerlink\" title=\"1. 编写java类\"></a>1. 编写java类</h2><p>java相关的安装事宜可以参考这篇文章：<br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get\">https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get</a><br>为了编译java文件，首先需要安装jdk, 在ubantu上面执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install default-jdk</div></pre></td></tr></table></figure></p>\n<p>如果要运行java程序需要安装jre：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install default-jre</div></pre></td></tr></table></figure></p>\n<p>想要理解本方法，需要对java包有所了解，简单来说java包一定程度上充当了命名空间的角色。本文中定义的java源文件为 MaxMinMedium.java：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package extensions;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.Collections;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">public class MaxMinMedium &#123;</div><div class=\"line\">    private static ArrayList&lt;Integer&gt; valueList = new ArrayList&lt;Integer&gt;();</div><div class=\"line\"></div><div class=\"line\">    //reset sum and valueList</div><div class=\"line\">    public static boolean reset() &#123;</div><div class=\"line\">        valueList.clear();</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static boolean calc() &#123;</div><div class=\"line\">        if(valueList.size() &gt; 0) &#123;</div><div class=\"line\">            Collections.sort(valueList);</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static boolean insert(int val) &#123;</div><div class=\"line\">        valueList.add(val);</div><div class=\"line\"></div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int getMax() &#123;</div><div class=\"line\">        return valueList.get(valueList.size()-1);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    public static int getMin() &#123;</div><div class=\"line\">        return valueList.get(0);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static int getMedium() &#123;</div><div class=\"line\">        return valueList.get(valueList.size()/2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个文件的开头package extensions是声明了一个extensions的包，在该文件所在的路径下执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac -d . MaxMinMedium.java</div></pre></td></tr></table></figure></p>\n<p>将会在当前路径下产生 extensions 文件夹，在这个文件夹下会出现 MaxMinMedium.class 文件，这个就是java编译之后得到的文件。</p>\n<p>可以在当前路径下新建其他的java文件，在这些源文件中均声明 package extensions，这样编译后会在extensions文件夹下出现相应的class文件。可以在这些不同的java文件中定义不同的类，各自完成相应的功能。<br>MaxMinMedium.java中的方法主要是获取一组数的最大值、最小值和中位数。</p>\n<p><strong>注意：</strong>类中待调用的方法需要是静态的！</p>\n<h2 id=\"2-在xsl文件中指定java包\"><a href=\"#2-在xsl文件中指定java包\" class=\"headerlink\" title=\"2. 在xsl文件中指定java包\"></a>2. 在xsl文件中指定java包</h2><p>s.xsl 内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;</div><div class=\"line\">    xmlns:javaExt=&quot;extensions&quot;</div><div class=\"line\">    exclude-result-prefixes=&quot;javaExt&quot;&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(1)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(2)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(3)&quot; /&gt;</div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(4)&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.calc()&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;test&gt;</div><div class=\"line\">        &lt;max&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;javaExt:MaxMinMedium.getMax()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/max&gt;</div><div class=\"line\">        &lt;min&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;javaExt:MaxMinMedium.getMin()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/min&gt;</div><div class=\"line\">        &lt;medium&gt;</div><div class=\"line\">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class=\"line\">                &lt;xsl:value-of select=&quot;javaExt:MaxMinMedium.getMedium()&quot; /&gt;</div><div class=\"line\">            &lt;/xsl:attribute&gt;</div><div class=\"line\">        &lt;/medium&gt;</div><div class=\"line\">    &lt;/test&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure></p>\n<p>java包的引用采用这种方式：xmlns:javaExt=”extensions”，这里的javaEx是在引用java方法是所要加的前缀，可以换成其他的名称；<br>exclude-result-prefixes=”javaExt”这句话是可选的，不加这句话也是可以的，加上后更好，貌似为了避免和java本身的命名空间重叠。</p>\n<h2 id=\"3-在xsl中调用java静态方法\"><a href=\"#3-在xsl中调用java静态方法\" class=\"headerlink\" title=\"3. 在xsl中调用java静态方法\"></a>3. 在xsl中调用java静态方法</h2><p>调用方法在前面的第二步中可以看到，调用的方式为： <strong>前缀:类名.方法名</strong>，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javaExt:MaxMinMedium.getMax()</div></pre></td></tr></table></figure></p>\n<p><strong>补充说明：</strong><br>这种调用方式是在java类中声明了包的时候所采用的，如果在java类中不声明包（将package extensions去掉）的时候，采用下面的方式：<br>xsl引用类：xmlns:javaExt=”MaxMinMedium”<br>xsl调用方法：javaExt:getMax()<br><em>这种不声明包的方式就要把所有的函数都写在一个java类中，不利于程序的解耦，所以不是很推荐，除非是比较简单单一的调用。</em></p>\n<h2 id=\"4-解析\"><a href=\"#4-解析\" class=\"headerlink\" title=\"4. 解析\"></a>4. 解析</h2><p>解析的文件为 Transform.java，其中的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">//import needed transform packages</div><div class=\"line\">import javax.xml.transform.TransformerFactory;</div><div class=\"line\">import javax.xml.transform.Transformer;</div><div class=\"line\">import javax.xml.transform.stream.StreamSource;</div><div class=\"line\">import javax.xml.transform.stream.StreamResult;</div><div class=\"line\">import javax.xml.transform.TransformerException;</div><div class=\"line\">import javax.xml.transform.TransformerConfigurationException;</div><div class=\"line\"></div><div class=\"line\">//import needed java packages</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\">import java.io.FileNotFoundException;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\"></div><div class=\"line\">public class Transform</div><div class=\"line\">&#123;</div><div class=\"line\">    public static void main(String[] args)</div><div class=\"line\">    throws TransformerException, TransformerConfigurationException, </div><div class=\"line\">           FileNotFoundException, IOException</div><div class=\"line\">    &#123;  </div><div class=\"line\">        //create a transformer factory class.</div><div class=\"line\">        TransformerFactory tFactory = TransformerFactory.newInstance();</div><div class=\"line\"></div><div class=\"line\">        //create an instance using the factory class</div><div class=\"line\">        Transformer transformer = tFactory.newTransformer(new StreamSource(&quot;s.xsl&quot;));</div><div class=\"line\"></div><div class=\"line\">        //call function transform from class transformer to complete conversion</div><div class=\"line\">        transformer.transform(new StreamSource(&quot;x.xml&quot;), new StreamResult(new FileOutputStream(&quot;out.xml&quot;)));</div><div class=\"line\"></div><div class=\"line\">        //print the message telling user that the conversion is done. </div><div class=\"line\">        System.out.println(&quot;************* The result is in out.xml*************&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(这段代码中的x.ml其实没用到，这个转换方法能否成功不能百分百保证…)</p>\n<p>下面编译该文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac Transform.java</div></pre></td></tr></table></figure></p>\n<p>然后会在当前路径生成 Transform.class文件。</p>\n<p>下面调用该文件进行xsl转换：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java Transform</div></pre></td></tr></table></figure></p>\n<p>如果没有错误的话理应会看到控制台输出一段文字：The result is in out.xml，然后在当前路径下会生成out.xml文件。<br>out.xml文件中的内容为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;test&gt;</div><div class=\"line\">&lt;max value=&quot;4&quot;/&gt;</div><div class=\"line\">&lt;min value=&quot;1&quot;/&gt;</div><div class=\"line\">&lt;medium count=&quot;2&quot;&gt;</div><div class=\"line\">&lt;/test&gt;</div></pre></td></tr></table></figure></p>\n<p>至此，整个的文件夹的结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">test</div><div class=\"line\">    MaxMinMedium.java</div><div class=\"line\">    Transform.java</div><div class=\"line\">    Transform.class</div><div class=\"line\">    s.xsl</div><div class=\"line\">    x.xml</div><div class=\"line\">    out.xml</div><div class=\"line\">    extensions</div><div class=\"line\">        MaxMinMedium.class</div></pre></td></tr></table></figure></p>\n<p>以上就是对xsl调用java方法的介绍，有待进一步研究～</p>\n<p>参考链接：<br><a href=\"http://unmi.cc/xslt-call-java-method/\">http://unmi.cc/xslt-call-java-method/</a></p>"},{"title":"JDBC远程连接MySql","_content":"\n本文主要内容是开启MySql数据库的远程连接功能，然后远程通过JDBC来连接上数据库，进行简单的查询操作。\n\n<!-- more -->\n\n## 开启mysql远程连接功能\nmysql默认的远程连接功能貌似是关闭的，如果需要远程连接的话需要开通。开通的过程分为以下几步：\n### 进入\n在控制台输入：\n~~~\nmysql -u root -p\n~~~\n执行命令后会提示输入密码，一般不需要输入，直接回车即可。\n\n### 查看当前用户\n接着第1步，继续输入以下指令，注意；不要省略：\n~~~\nuse mysql;\nselect host,user,password from user;\n~~~\n然后控制台会输出当前db的一些用户信息，如：\n~~~\nMariaDB [mysql]> select host,user,password from user;\n+-----------+-------------+-------------------------------------------+\n| host      | user        | password                                  |\n+-----------+-------------+-------------------------------------------+\n| localhost | root        |                                           |\n| (none)    | root        |                                           |\n| 127.0.0.1 | root        |                                           |\n| ::1       | root        |                                           |\n| localhost |             |                                           |\n| (none)    |             |                                           |\n| %         | replication | *51125B3597BEE0FC43E0BCBFEE002EF8641B44CF |\n| localhost | DbAdmin     | *0DF17D910FD01DCE47EC3F384C33306F50E8CE54 |\n| %         | root        | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |\n+-----------+-------------+-------------------------------------------+\n~~~\npassword栏为空的一般都是不用密码的，有内容的是加密后的密码。下面第三步增加可以远程访问该db的用户。\n\n### 增加用户\n**grant命令：**\n grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by '连接口令';\n\n如果使任何主机都能以root用户，password为密码连接的话就输入以下命令(命令不区分大小写)：\n~~~\nGRANT ALL PRIVILEGES ON *.* TO root@\"%\" IDENTIFIED BY \"password\"; \n~~~\n为了使设置生效，输入以下命令：\n~~~\nflush privileges; \n~~~\n\n至此就可以远程连接了，注意用户名=root，密码=password.\n\n## JDBC远程连接MySql数据库\n### 代码\n啥都不说了，看代码吧，PersonalBookmarks.java：\n~~~\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Connection;\nimport java.sql.Statement;\n \npublic class PersonalBookmarks {\n    public static void main(String[] args) throws Exception {\n        Connection conn = null;\n        String sql;\n\n        // MySql jdbc url format: jdbc:mysql://host:port/database_name?param=value\n        // Set useUnicode and characterEncoding to avoid messy code\n        String url = \"jdbc:mysql://10.103.62.159:3306/bookmarks?\"\n            + \"user=root&password=password&useUnicode=true&characterEncoding=UTF8\"; //这个url里面设置所要访问的数据库所在的主机以及所要访问的数据库，还有用户名和密码，这个用户名密码就是上面设置的\n\n        try {\n            // Load MySql driver.Each of those three ways is fine.\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            // or:\n            // com.mysql.jdbc.Driver driver = new com.mysql.jdbc.Driver();\n            // or：\n            // new com.mysql.jdbc.Driver();\n\n            //for test\n            System.out.println(\"Load MySQL Driver successfully!\");\n\n            // One Connection repersents a database connection.\n            conn = DriverManager.getConnection(url);\n\n            // There are many functions in Statement, such as executeQuery , executeUpdate etc.\n            Statement stmt = conn.createStatement();\n            System.out.println(\"Connect to database successfully!\");// for test\n\n            // sql = \"select a.url,b.clienttype from bookmarks as a,customlinks as b where a.bkmrkid=b.pslinkid\";\n            // ResultSet data = stmt.executeQuery(sql);//Query for data\n            \n            // while (data.next()) {    \n            //     System.out.println(data.getString(\"url\")); // for test\n            //     System.out.println(data.getString(\"clienttype\")); // for test\n\n            //     String[] temp = data.getString(\"url\").split(\":\");\n            //     String shortcutType = temp[0];\n            //     String clientType = data.getString(\"clienttype\");\n\n            //     if (shortcutTypeMap.containsKey(shortcutType) && clientTypeMap.containsKey(clientType)) {\n            //         result[shortcutTypeMap.get(shortcutType)][clientTypeMap.get(clientType)]++;\n            //     }\n            // }\n        } catch (SQLException e) {\n            System.out.println (\"MySQL operation mistake\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            conn.close();\n        }\n\n    }\n    \n}\n~~~\n\n### 编译：\n~~~\njavac PersonalBookmarks.java\n~~~\n\n### 运行：\n要想运行这段代码，需要*mysql-connector-java-5.1.39-bin.jar*这个jar包，可以去mysql官网下载，下载之后将这个jar包放在jdbc.java同一路径，\n之后执行：\n~~~\njava -cp .:mysql-connector-java-5.1.39-bin.jar PersonalBookmarks\n~~~\n\n执行后控制台看到以下输出就代表成功了。\n~~~\nLoad MySQL Driver successfully!\nConnect to database successfully!\n~~~","source":"_posts/2016-07-22-jdbc-remote-connect-mysql.md","raw":"---\ntitle: JDBC远程连接MySql\ncategories : java\ntags : [JDBC， MySql]\n---\n\n本文主要内容是开启MySql数据库的远程连接功能，然后远程通过JDBC来连接上数据库，进行简单的查询操作。\n\n<!-- more -->\n\n## 开启mysql远程连接功能\nmysql默认的远程连接功能貌似是关闭的，如果需要远程连接的话需要开通。开通的过程分为以下几步：\n### 进入\n在控制台输入：\n~~~\nmysql -u root -p\n~~~\n执行命令后会提示输入密码，一般不需要输入，直接回车即可。\n\n### 查看当前用户\n接着第1步，继续输入以下指令，注意；不要省略：\n~~~\nuse mysql;\nselect host,user,password from user;\n~~~\n然后控制台会输出当前db的一些用户信息，如：\n~~~\nMariaDB [mysql]> select host,user,password from user;\n+-----------+-------------+-------------------------------------------+\n| host      | user        | password                                  |\n+-----------+-------------+-------------------------------------------+\n| localhost | root        |                                           |\n| (none)    | root        |                                           |\n| 127.0.0.1 | root        |                                           |\n| ::1       | root        |                                           |\n| localhost |             |                                           |\n| (none)    |             |                                           |\n| %         | replication | *51125B3597BEE0FC43E0BCBFEE002EF8641B44CF |\n| localhost | DbAdmin     | *0DF17D910FD01DCE47EC3F384C33306F50E8CE54 |\n| %         | root        | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |\n+-----------+-------------+-------------------------------------------+\n~~~\npassword栏为空的一般都是不用密码的，有内容的是加密后的密码。下面第三步增加可以远程访问该db的用户。\n\n### 增加用户\n**grant命令：**\n grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by '连接口令';\n\n如果使任何主机都能以root用户，password为密码连接的话就输入以下命令(命令不区分大小写)：\n~~~\nGRANT ALL PRIVILEGES ON *.* TO root@\"%\" IDENTIFIED BY \"password\"; \n~~~\n为了使设置生效，输入以下命令：\n~~~\nflush privileges; \n~~~\n\n至此就可以远程连接了，注意用户名=root，密码=password.\n\n## JDBC远程连接MySql数据库\n### 代码\n啥都不说了，看代码吧，PersonalBookmarks.java：\n~~~\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Connection;\nimport java.sql.Statement;\n \npublic class PersonalBookmarks {\n    public static void main(String[] args) throws Exception {\n        Connection conn = null;\n        String sql;\n\n        // MySql jdbc url format: jdbc:mysql://host:port/database_name?param=value\n        // Set useUnicode and characterEncoding to avoid messy code\n        String url = \"jdbc:mysql://10.103.62.159:3306/bookmarks?\"\n            + \"user=root&password=password&useUnicode=true&characterEncoding=UTF8\"; //这个url里面设置所要访问的数据库所在的主机以及所要访问的数据库，还有用户名和密码，这个用户名密码就是上面设置的\n\n        try {\n            // Load MySql driver.Each of those three ways is fine.\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            // or:\n            // com.mysql.jdbc.Driver driver = new com.mysql.jdbc.Driver();\n            // or：\n            // new com.mysql.jdbc.Driver();\n\n            //for test\n            System.out.println(\"Load MySQL Driver successfully!\");\n\n            // One Connection repersents a database connection.\n            conn = DriverManager.getConnection(url);\n\n            // There are many functions in Statement, such as executeQuery , executeUpdate etc.\n            Statement stmt = conn.createStatement();\n            System.out.println(\"Connect to database successfully!\");// for test\n\n            // sql = \"select a.url,b.clienttype from bookmarks as a,customlinks as b where a.bkmrkid=b.pslinkid\";\n            // ResultSet data = stmt.executeQuery(sql);//Query for data\n            \n            // while (data.next()) {    \n            //     System.out.println(data.getString(\"url\")); // for test\n            //     System.out.println(data.getString(\"clienttype\")); // for test\n\n            //     String[] temp = data.getString(\"url\").split(\":\");\n            //     String shortcutType = temp[0];\n            //     String clientType = data.getString(\"clienttype\");\n\n            //     if (shortcutTypeMap.containsKey(shortcutType) && clientTypeMap.containsKey(clientType)) {\n            //         result[shortcutTypeMap.get(shortcutType)][clientTypeMap.get(clientType)]++;\n            //     }\n            // }\n        } catch (SQLException e) {\n            System.out.println (\"MySQL operation mistake\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            conn.close();\n        }\n\n    }\n    \n}\n~~~\n\n### 编译：\n~~~\njavac PersonalBookmarks.java\n~~~\n\n### 运行：\n要想运行这段代码，需要*mysql-connector-java-5.1.39-bin.jar*这个jar包，可以去mysql官网下载，下载之后将这个jar包放在jdbc.java同一路径，\n之后执行：\n~~~\njava -cp .:mysql-connector-java-5.1.39-bin.jar PersonalBookmarks\n~~~\n\n执行后控制台看到以下输出就代表成功了。\n~~~\nLoad MySQL Driver successfully!\nConnect to database successfully!\n~~~","slug":"2016-07-22-jdbc-remote-connect-mysql","published":1,"date":"2016-07-26T03:00:35.711Z","updated":"2016-07-26T03:00:35.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qldy000qpq8axa1mb3k7","content":"<p>本文主要内容是开启MySql数据库的远程连接功能，然后远程通过JDBC来连接上数据库，进行简单的查询操作。</p>\n<a id=\"more\"></a>\n<h2 id=\"开启mysql远程连接功能\"><a href=\"#开启mysql远程连接功能\" class=\"headerlink\" title=\"开启mysql远程连接功能\"></a>开启mysql远程连接功能</h2><p>mysql默认的远程连接功能貌似是关闭的，如果需要远程连接的话需要开通。开通的过程分为以下几步：</p>\n<h3 id=\"进入\"><a href=\"#进入\" class=\"headerlink\" title=\"进入\"></a>进入</h3><p>在控制台输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root -p</div></pre></td></tr></table></figure></p>\n<p>执行命令后会提示输入密码，一般不需要输入，直接回车即可。</p>\n<h3 id=\"查看当前用户\"><a href=\"#查看当前用户\" class=\"headerlink\" title=\"查看当前用户\"></a>查看当前用户</h3><p>接着第1步，继续输入以下指令，注意；不要省略：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">use mysql;</div><div class=\"line\">select host,user,password from user;</div></pre></td></tr></table></figure></p>\n<p>然后控制台会输出当前db的一些用户信息，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [mysql]&gt; select host,user,password from user;</div><div class=\"line\">+-----------+-------------+-------------------------------------------+</div><div class=\"line\">| host      | user        | password                                  |</div><div class=\"line\">+-----------+-------------+-------------------------------------------+</div><div class=\"line\">| localhost | root        |                                           |</div><div class=\"line\">| (none)    | root        |                                           |</div><div class=\"line\">| 127.0.0.1 | root        |                                           |</div><div class=\"line\">| ::1       | root        |                                           |</div><div class=\"line\">| localhost |             |                                           |</div><div class=\"line\">| (none)    |             |                                           |</div><div class=\"line\">| %         | replication | *51125B3597BEE0FC43E0BCBFEE002EF8641B44CF |</div><div class=\"line\">| localhost | DbAdmin     | *0DF17D910FD01DCE47EC3F384C33306F50E8CE54 |</div><div class=\"line\">| %         | root        | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</div><div class=\"line\">+-----------+-------------+-------------------------------------------+</div></pre></td></tr></table></figure></p>\n<p>password栏为空的一般都是不用密码的，有内容的是加密后的密码。下面第三步增加可以远程访问该db的用户。</p>\n<h3 id=\"增加用户\"><a href=\"#增加用户\" class=\"headerlink\" title=\"增加用户\"></a>增加用户</h3><p><strong>grant命令：</strong><br> grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;</p>\n<p>如果使任何主机都能以root用户，password为密码连接的话就输入以下命令(命令不区分大小写)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;password&quot;;</div></pre></td></tr></table></figure></p>\n<p>为了使设置生效，输入以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flush privileges;</div></pre></td></tr></table></figure></p>\n<p>至此就可以远程连接了，注意用户名=root，密码=password.</p>\n<h2 id=\"JDBC远程连接MySql数据库\"><a href=\"#JDBC远程连接MySql数据库\" class=\"headerlink\" title=\"JDBC远程连接MySql数据库\"></a>JDBC远程连接MySql数据库</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>啥都不说了，看代码吧，PersonalBookmarks.java：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.sql.DriverManager;</div><div class=\"line\">import java.sql.ResultSet;</div><div class=\"line\">import java.sql.SQLException;</div><div class=\"line\">import java.sql.Connection;</div><div class=\"line\">import java.sql.Statement;</div><div class=\"line\"> </div><div class=\"line\">public class PersonalBookmarks &#123;</div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        Connection conn = null;</div><div class=\"line\">        String sql;</div><div class=\"line\"></div><div class=\"line\">        // MySql jdbc url format: jdbc:mysql://host:port/database_name?param=value</div><div class=\"line\">        // Set useUnicode and characterEncoding to avoid messy code</div><div class=\"line\">        String url = &quot;jdbc:mysql://10.103.62.159:3306/bookmarks?&quot;</div><div class=\"line\">            + &quot;user=root&amp;password=password&amp;useUnicode=true&amp;characterEncoding=UTF8&quot;; //这个url里面设置所要访问的数据库所在的主机以及所要访问的数据库，还有用户名和密码，这个用户名密码就是上面设置的</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            // Load MySql driver.Each of those three ways is fine.</div><div class=\"line\">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</div><div class=\"line\">            // or:</div><div class=\"line\">            // com.mysql.jdbc.Driver driver = new com.mysql.jdbc.Driver();</div><div class=\"line\">            // or：</div><div class=\"line\">            // new com.mysql.jdbc.Driver();</div><div class=\"line\"></div><div class=\"line\">            //for test</div><div class=\"line\">            System.out.println(&quot;Load MySQL Driver successfully!&quot;);</div><div class=\"line\"></div><div class=\"line\">            // One Connection repersents a database connection.</div><div class=\"line\">            conn = DriverManager.getConnection(url);</div><div class=\"line\"></div><div class=\"line\">            // There are many functions in Statement, such as executeQuery , executeUpdate etc.</div><div class=\"line\">            Statement stmt = conn.createStatement();</div><div class=\"line\">            System.out.println(&quot;Connect to database successfully!&quot;);// for test</div><div class=\"line\"></div><div class=\"line\">            // sql = &quot;select a.url,b.clienttype from bookmarks as a,customlinks as b where a.bkmrkid=b.pslinkid&quot;;</div><div class=\"line\">            // ResultSet data = stmt.executeQuery(sql);//Query for data</div><div class=\"line\">            </div><div class=\"line\">            // while (data.next()) &#123;    </div><div class=\"line\">            //     System.out.println(data.getString(&quot;url&quot;)); // for test</div><div class=\"line\">            //     System.out.println(data.getString(&quot;clienttype&quot;)); // for test</div><div class=\"line\"></div><div class=\"line\">            //     String[] temp = data.getString(&quot;url&quot;).split(&quot;:&quot;);</div><div class=\"line\">            //     String shortcutType = temp[0];</div><div class=\"line\">            //     String clientType = data.getString(&quot;clienttype&quot;);</div><div class=\"line\"></div><div class=\"line\">            //     if (shortcutTypeMap.containsKey(shortcutType) &amp;&amp; clientTypeMap.containsKey(clientType)) &#123;</div><div class=\"line\">            //         result[shortcutTypeMap.get(shortcutType)][clientTypeMap.get(clientType)]++;</div><div class=\"line\">            //     &#125;</div><div class=\"line\">            // &#125;</div><div class=\"line\">        &#125; catch (SQLException e) &#123;</div><div class=\"line\">            System.out.println (&quot;MySQL operation mistake&quot;);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            conn.close();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"编译：\"><a href=\"#编译：\" class=\"headerlink\" title=\"编译：\"></a>编译：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac PersonalBookmarks.java</div></pre></td></tr></table></figure>\n<h3 id=\"运行：\"><a href=\"#运行：\" class=\"headerlink\" title=\"运行：\"></a>运行：</h3><p>要想运行这段代码，需要<em>mysql-connector-java-5.1.39-bin.jar</em>这个jar包，可以去mysql官网下载，下载之后将这个jar包放在jdbc.java同一路径，<br>之后执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -cp .:mysql-connector-java-5.1.39-bin.jar PersonalBookmarks</div></pre></td></tr></table></figure></p>\n<p>执行后控制台看到以下输出就代表成功了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Load MySQL Driver successfully!</div><div class=\"line\">Connect to database successfully!</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>本文主要内容是开启MySql数据库的远程连接功能，然后远程通过JDBC来连接上数据库，进行简单的查询操作。</p>","more":"<h2 id=\"开启mysql远程连接功能\"><a href=\"#开启mysql远程连接功能\" class=\"headerlink\" title=\"开启mysql远程连接功能\"></a>开启mysql远程连接功能</h2><p>mysql默认的远程连接功能貌似是关闭的，如果需要远程连接的话需要开通。开通的过程分为以下几步：</p>\n<h3 id=\"进入\"><a href=\"#进入\" class=\"headerlink\" title=\"进入\"></a>进入</h3><p>在控制台输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root -p</div></pre></td></tr></table></figure></p>\n<p>执行命令后会提示输入密码，一般不需要输入，直接回车即可。</p>\n<h3 id=\"查看当前用户\"><a href=\"#查看当前用户\" class=\"headerlink\" title=\"查看当前用户\"></a>查看当前用户</h3><p>接着第1步，继续输入以下指令，注意；不要省略：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">use mysql;</div><div class=\"line\">select host,user,password from user;</div></pre></td></tr></table></figure></p>\n<p>然后控制台会输出当前db的一些用户信息，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [mysql]&gt; select host,user,password from user;</div><div class=\"line\">+-----------+-------------+-------------------------------------------+</div><div class=\"line\">| host      | user        | password                                  |</div><div class=\"line\">+-----------+-------------+-------------------------------------------+</div><div class=\"line\">| localhost | root        |                                           |</div><div class=\"line\">| (none)    | root        |                                           |</div><div class=\"line\">| 127.0.0.1 | root        |                                           |</div><div class=\"line\">| ::1       | root        |                                           |</div><div class=\"line\">| localhost |             |                                           |</div><div class=\"line\">| (none)    |             |                                           |</div><div class=\"line\">| %         | replication | *51125B3597BEE0FC43E0BCBFEE002EF8641B44CF |</div><div class=\"line\">| localhost | DbAdmin     | *0DF17D910FD01DCE47EC3F384C33306F50E8CE54 |</div><div class=\"line\">| %         | root        | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</div><div class=\"line\">+-----------+-------------+-------------------------------------------+</div></pre></td></tr></table></figure></p>\n<p>password栏为空的一般都是不用密码的，有内容的是加密后的密码。下面第三步增加可以远程访问该db的用户。</p>\n<h3 id=\"增加用户\"><a href=\"#增加用户\" class=\"headerlink\" title=\"增加用户\"></a>增加用户</h3><p><strong>grant命令：</strong><br> grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;</p>\n<p>如果使任何主机都能以root用户，password为密码连接的话就输入以下命令(命令不区分大小写)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;password&quot;;</div></pre></td></tr></table></figure></p>\n<p>为了使设置生效，输入以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flush privileges;</div></pre></td></tr></table></figure></p>\n<p>至此就可以远程连接了，注意用户名=root，密码=password.</p>\n<h2 id=\"JDBC远程连接MySql数据库\"><a href=\"#JDBC远程连接MySql数据库\" class=\"headerlink\" title=\"JDBC远程连接MySql数据库\"></a>JDBC远程连接MySql数据库</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>啥都不说了，看代码吧，PersonalBookmarks.java：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.sql.DriverManager;</div><div class=\"line\">import java.sql.ResultSet;</div><div class=\"line\">import java.sql.SQLException;</div><div class=\"line\">import java.sql.Connection;</div><div class=\"line\">import java.sql.Statement;</div><div class=\"line\"> </div><div class=\"line\">public class PersonalBookmarks &#123;</div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        Connection conn = null;</div><div class=\"line\">        String sql;</div><div class=\"line\"></div><div class=\"line\">        // MySql jdbc url format: jdbc:mysql://host:port/database_name?param=value</div><div class=\"line\">        // Set useUnicode and characterEncoding to avoid messy code</div><div class=\"line\">        String url = &quot;jdbc:mysql://10.103.62.159:3306/bookmarks?&quot;</div><div class=\"line\">            + &quot;user=root&amp;password=password&amp;useUnicode=true&amp;characterEncoding=UTF8&quot;; //这个url里面设置所要访问的数据库所在的主机以及所要访问的数据库，还有用户名和密码，这个用户名密码就是上面设置的</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            // Load MySql driver.Each of those three ways is fine.</div><div class=\"line\">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</div><div class=\"line\">            // or:</div><div class=\"line\">            // com.mysql.jdbc.Driver driver = new com.mysql.jdbc.Driver();</div><div class=\"line\">            // or：</div><div class=\"line\">            // new com.mysql.jdbc.Driver();</div><div class=\"line\"></div><div class=\"line\">            //for test</div><div class=\"line\">            System.out.println(&quot;Load MySQL Driver successfully!&quot;);</div><div class=\"line\"></div><div class=\"line\">            // One Connection repersents a database connection.</div><div class=\"line\">            conn = DriverManager.getConnection(url);</div><div class=\"line\"></div><div class=\"line\">            // There are many functions in Statement, such as executeQuery , executeUpdate etc.</div><div class=\"line\">            Statement stmt = conn.createStatement();</div><div class=\"line\">            System.out.println(&quot;Connect to database successfully!&quot;);// for test</div><div class=\"line\"></div><div class=\"line\">            // sql = &quot;select a.url,b.clienttype from bookmarks as a,customlinks as b where a.bkmrkid=b.pslinkid&quot;;</div><div class=\"line\">            // ResultSet data = stmt.executeQuery(sql);//Query for data</div><div class=\"line\">            </div><div class=\"line\">            // while (data.next()) &#123;    </div><div class=\"line\">            //     System.out.println(data.getString(&quot;url&quot;)); // for test</div><div class=\"line\">            //     System.out.println(data.getString(&quot;clienttype&quot;)); // for test</div><div class=\"line\"></div><div class=\"line\">            //     String[] temp = data.getString(&quot;url&quot;).split(&quot;:&quot;);</div><div class=\"line\">            //     String shortcutType = temp[0];</div><div class=\"line\">            //     String clientType = data.getString(&quot;clienttype&quot;);</div><div class=\"line\"></div><div class=\"line\">            //     if (shortcutTypeMap.containsKey(shortcutType) &amp;&amp; clientTypeMap.containsKey(clientType)) &#123;</div><div class=\"line\">            //         result[shortcutTypeMap.get(shortcutType)][clientTypeMap.get(clientType)]++;</div><div class=\"line\">            //     &#125;</div><div class=\"line\">            // &#125;</div><div class=\"line\">        &#125; catch (SQLException e) &#123;</div><div class=\"line\">            System.out.println (&quot;MySQL operation mistake&quot;);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            conn.close();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"编译：\"><a href=\"#编译：\" class=\"headerlink\" title=\"编译：\"></a>编译：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac PersonalBookmarks.java</div></pre></td></tr></table></figure>\n<h3 id=\"运行：\"><a href=\"#运行：\" class=\"headerlink\" title=\"运行：\"></a>运行：</h3><p>要想运行这段代码，需要<em>mysql-connector-java-5.1.39-bin.jar</em>这个jar包，可以去mysql官网下载，下载之后将这个jar包放在jdbc.java同一路径，<br>之后执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -cp .:mysql-connector-java-5.1.39-bin.jar PersonalBookmarks</div></pre></td></tr></table></figure></p>\n<p>执行后控制台看到以下输出就代表成功了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Load MySQL Driver successfully!</div><div class=\"line\">Connect to database successfully!</div></pre></td></tr></table></figure></p>"},{"title":"Java DOM生成xml文件","_content":"\n我们不仅可以使用DOM的方式解析XML文件，同时也可以使用DOM的方式生成XML文件。本文主要内容是使用DOM的方式生成XML文件。\n\n<!-- more -->\n\n首先是创建DOM之中的各个节点，然后按照各自的层次添加这些节点。\nDomCreateDoucment.java文件内容如下：\n~~~\npackage com.app.dom;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Text;\n\npublic class DomCreateDoucment {\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument doc = builder.newDocument();\n\t\t//构建XML中的节点\n\t\tElement root = doc.createElement(\"font\");\n\t\tElement nameElement = doc.createElement(\"name\");\n\t\tText nameValue = doc.createTextNode(\"san\");\n\t\tElement sizeElement = doc.createElement(\"size\");\n\t\tsizeElement.setAttribute(\"unit\", \"px\");\n\t\tText sizeValue = doc.createTextNode(\"14\");\n       //按顺序添加各个节点\n\t\tdoc.appendChild(root);\n\t\troot.appendChild(nameElement);\n\t\tnameElement.appendChild(nameValue);\n\t\troot.appendChild(sizeElement);\n\t\tsizeElement.appendChild(sizeValue);\n\t\t\n\t\tTransformer t=TransformerFactory.newInstance().newTransformer();\n\t\t//设置换行和缩进\n\t\tt.setOutputProperty(OutputKeys.INDENT,\"yes\");\n\t\tt.setOutputProperty(OutputKeys.METHOD, \"xml\");\n\t\tt.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(new File(\"text.xml\"))));\n\n\t}\n\n}\n~~~\n\n编译：\n在该文件所在目录下执行：\n~~~\njavac -d . DomCreateDoucment.java\n~~~\n执行成功的话会在当前路径下生成:com/app/dom/DomCreateDoucment.class\n\n执行：\n~~~\njava com.app.dom.DomCreateDoucment\n~~~\n\n结果：\n在当前路径下生成text.xml文件：\n~~~\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<font>\n<name>san</name>\n<size unit=\"px\">14</size>\n</font>\n~~~","source":"_posts/2016-07-26-java-DOM-create-xml.md","raw":"---\ntitle: Java DOM生成xml文件\ncategories : java\ntags : [XML， DOM]\n---\n\n我们不仅可以使用DOM的方式解析XML文件，同时也可以使用DOM的方式生成XML文件。本文主要内容是使用DOM的方式生成XML文件。\n\n<!-- more -->\n\n首先是创建DOM之中的各个节点，然后按照各自的层次添加这些节点。\nDomCreateDoucment.java文件内容如下：\n~~~\npackage com.app.dom;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Text;\n\npublic class DomCreateDoucment {\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument doc = builder.newDocument();\n\t\t//构建XML中的节点\n\t\tElement root = doc.createElement(\"font\");\n\t\tElement nameElement = doc.createElement(\"name\");\n\t\tText nameValue = doc.createTextNode(\"san\");\n\t\tElement sizeElement = doc.createElement(\"size\");\n\t\tsizeElement.setAttribute(\"unit\", \"px\");\n\t\tText sizeValue = doc.createTextNode(\"14\");\n       //按顺序添加各个节点\n\t\tdoc.appendChild(root);\n\t\troot.appendChild(nameElement);\n\t\tnameElement.appendChild(nameValue);\n\t\troot.appendChild(sizeElement);\n\t\tsizeElement.appendChild(sizeValue);\n\t\t\n\t\tTransformer t=TransformerFactory.newInstance().newTransformer();\n\t\t//设置换行和缩进\n\t\tt.setOutputProperty(OutputKeys.INDENT,\"yes\");\n\t\tt.setOutputProperty(OutputKeys.METHOD, \"xml\");\n\t\tt.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(new File(\"text.xml\"))));\n\n\t}\n\n}\n~~~\n\n编译：\n在该文件所在目录下执行：\n~~~\njavac -d . DomCreateDoucment.java\n~~~\n执行成功的话会在当前路径下生成:com/app/dom/DomCreateDoucment.class\n\n执行：\n~~~\njava com.app.dom.DomCreateDoucment\n~~~\n\n结果：\n在当前路径下生成text.xml文件：\n~~~\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<font>\n<name>san</name>\n<size unit=\"px\">14</size>\n</font>\n~~~","slug":"2016-07-26-java-DOM-create-xml","published":1,"date":"2016-07-26T03:00:46.413Z","updated":"2016-07-26T03:00:46.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qle3000upq8a7yoolm7j","content":"<p>我们不仅可以使用DOM的方式解析XML文件，同时也可以使用DOM的方式生成XML文件。本文主要内容是使用DOM的方式生成XML文件。</p>\n<a id=\"more\"></a>\n<p>首先是创建DOM之中的各个节点，然后按照各自的层次添加这些节点。<br>DomCreateDoucment.java文件内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.app.dom;</div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\">import javax.xml.parsers.DocumentBuilder;</div><div class=\"line\">import javax.xml.parsers.DocumentBuilderFactory;</div><div class=\"line\">import javax.xml.transform.OutputKeys;</div><div class=\"line\">import javax.xml.transform.Transformer;</div><div class=\"line\">import javax.xml.transform.TransformerFactory;</div><div class=\"line\">import javax.xml.transform.dom.DOMSource;</div><div class=\"line\">import javax.xml.transform.stream.StreamResult;</div><div class=\"line\"></div><div class=\"line\">import org.w3c.dom.Document;</div><div class=\"line\">import org.w3c.dom.Element;</div><div class=\"line\">import org.w3c.dom.Text;</div><div class=\"line\"></div><div class=\"line\">public class DomCreateDoucment &#123;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</div><div class=\"line\">\t\tDocumentBuilder builder = factory.newDocumentBuilder();</div><div class=\"line\">\t\tDocument doc = builder.newDocument();</div><div class=\"line\">\t\t//构建XML中的节点</div><div class=\"line\">\t\tElement root = doc.createElement(&quot;font&quot;);</div><div class=\"line\">\t\tElement nameElement = doc.createElement(&quot;name&quot;);</div><div class=\"line\">\t\tText nameValue = doc.createTextNode(&quot;san&quot;);</div><div class=\"line\">\t\tElement sizeElement = doc.createElement(&quot;size&quot;);</div><div class=\"line\">\t\tsizeElement.setAttribute(&quot;unit&quot;, &quot;px&quot;);</div><div class=\"line\">\t\tText sizeValue = doc.createTextNode(&quot;14&quot;);</div><div class=\"line\">       //按顺序添加各个节点</div><div class=\"line\">\t\tdoc.appendChild(root);</div><div class=\"line\">\t\troot.appendChild(nameElement);</div><div class=\"line\">\t\tnameElement.appendChild(nameValue);</div><div class=\"line\">\t\troot.appendChild(sizeElement);</div><div class=\"line\">\t\tsizeElement.appendChild(sizeValue);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTransformer t=TransformerFactory.newInstance().newTransformer();</div><div class=\"line\">\t\t//设置换行和缩进</div><div class=\"line\">\t\tt.setOutputProperty(OutputKeys.INDENT,&quot;yes&quot;);</div><div class=\"line\">\t\tt.setOutputProperty(OutputKeys.METHOD, &quot;xml&quot;);</div><div class=\"line\">\t\tt.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(new File(&quot;text.xml&quot;))));</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译：<br>在该文件所在目录下执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac -d . DomCreateDoucment.java</div></pre></td></tr></table></figure></p>\n<p>执行成功的话会在当前路径下生成:com/app/dom/DomCreateDoucment.class</p>\n<p>执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java com.app.dom.DomCreateDoucment</div></pre></td></tr></table></figure></p>\n<p>结果：<br>在当前路径下生成text.xml文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</div><div class=\"line\">&lt;font&gt;</div><div class=\"line\">&lt;name&gt;san&lt;/name&gt;</div><div class=\"line\">&lt;size unit=&quot;px&quot;&gt;14&lt;/size&gt;</div><div class=\"line\">&lt;/font&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>我们不仅可以使用DOM的方式解析XML文件，同时也可以使用DOM的方式生成XML文件。本文主要内容是使用DOM的方式生成XML文件。</p>","more":"<p>首先是创建DOM之中的各个节点，然后按照各自的层次添加这些节点。<br>DomCreateDoucment.java文件内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.app.dom;</div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\">import javax.xml.parsers.DocumentBuilder;</div><div class=\"line\">import javax.xml.parsers.DocumentBuilderFactory;</div><div class=\"line\">import javax.xml.transform.OutputKeys;</div><div class=\"line\">import javax.xml.transform.Transformer;</div><div class=\"line\">import javax.xml.transform.TransformerFactory;</div><div class=\"line\">import javax.xml.transform.dom.DOMSource;</div><div class=\"line\">import javax.xml.transform.stream.StreamResult;</div><div class=\"line\"></div><div class=\"line\">import org.w3c.dom.Document;</div><div class=\"line\">import org.w3c.dom.Element;</div><div class=\"line\">import org.w3c.dom.Text;</div><div class=\"line\"></div><div class=\"line\">public class DomCreateDoucment &#123;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</div><div class=\"line\">\t\tDocumentBuilder builder = factory.newDocumentBuilder();</div><div class=\"line\">\t\tDocument doc = builder.newDocument();</div><div class=\"line\">\t\t//构建XML中的节点</div><div class=\"line\">\t\tElement root = doc.createElement(&quot;font&quot;);</div><div class=\"line\">\t\tElement nameElement = doc.createElement(&quot;name&quot;);</div><div class=\"line\">\t\tText nameValue = doc.createTextNode(&quot;san&quot;);</div><div class=\"line\">\t\tElement sizeElement = doc.createElement(&quot;size&quot;);</div><div class=\"line\">\t\tsizeElement.setAttribute(&quot;unit&quot;, &quot;px&quot;);</div><div class=\"line\">\t\tText sizeValue = doc.createTextNode(&quot;14&quot;);</div><div class=\"line\">       //按顺序添加各个节点</div><div class=\"line\">\t\tdoc.appendChild(root);</div><div class=\"line\">\t\troot.appendChild(nameElement);</div><div class=\"line\">\t\tnameElement.appendChild(nameValue);</div><div class=\"line\">\t\troot.appendChild(sizeElement);</div><div class=\"line\">\t\tsizeElement.appendChild(sizeValue);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTransformer t=TransformerFactory.newInstance().newTransformer();</div><div class=\"line\">\t\t//设置换行和缩进</div><div class=\"line\">\t\tt.setOutputProperty(OutputKeys.INDENT,&quot;yes&quot;);</div><div class=\"line\">\t\tt.setOutputProperty(OutputKeys.METHOD, &quot;xml&quot;);</div><div class=\"line\">\t\tt.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(new File(&quot;text.xml&quot;))));</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译：<br>在该文件所在目录下执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac -d . DomCreateDoucment.java</div></pre></td></tr></table></figure></p>\n<p>执行成功的话会在当前路径下生成:com/app/dom/DomCreateDoucment.class</p>\n<p>执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java com.app.dom.DomCreateDoucment</div></pre></td></tr></table></figure></p>\n<p>结果：<br>在当前路径下生成text.xml文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</div><div class=\"line\">&lt;font&gt;</div><div class=\"line\">&lt;name&gt;san&lt;/name&gt;</div><div class=\"line\">&lt;size unit=&quot;px&quot;&gt;14&lt;/size&gt;</div><div class=\"line\">&lt;/font&gt;</div></pre></td></tr></table></figure></p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-07-15T12:56:09.628Z","updated":"2016-07-15T12:56:09.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir46qle7000vpq8af9zvouur","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cir46qlbm0000pq8a7svylm1c","category_id":"cir46qlcd0005pq8aqqoq3wmp","_id":"cir46qld5000cpq8a7rxlht72"},{"post_id":"cir46qld3000bpq8ay753tv4l","category_id":"cir46qlcd0005pq8aqqoq3wmp","_id":"cir46qldi000ipq8a0nkkx9ql"},{"post_id":"cir46qlc10002pq8a06j0vq5k","category_id":"cir46qld2000apq8ageharh04","_id":"cir46qldo000npq8an8f05yve"},{"post_id":"cir46qlce0006pq8ajxzyny65","category_id":"cir46qldb000fpq8adqp84r7e","_id":"cir46qle2000rpq8ap3q6lxr2"},{"post_id":"cir46qlcm0007pq8anp7fsb17","category_id":"cir46qldb000fpq8adqp84r7e","_id":"cir46qlef000wpq8a442sze8p"},{"post_id":"cir46qlco0009pq8aw7df9vh3","category_id":"cir46qle2000spq8a814pd2ko","_id":"cir46qlei0010pq8aywhk4iz8"},{"post_id":"cir46qld6000dpq8a5768u0di","category_id":"cir46qlef000xpq8a4muyf9e4","_id":"cir46qlek0014pq8an6m602pf"},{"post_id":"cir46qldg000hpq8adxfky5t5","category_id":"cir46qlef000xpq8a4muyf9e4","_id":"cir46qlen0018pq8aqz2mrs07"},{"post_id":"cir46qldk000kpq8a174euubx","category_id":"cir46qlek0015pq8alcglqcky","_id":"cir46qler001dpq8a080ehob9"},{"post_id":"cir46qldt000opq8ab91wyy7t","category_id":"cir46qlek0015pq8alcglqcky","_id":"cir46qlez001hpq8ar0f5d5sx"},{"post_id":"cir46qldy000qpq8axa1mb3k7","category_id":"cir46qles001epq8a4sfavd2b","_id":"cir46qlf1001lpq8au0thgix3"},{"post_id":"cir46qle3000upq8a7yoolm7j","category_id":"cir46qles001epq8a4sfavd2b","_id":"cir46qlf7001opq8adruui11l"}],"PostTag":[{"post_id":"cir46qlbm0000pq8a7svylm1c","tag_id":"cir46qlc80004pq8aj24pom9j","_id":"cir46qlde000gpq8as7zde6y8"},{"post_id":"cir46qlbm0000pq8a7svylm1c","tag_id":"cir46qlcn0008pq8awnbo6lwl","_id":"cir46qldj000jpq8ayc2odlke"},{"post_id":"cir46qlc10002pq8a06j0vq5k","tag_id":"cir46qld8000epq8a6b33dw8q","_id":"cir46qldx000ppq8ac7szugol"},{"post_id":"cir46qlce0006pq8ajxzyny65","tag_id":"cir46qldm000lpq8ay15ihtro","_id":"cir46qleg000zpq8aldcfat08"},{"post_id":"cir46qlce0006pq8ajxzyny65","tag_id":"cir46qle3000tpq8ag1rrvytg","_id":"cir46qlei0011pq8ahwn39jan"},{"post_id":"cir46qlcm0007pq8anp7fsb17","tag_id":"cir46qleg000ypq8a15lsoof5","_id":"cir46qlem0017pq8a5iy1qfwc"},{"post_id":"cir46qlcm0007pq8anp7fsb17","tag_id":"cir46qlej0013pq8adgwk10up","_id":"cir46qlen0019pq8a9qdhfwnz"},{"post_id":"cir46qlco0009pq8aw7df9vh3","tag_id":"cir46qlel0016pq8anfav8vo2","_id":"cir46qler001cpq8aq6uz911m"},{"post_id":"cir46qld3000bpq8ay753tv4l","tag_id":"cir46qleo001bpq8apmqmzk2y","_id":"cir46qlez001gpq8a57zqbjbb"},{"post_id":"cir46qld6000dpq8a5768u0di","tag_id":"cir46qlew001fpq8ai9ul8wnt","_id":"cir46qlf1001kpq8azpvfzgkl"},{"post_id":"cir46qldg000hpq8adxfky5t5","tag_id":"cir46qleo001bpq8apmqmzk2y","_id":"cir46qlf7001npq8az5anvsxd"},{"post_id":"cir46qldk000kpq8a174euubx","tag_id":"cir46qlf5001mpq8ajjt8i4l8","_id":"cir46qlfj001upq8aftsbon3k"},{"post_id":"cir46qldk000kpq8a174euubx","tag_id":"cir46qlfb001ppq8aet0zm35o","_id":"cir46qlfj001vpq8a9tsl0gsq"},{"post_id":"cir46qldk000kpq8a174euubx","tag_id":"cir46qlfc001qpq8a91ddngq6","_id":"cir46qlfl001xpq8a3n7vjh44"},{"post_id":"cir46qldk000kpq8a174euubx","tag_id":"cir46qlfc001rpq8ax7u4fwm0","_id":"cir46qlfm001ypq8appmti2ft"},{"post_id":"cir46qldk000kpq8a174euubx","tag_id":"cir46qlfg001spq8a8iqe64kr","_id":"cir46qlfp0020pq8a7w3zinid"},{"post_id":"cir46qldt000opq8ab91wyy7t","tag_id":"cir46qlf5001mpq8ajjt8i4l8","_id":"cir46qlfr0023pq8a1ktkfk5i"},{"post_id":"cir46qldt000opq8ab91wyy7t","tag_id":"cir46qlfc001qpq8a91ddngq6","_id":"cir46qlfr0024pq8ao6onxae1"},{"post_id":"cir46qldt000opq8ab91wyy7t","tag_id":"cir46qlfc001rpq8ax7u4fwm0","_id":"cir46qlfs0026pq8auyt6cndr"},{"post_id":"cir46qldt000opq8ab91wyy7t","tag_id":"cir46qlfg001spq8a8iqe64kr","_id":"cir46qlfs0027pq8abyavcf3u"},{"post_id":"cir46qldy000qpq8axa1mb3k7","tag_id":"cir46qlfr0022pq8a0n84357x","_id":"cir46qlft0028pq8a6ryjxbf9"},{"post_id":"cir46qle3000upq8a7yoolm7j","tag_id":"cir46qlfs0025pq8a7n9vv9sj","_id":"cir46qlft0029pq8advhauwq8"}],"Tag":[{"name":"visual stdio code","_id":"cir46qlc80004pq8aj24pom9j"},{"name":"vsc","_id":"cir46qlcn0008pq8awnbo6lwl"},{"name":"markdown","_id":"cir46qld8000epq8a6b33dw8q"},{"name":"digital signature","_id":"cir46qldm000lpq8ay15ihtro"},{"name":"digital certificate","_id":"cir46qle3000tpq8ag1rrvytg"},{"name":"SSL","_id":"cir46qleg000ypq8a15lsoof5"},{"name":"VPN","_id":"cir46qlej0013pq8adgwk10up"},{"name":"git","_id":"cir46qlel0016pq8anfav8vo2"},{"name":"samba","_id":"cir46qleo001bpq8apmqmzk2y"},{"name":"Vmware","_id":"cir46qlew001fpq8ai9ul8wnt"},{"name":"xml","_id":"cir46qlf5001mpq8ajjt8i4l8"},{"name":"xalan","_id":"cir46qlfb001ppq8aet0zm35o"},{"name":"xsl","_id":"cir46qlfc001qpq8a91ddngq6"},{"name":"xslt","_id":"cir46qlfc001rpq8ax7u4fwm0"},{"name":"xpath","_id":"cir46qlfg001spq8a8iqe64kr"},{"name":"JDBC， MySql","_id":"cir46qlfr0022pq8a0n84357x"},{"name":"XML， DOM","_id":"cir46qlfs0025pq8a7n9vv9sj"}]}}